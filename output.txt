File path: kumuluzee-config/src/main/java/com/kumuluz/ee/samples/kumuluz_config/ConfigApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluz_config;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("/v1")
public class ConfigApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-version/src/main/java/com/kumuluz/ee/samples/jaxrs/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxrs;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: jsp/src/main/resources/webapp/list.jsp
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;Customers&lt;/h2&gt;
    &lt;jsp:include page="${pageContext.request.contextPath}/customers"/&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

import javax.annotation.security.DeclareRoles;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@DeclareRoles({"user", "admin"})
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/interceptors/LogContextInterceptor.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.interceptors;

import com.kumuluz.ee.common.runtime.EeRuntime;
import com.kumuluz.ee.configuration.utils.ConfigurationUtil;
import com.kumuluz.ee.logs.cdi.Log;
import org.apache.logging.log4j.CloseableThreadContext;

import javax.annotation.Priority;
import javax.interceptor.AroundInvoke;
import javax.interceptor.Interceptor;
import javax.interceptor.InvocationContext;
import java.util.HashMap;
import java.util.UUID;

@Log
@Interceptor
@Priority(Interceptor.Priority.PLATFORM_BEFORE)
public class LogContextInterceptor {

    @AroundInvoke
    public Object logMethodEntryAndExit(InvocationContext context) throws Exception {

        ConfigurationUtil configurationUtil = ConfigurationUtil.getInstance();

        HashMap settings = new HashMap();

        settings.put("environmentType", configurationUtil.get("kumuluzee.env.name").orElse(null));
        settings.put("applicationName", configurationUtil.get("kumuluzee.name").orElse(null));
        settings.put("applicationVersion", configurationUtil.get("kumuluzee.version").orElse(null));
        settings.put("uniqueInstanceId", EeRuntime.getInstance().getInstanceId());

        settings.put("uniqueRequestId", UUID.randomUUID().toString());

        try (final CloseableThreadContext.Instance ctc = CloseableThreadContext.putAll(settings)) {
            Object result = context.proceed();
            return result;
        }
    }
}</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-orders&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;orders-api&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
            &lt;artifactId&gt;orders-business-logic&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.health&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-health&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.cors&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cors&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/java/com/kumuluz/ee/samples/kumuluzee_database_schema_migrations_liquibase/LiquibaseService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_database_schema_migrations_liquibase;

import com.kumuluz.ee.database.schema.migrations.liquibase.LiquibaseContainer;
import com.kumuluz.ee.database.schema.migrations.liquibase.annotations.LiquibaseChangelog;
import liquibase.Contexts;
import liquibase.LabelExpression;
import liquibase.Liquibase;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import com.kumuluz.ee.logs.LogManager;
import com.kumuluz.ee.logs.Logger;

/**
 * @author Din Music
 * @since 3.13.0
 */
@RequestScoped
public class LiquibaseService {

    private static final Logger LOG = LogManager.getLogger(LiquibaseService.class.getName());

    @Inject
    @LiquibaseChangelog(jndiName = "jdbc/BooksDS")
    private LiquibaseContainer liquibaseContainer;

    public void reset() {

        Liquibase liquibase = liquibaseContainer.createLiquibase();

        // Retrieves contexts and labels from Liquibase configuration in KumuluzEE config file
        Contexts contexts = liquibaseContainer.getContexts();
        LabelExpression labels = liquibaseContainer.getLabels();

        try {
            liquibase.dropAll();
            liquibase.update(contexts, labels);
            liquibase.validate();

        } catch (Exception e) {
            LOG.error("Error while resetting database.", e);
        }
    }

    public void populate() {

        Liquibase liquibase = liquibaseContainer.createLiquibase();

        try {
            liquibase.update("populate");
        } catch (Exception e) {
            LOG.error("Error while populating database.", e);
        }
    }
}
</pre></body></html>




File path: kumuluzee-graphql-jpa-security/src/main/java/com/kumuluz/ee/samples/graphql_security/CustomerApp.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_security;

import com.kumuluz.ee.graphql.GraphQLApplication;
import com.kumuluz.ee.graphql.annotations.GraphQLApplicationClass;

import javax.annotation.security.DeclareRoles;

@GraphQLApplicationClass
@DeclareRoles({"user", "admin"})
public class CustomerApp extends GraphQLApplication {
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">tmp/
</pre></body></html>




File path: kumuluzee-rest-client/src/main/java/com/kumuluz/ee/samples/kumuluzee_rest_client/exceptions/SensitiveDataException.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_rest_client.exceptions;

/**
 * @author Urban Malc
 * @since 3.1.0
 */
public class SensitiveDataException extends RuntimeException {
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-business-logic/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-tutorial-customers&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;customers-business-logic&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-fault-tolerance-hystrix&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
            &lt;artifactId&gt;customers-persistence&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Kafka Streams with Schema Registry

This sample's focus is on using Schema Registry with Kafka. For Kafka basics, see the `kumuluzee-streaming-kafka` sample.

&gt; After initial project build, you should cd to kumuluzee-streaming-kafka-registry-streams to run the avro and schema registry plugins from the streams module.

## Additional maven dependencies
We need Avro and record serializer:
```
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
    &lt;artifactId&gt;avro&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.confluent&lt;/groupId&gt;
    &lt;artifactId&gt;kafka-streams-avro-serde&lt;/artifactId&gt;
&lt;/dependency&gt;
```

# Tutorial
Our streams application will behave like a consumer and producer at the same time. We will consume prices from `pricing-avro` topic, sum the `price` field and produce the new sum into `sum-avro` topic using a sum schema.

## Producing: Generate Sum POJO and register schema
Our schema resides in `src/main/resources/schemas/avro/sum.avsc`. Generate POJO with `mvn compile`.
POJO appears in `src/generated` folder.

Now register the schema with `mvn schema-registry:register`.

## Consuming: Download Pricing schema and generate POJO
For the consumer part, we need to pull down the latest schema and generate the POJO:
```
mvn schema-registry:download
mvn compile
```
Pricing.java also appears in `src/generated` folder.

## Test
After running streams EeApplication, insert a new price, this time with a price value of 1.00 instead of the previous 0.00.

```
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"price":"1.00","priceExTax":"0.00","taxAmount":"0.00","basePrice":"0.00","priceAmount":"0.00","description":"Desc"}' \
  http://localhost:8080/produce
```
Now check the `sum-avro` topic in Kafdrop. It should contain a record with sum __1.00__.

Produce another price, this time with a value of __15.00__.
```
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"price":"15.00","priceExTax":"0.00","taxAmount":"0.00","basePrice":"0.00","priceAmount":"0.00","description":"Desc"}' \
  http://localhost:8080/produce
```
Refresh Kafdrop and you should see a new record with value of __16.00__.

## Conclusion
This sample has demonstrated how to use Avro schemas with Kafka and Confluent Schema Registry. It shows typical use cases and flows for consumer, producers and streams.
</pre></body></html>




File path: kumuluzee-logs-fluentd/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: fluentd-sample
  env:
    name: dev
  version: 1.0.0
  logs:
    fluentd:
      hostname: localhost
      port: 24224
</pre></body></html>




File path: jax-ws/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jax-ws&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE JAX-WS sample&lt;/name&gt;
    &lt;description&gt;JAX-WS usage sample with KumuluzEE&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;jax-ws-metro&lt;/module&gt;
        &lt;module&gt;jax-ws-cxf&lt;/module&gt;
    &lt;/modules&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-discovery/src/main/java/com/kumuluz/ee/samples/reactive/vertx/DiscoveryVerticle.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.servicediscovery.Record;
import io.vertx.servicediscovery.ServiceDiscovery;
import io.vertx.servicediscovery.types.HttpEndpoint;

import java.util.logging.Logger;

/**
 *
 * @author Žan Ožbot
 */
public class DiscoveryVerticle extends AbstractVerticle {

	private static final Logger log = Logger.getLogger(DiscoveryVerticle.class.getName());

    private Record record;
    private ServiceDiscovery discovery;

    private final JsonObject SERVICE = new JsonObject()
												.put("name", "customer-service")
												.put("version", "1.0.0")
												.put("env", "dev");

    private final String REQUEST_ADDRESS = "vertx.discovery.request";

	@Override
	public void start() throws Exception {
		createServer();
		publishService();
	}

	private void createServer() {
		HttpServer server = vertx.createHttpServer();
		Router router = Router.router(vertx);

		router.get("/").handler(routingContext -&gt; {
			routingContext.response()
					.end((new JsonObject().put("status", "UP")).toString());
		});

		router.get("/discover").handler(routingContext -&gt; {
			getService(routingContext.response());
		});

		server.requestHandler(router::accept).listen(8082);
	}

	private void getService(HttpServerResponse response) {
		vertx.eventBus().send(REQUEST_ADDRESS, SERVICE, ar -&gt; {
			if (ar.succeeded() &amp;&amp; ar.result() != null) {
				JsonObject reply = (JsonObject) ar.result().body();
				response.end(reply.toString());
			} else {
				response.end((new JsonObject().put("message", "Failed to retrieve service url.")).toString());
			}
		});
	}

	private void publishService() {
		discovery = ServiceDiscovery.create(vertx);

		record = HttpEndpoint.createRecord("some-rest-api", "localhost", 8080, "");

		discovery.publish(record, ar -&gt; {
			if (ar.succeeded()) {
				record.setRegistration(ar.result().getRegistration());
				log.info("Service was successfully registered.");
			} else {
				log.info("Vert.x service registration failed.");
			}
		});
	}

	@Override
	public void stop() throws Exception {
        discovery.unpublish(record.getRegistration(), ar -&gt; {
            if(ar.succeeded()) {
                log.info("Service was successfully deregistered.");
            } else {
                log.info("Error deregistering service.");
            }
        });
	}

}
</pre></body></html>




File path: https/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;https&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JAX-RS over HTTPS sample&lt;/name&gt;
    &lt;description&gt;JAX-RS over HTTPS usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-reactive-vertx-bridge&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Reactive Vert.x discovery bridge&lt;/name&gt;
    &lt;description&gt;Bridge between KumuluzEE Discovery and Vert.x Service Discovery&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.reactive&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-reactive-vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-logs-fluentd/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Logs sample with Fluentd logger

&gt; Build a REST service that utilizes a built-in logging framework with Fluentd logger and 
pack it as a KumuluzEE microservice

The objective of this sample is to demonstrate how to use the built-in logging framework with Fluentd logger to log 
application logs to the Fluentd logging layer.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

- Docker

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-logs-fluentd
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environment use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to use KumuluzEE Logs and pack the application as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Add Maven dependencies
* Add KumuluzEE Logs support
* Add Fluentd logging configuration
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in `pom.xml`.

Add the `kumuluzee-cdi-weld` and `kumuluzee-logs-fluentd` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-logs-fluentd&lt;/artifactId&gt;
    &lt;version&gt;${kumuluz-logs.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```
### Create Fluentd configuration file
In this sample we will run Fluentd in a Docker container. We will use the following configuration (configuration file
 can be found in the root of the repository):  
```
&lt;source&gt;
    @type forward
    @id input1
    @label @mainstream
    port 24224
&lt;/source&gt;
&lt;filter **&gt;
    @type stdout
&lt;/filter&gt;

&lt;label @mainstream&gt;
    &lt;match com.kumuluz.ee.samples.kumuluzee_logs.CustomerResource.**&gt;
        @type file
        @id output2
        path "/fluentd/log/data.com.kumuluz.ee.samples.kumuluzee_logs.CustomerResource.*.log"
        symlink_path "/fluentd/log/data.log"
        append true
    &lt;/match&gt;
    &lt;match docker.**&gt;
        @type file
        @id output_docker
        path "/fluentd/log/docker.*.log"
        symlink_path "/fluentd/log/docker.log"
        append true
        time_slice_format %Y%m%d
        &lt;buffer time&gt;
          timekey_wait 1m
          timekey 86400
          path /fluentd/log/docker.*.log
        &lt;/buffer&gt;
      &lt;/match&gt;
      &lt;match **&gt;
          @type file
          @id output_other
          path "/fluentd/log/data.*.log"
          symlink_path "/fluentd/log/data.log"
          append true
          time_slice_format %Y%m%d
          &lt;buffer time&gt;
            timekey_wait 10m
            timekey 86400
            path /fluentd/log/data.*.log
          &lt;/buffer&gt;
      &lt;/match&gt;
&lt;/label&gt;
```

The configuration exposes endpoint on the port 24224 for the purpose of collecting logs from Java application. 
Furthermore we define where logs from different classes inside our application will get routed with match directive. 
For example, logs from CustomerResource class will be exposed through Fluentd and standard output.

### Run Fluentd daemon
The confuration file is available in the project as Customers.conf. We are going to copy it to `/tmp` of our Docker 
host.

```bash
cp Customers.conf /tmp
```
Then we run the Daemon inside Docker and mount the `/fluentd/log` directory.
```bash
docker run --name fluentd-daemon -d -p 24224:24224 -p 24224:24224/udp -v /tmp:/fluentd/log -v /tmp:/fluentd/etc fluent/fluentd:v1.3-debian-1 -c /fluentd/etc/Customers.conf
```

### Add KumuluzEE Logs support

Enhance `CustomerResource` class by adding KumuluzEE Logs annotations:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Log
public class CustomerResource {

    //...

    @POST
    @Log(value = LogParams.METRICS, methodCall = false)
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }
}
```

### Add Fluentd logging configuration

The location of Fluentd daemon can be speficied through configuration. Here we will set properties inside config.yaml.

In this sample in directory `resources` create file `config.yaml`:

```yaml
kumuluzee:
  name: fluentd-sample
  env:
    name: dev
  version: 1.0.0
  logs:
    fluentd:
      hostname: localhost
      port: 24224
```
### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

### Check the logs
Logs are avaiable in `/fluentd/log/` directory inside Docker container and were mounted on `/tmp` directory on your computer. 
</pre></body></html>




File path: kumuluzee-microProfile-1.2/src/main/java/com/kumuluz/ee/samples/kumuluzee_microProfile_12/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_microProfile_12;

import com.kumuluz.ee.fault.tolerance.annotations.CommandKey;
import com.kumuluz.ee.fault.tolerance.annotations.GroupKey;
import org.eclipse.microprofile.faulttolerance.CircuitBreaker;
import org.eclipse.microprofile.faulttolerance.Timeout;
import org.eclipse.microprofile.jwt.JsonWebToken;
import org.eclipse.microprofile.metrics.MetricUnits;
import org.eclipse.microprofile.metrics.annotation.Gauge;
import org.eclipse.microprofile.metrics.annotation.Metered;
import org.eclipse.microprofile.metrics.annotation.Timed;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@RequestScoped
@GroupKey("customers")
public class CustomerResource {

    @Inject
    private JsonWebToken principal;

    @GET
    public Response getAllCustomers() {
        return Response.ok(Database.getCustomers()).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") int customerId) {
        Customer customer = Database.getCustomer(customerId);
        if (customer != null) {
            return Response.ok(customer).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @GET
    @Path("add-sample-names")
    @Timed(name = "add-sample-names-timer")
    public Response addSampleNames() {
        addNewCustomer(new Customer(Database.getCustomers().size(), "Daniel", "Ornelas"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Dennis", "McBride"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Walter", "Wright"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Mitchell", "Kish"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Tracy", "Edwards"));

        return Response.noContent().build();
    }

    @POST
    @CommandKey("add-customer")
    @Timeout
    @CircuitBreaker
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    @Metered(name = "customer_deleting_meter")
    public Response deleteCustomer(@PathParam("customerId") int customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }

    @Gauge(name = "customer_count_gauge", unit = MetricUnits.NONE)
    private int getCustomerCount() {
        return Database.getCustomers().size();
    }
}
</pre></body></html>




File path: kumuluzee-config-mp/src/main/java/com/kumuluz/ee/samples/configsources/ExampleConfigSource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.configsources;

import org.eclipse.microprofile.config.spi.ConfigSource;

import java.util.Map;

/**
 * @author Urban Malc
 * @author Jan Meznarič
 * @since 2.5.0
 */
public class ExampleConfigSource implements ConfigSource {

    @Override
    public Map&lt;String, String&gt; getProperties() {
        return null;
    }

    @Override
    public int getOrdinal() {
        return 120;
    }

    @Override
    public String getValue(String s) {

        if ("mp.custom-source-value".equals(s)) {
            return "Hello from custom ConfigSource";
        }

        return null;
    }

    @Override
    public String getName() {
        return "ExampleSource";
    }
}
</pre></body></html>




File path: jul/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JUL sample

&gt; Build a REST service which utilizes the default logging implementation by java.util.logging to log basic information 
and pack it as a KumuluzEE microservice

The objective of this sample is to demonstrate how to use the default logging implementation by java.util.logging to 
log basic information. No additional dependencies are needed to enable simple logging.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd jul
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to use KumuluzEE Logs and pack the application as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Configure java.util.logging configuration
* Build the microservice
* Run it

### Configure java.util.logging configuration

The default java.util.logging configuration can be overridden by providing the location of the custom configuration 
file with system property `-Djava.util.logging.config.file`.

In this sample in directory `resources` create file `logging.properties`: 

```
# Default global logging level
.level=INFO

# ConsoleHandler definition
handlers=java.util.logging.ConsoleHandler

# ConsoleHandler configuration settings
java.util.logging.ConsoleHandler.level=INFO
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
```

To use this configuration instead of the default one provide system property `-Djava.util.logging.config.file` when 
running the application:

```bash
$ java -Djava.util.logging.config.file=&lt;path&gt;/kumuluzee-samples/kumuluzee-logs-simple/src/main/resources/logging.properties -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
```

in Windows environment use the command
```batch
java -Djava.util.logging.config.file=&lt;path&gt;/kumuluzee-samples/kumuluzee-logs-simple/src/main/resources/logging.properties -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
```

and replace the `&lt;path&gt;` with appropriate directory path.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-logs-fluentd/Customers.conf
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;source&gt;
    @type forward
    @id input1
    @label @mainstream
    port 24224
&lt;/source&gt;
&lt;filter **&gt;
    @type stdout
&lt;/filter&gt;

&lt;label @mainstream&gt;
    &lt;match com.kumuluz.ee.samples.kumuluzee_logs.CustomerResource.**&gt;
        @type file
        @id output2
        path "/fluentd/log/data.com.kumuluz.ee.samples.kumuluzee_logs.CustomerResource.*.log"
        symlink_path "/fluentd/log/data.log"
        append true
    &lt;/match&gt;
    &lt;match docker.**&gt;
        @type file
        @id output_docker
        path "/fluentd/log/docker.*.log"
        symlink_path "/fluentd/log/docker.log"
        append true
        time_slice_format %Y%m%d
        &lt;buffer time&gt;
          timekey_wait 1m
          timekey 86400
          path /fluentd/log/docker.*.log
        &lt;/buffer&gt;
      &lt;/match&gt;
      &lt;match **&gt;
          @type file
          @id output_other
          path "/fluentd/log/data.*.log"
          symlink_path "/fluentd/log/data.log"
          append true
          time_slice_format %Y%m%d
          &lt;buffer time&gt;
            timekey_wait 10m
            timekey 86400
            path /fluentd/log/data.*.log
          &lt;/buffer&gt;
      &lt;/match&gt;
&lt;/label&gt;
</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/java/com/kumuluz/ee/samples/jaxws/cxf/CustomerEndpointBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxws.cxf;


import com.kumuluz.ee.jaxws.cxf.annotations.WsContext;
import com.kumuluz.ee.samples.jaxws.cxf.interceptors.WsInterceptor;
import com.kumuluz.ee.samples.jaxws.cxf.service.CustomersService;
import com.kumuluz.samples.jax_ws.cxf.customers._1.CustomerEndpoint;
import com.kumuluz.samples.jax_ws.cxf.customers._1.GetCustomers;
import com.kumuluz.samples.jax_ws.cxf.customers._1.GetCustomersResponse;
import org.apache.cxf.annotations.SchemaValidation;

import javax.annotation.Resource;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.interceptor.Interceptors;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.ws.WebServiceContext;
import java.util.logging.Logger;

/**
 * @author gpor89
 * @since 3.0.0
 */
@WsContext(contextRoot = "/soap", urlPattern = "/customers/1.0")
@ApplicationScoped
@WebService(serviceName = "CustomerEndpoint", portName = "CustomerEndpointSOAP", targetNamespace = "http://kumuluz.com/samples/jax-ws/cxf/customers/1.0",
        endpointInterface = "com.kumuluz.samples.jax_ws.cxf.customers._1.CustomerEndpoint", wsdlLocation = "/wsdls/customers.wsdl")
@SchemaValidation
@Interceptors(WsInterceptor.class)
@HandlerChain(file = "/META-INF/handler-chains.xml")
public class CustomerEndpointBean implements CustomerEndpoint {

    private static final Logger LOG = Logger.getLogger(CustomerEndpointBean.class.getName());

    @Inject
    private CustomersService customersService;

    @Resource(name = "wsContext")
    private WebServiceContext webServiceContext;

    @Override
    public GetCustomersResponse getCustomers(final GetCustomers parameters) {

        String soapAction = (String) webServiceContext.getMessageContext().get("SOAPAction");
        LOG.info("Soap action: " + soapAction);

        GetCustomersResponse response = new GetCustomersResponse();
        response.getCustomers().addAll(customersService.getCustomers());

        return response;
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/resources/CustomersResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.resources;


import com.kumuluz.ee.logs.cdi.Log;
import com.kumuluz.ee.samples.tutorial.customers.Customer;
import com.kumuluz.ee.samples.tutorial.customers.cdi.CustomersBean;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.eclipse.microprofile.metrics.annotation.Metered;

import javax.annotation.security.RolesAllowed;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.util.List;

@Api(value = "Customers", description = "Resource for managing customer date.")
@RequestScoped
@Path("/customers")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Log
public class CustomersResource {

    @Inject
    private CustomersBean customersBean;

    @Context
    protected UriInfo uriInfo;


    @GET
    @ApiOperation(value = "Get customers", notes = "Returns a list of all customers.", response = Customer.class)
    //@RolesAllowed("user")
    public Response getCustomers() {

        List&lt;Customer&gt; customers = customersBean.getCustomers();

        return Response.ok(customers).build();
    }

    @GET
    @Path("/filtered")
    public Response getCustomersFiltered() {

        List&lt;Customer&gt; customers;

        customers = customersBean.getCustomersFilter(uriInfo);

        return Response.status(Response.Status.OK).entity(customers).build();
    }

    @GET
    @ApiOperation(value = "Get a customer", notes = "Returns a customer with provided id.", response = Customer.class)
    @Path("/{customerId}")
    //@RolesAllowed("user")
    public Response getCustomer(@PathParam("customerId") String customerId) {

        Customer customer = customersBean.getCustomer(customerId);

        if (customer == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }

        return Response.status(Response.Status.OK).entity(customer).build();
    }

    @POST
    public Response createCustomer(Customer customer) {

        if ((customer.getFirstName() == null || customer.getFirstName().isEmpty()) || (customer.getLastName() == null
                || customer.getLastName().isEmpty())) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        } else {
            customer = customersBean.createCustomer(customer);
        }

        if (customer.getId() != null) {
            return Response.status(Response.Status.CREATED).entity(customer).build();
        } else {
            return Response.status(Response.Status.CONFLICT).entity(customer).build();
        }
    }

    @PUT
    @Path("{customerId}")
    public Response putZavarovanec(@PathParam("customerId") String customerId, Customer customer) {

        customer = customersBean.putCustomer(customerId, customer);

        if (customer == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        } else {
            if (customer.getId() != null)
                return Response.status(Response.Status.OK).entity(customer).build();
            else
                return Response.status(Response.Status.NOT_MODIFIED).build();
        }
    }

    @DELETE
    @Path("{customerId}")
    //@RolesAllowed("admin")
    @Metered(name = "delete-requests")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {

        boolean deleted = customersBean.deleteCustomer(customerId);

        if (deleted) {
            return Response.status(Response.Status.GONE).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-config-mp/src/main/resources/META-INF/services/org.eclipse.microprofile.config.spi.ConfigSourceProvider
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">com.kumuluz.ee.samples.configsources.ExampleConfigSourceProvider</pre></body></html>




File path: kumuluzee-logs-log4j2/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev</pre></body></html>




File path: kumuluzee-config-consul/src/main/resources/META-INF/services/com.kumuluz.ee.configuration.ConfigurationDecoder
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">com.kumuluz.ee.samples.kumuluz_config_consul.CustomConfigurationDecoder</pre></body></html>




File path: kumuluzee-rest/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: kumuluzee-samples-migrations-liquibase
  datasources:
    - jndi-name: jdbc/BooksDS
      connection-url: jdbc:postgresql://localhost:5432/postgres
      username: postgres
      password: postgres
      pool:
        max-size: 20
  database-schema-migrations:
    enabled: true
    liquibase:
      changelogs:
        - jndi-name: jdbc/BooksDS
          file: db/books-changelog.xml
          contexts: "init"
          startup:
            drop-all: true
            update: true</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/java/com/kumuluz/ee/samples/amqp/rabbitmq/messaging/ConnectionInitializer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.amqp.rabbitmq.messaging;

import com.kumuluz.ee.amqp.common.annotations.AMQPConnection;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

import javax.enterprise.context.ApplicationScoped;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeoutException;
import java.util.logging.Logger;

/**
 * @author Blaž Mrak
 * @since 3.2.0
 */

@ApplicationScoped
public class ConnectionInitializer {

    private static Logger log = Logger.getLogger(ConnectionInitializer.class.getName());

    @AMQPConnection
    public Map&lt;String, Connection&gt; localhostConnection() {
        Map&lt;String, Connection&gt; localhost = new HashMap&lt;&gt;();

        ConnectionFactory connectionFactory = new ConnectionFactory();
        connectionFactory.setHost("localhost");

        Connection connection = null;

        try {
            connection = connectionFactory.newConnection();
        } catch (IOException | TimeoutException e) {
            log.severe("Connection could not be created");
        }

        localhost.put("MQtest2", connection);
        return localhost;
    }
}
</pre></body></html>




File path: kumuluzee-openapi-mp/src/main/java/com/kumuluz/ee/samples/openapi/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.openapi;

import java.util.List;

/**
 * Customer class.
 *
 * @author Zvone Gazvoda
 * @since 3.2.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;
    private List&lt;Membership&gt; membership;

    public Customer(String id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }


    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public List&lt;Membership&gt; getMembership() {
        return membership;
    }

    public void setMembership(List&lt;Membership&gt; membership) {
        this.membership = membership;
    }

    @Override
    public String toString() {
        return "Customer {\n" +
                "  id='" + id + "',\n" +
                "  firstName='" + firstName + "',\n" +
                "  lastName='" + lastName + "'\n" +
                "}";
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-discovery/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;simple-verticles&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;verticle-discovery&lt;/artifactId&gt;

    &lt;name&gt;Sample for bridge discovery&lt;/name&gt;
    &lt;description&gt;Register a Vert.x service and request for a registered service&lt;/description&gt;

    &lt;properties&gt;
        &lt;!-- the main verticle class name --&gt;
        &lt;main.verticle&gt;com.kumuluz.ee.samples.reactive.vertx.DiscoveryVerticle&lt;/main.verticle&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.vertx&lt;/groupId&gt;
            &lt;artifactId&gt;vertx-web&lt;/artifactId&gt;
            &lt;version&gt;${vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.vertx&lt;/groupId&gt;
            &lt;artifactId&gt;vertx-hazelcast&lt;/artifactId&gt;
            &lt;version&gt;${vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.vertx&lt;/groupId&gt;
            &lt;artifactId&gt;vertx-service-discovery&lt;/artifactId&gt;
            &lt;version&gt;3.5.0&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;pluginManagement&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;version&gt;${maven.compiler.version}&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;source&gt;${maven.compiler.source}&lt;/source&gt;
                        &lt;target&gt;${maven.compiler.target}&lt;/target&gt;
                    &lt;/configuration&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;

        &lt;!-- You only need the part below if you want to build your application
            into a fat executable jar. This is a jar that contains all the dependencies
            required to run it, so you can just run it with java -jar --&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
                &lt;version&gt;${maven.shade.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;shade&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;transformers&gt;
                                &lt;transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;
                                    &lt;manifestEntries&gt;
                                        &lt;Main-Class&gt;io.vertx.core.Launcher&lt;/Main-Class&gt;
                                        &lt;Main-Verticle&gt;${main.verticle}&lt;/Main-Verticle&gt;
                                    &lt;/manifestEntries&gt;
                                &lt;/transformer&gt;
                                &lt;transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer"&gt;
                                    &lt;resource&gt;META-INF/services/io.vertx.core.spi.VerticleFactory&lt;/resource&gt;
                                &lt;/transformer&gt;
                            &lt;/transformers&gt;
                            &lt;artifactSet&gt;
                            &lt;/artifactSet&gt;
                            &lt;outputFile&gt;${project.build.directory}/${project.artifactId}-${project.version}-fat.jar&lt;/outputFile&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${maven.exec.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;run&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;java&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;mainClass&gt;io.vertx.core.Launcher&lt;/mainClass&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;run&lt;/argument&gt;
                                &lt;argument&gt;${main.verticle}&lt;/argument&gt;
                            &lt;/arguments&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;

                    &lt;execution&gt;
                        &lt;id&gt;run-app&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;exec&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;executable&gt;java&lt;/executable&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;-jar&lt;/argument&gt;
                                &lt;argument&gt;target/${project.artifactId}-${project.version}-fat.jar&lt;/argument&gt;
                            &lt;/arguments&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing/orders/src/main/java/com/kumuluz/ee/samples/opentracing/orders/OrderResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.orders;

import io.opentracing.Tracer;
import org.eclipse.microprofile.opentracing.Traced;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Domen Jeric
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("orders")
@ApplicationScoped
@Traced
public class OrderResource {

    @Inject
    Tracer configuredTracer;

    @GET
    public Response getAllOrders() {
        configuredTracer.activeSpan().log("Getting all orders...");
        List&lt;Order&gt; orders = Database.getOrders();
        configuredTracer.activeSpan().log("Got "+ orders.size() + " orders.");
        return Response.ok(orders).build();
    }

    @GET
    @Path("{orderId}")
    public Response getOrder(@PathParam("orderId") String orderId) {
        Order order = Database.getOrder(orderId);
        return order != null
                ? Response.ok(order).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewOrder(Order order) {
        Database.addOrder(order);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{orderId}")
    public Response deleteOrder(@PathParam("orderId") String orderId) {
        Database.deleteOrder(orderId);
        return Response.noContent().build();
    }
}

</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/java/com/kumuluz/ee/samples/kafka/registry/streams/SumStreamsBuilder.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.streams;

import com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing;
import com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum;
import com.kumuluz.ee.streaming.common.annotations.StreamProcessor;
import io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.Produced;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.Map;

/**
 * @author cen1
 */
@ApplicationScoped
public class SumStreamsBuilder {

    @Inject
    private GenericConfig config;

    @StreamProcessor(id="price-sum", autoStart=false, config="streams-avro")
    public StreamsBuilder sum() {

        StreamsBuilder builder = new StreamsBuilder();

        final Serde&lt;String&gt; keySerde = Serdes.String();
        final Serde&lt;BigDecimal&gt; bigDecimalSerde = new BigDecimalSerde();
        final Serde&lt;Pricing&gt; consumeValueSerde = new SpecificAvroSerde&lt;&gt;();
        final Serde&lt;Sum&gt; produceValueSerde = new SpecificAvroSerde&lt;&gt;();

        // config.yml only configures the default SerDes. All non-default SerDes need to be
        // configured explicitely here.
        final Map&lt;String, String&gt; serdeConfig = Collections.singletonMap("schema.registry.url",
            config.getSchemaRegistryUrl());
        consumeValueSerde.configure(serdeConfig, false);
        produceValueSerde.configure(serdeConfig, false);

        final String inputTopic = "pricing-avro";
        final String outputTopic = "sum-avro";

        builder.stream(inputTopic, Consumed.with(keySerde, consumeValueSerde))
            .map((k, v) -&gt; new KeyValue&lt;&gt;("total-sum", new BigDecimal(v.getPrice().toString())))
            .groupByKey(Grouped.with(keySerde, bigDecimalSerde))
            .reduce(BigDecimal::add)
            .toStream()
            .map((k, v) -&gt; new KeyValue&lt;&gt;(k, new Sum(v.toPlainString())))
            .to(outputTopic, Produced.with(keySerde, produceValueSerde));

        return builder;
    }
}</pre></body></html>




File path: kumuluzee-metrics/src/main/java/com/kumuluz/ee/samples/kumuluzee_metrics/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_metrics;

public class Customer {

    private int id;
    private String firstName;
    private String lastName;

    public Customer() {
    }

    public Customer(int id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: servlet/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/resources/db/books-changelog.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.3.xsd"&gt;

    &lt;changeSet author="KumuluzEE" id="create_table_book" context="init"&gt;
        &lt;createTable tableName="book"&gt;
            &lt;column name="id" type="varchar(128)"/&gt;
            &lt;column name="title" type="varchar(64)"/&gt;
            &lt;column name="author" type="varchar(64)"/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;

    &lt;changeSet author="KumuluzEE" id="populate_table_book" context="populate"&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;2465c7c0-4e43-4dd9-8257-0542d4661b94&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE in action&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;452aa339-6481-49d4-9024-5796fa6ac633&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE database schema migrations&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;9c3bb6ce-3906-4a37-b807-229e6687346d&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE tips and tricks&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;f7c5deb1-1602-41a5-b75d-d23d80f547fc&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE best practices&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
    &lt;/changeSet&gt;

&lt;/databaseChangeLog&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/producers/JacksonProducer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.producers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Provider;
import java.text.SimpleDateFormat;
import java.util.TimeZone;

@Provider
public class JacksonProducer implements ContextResolver&lt;ObjectMapper&gt; {

    private final ObjectMapper mapper;

    public JacksonProducer() {

        mapper = new ObjectMapper();

        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        mapper.setDateFormat(dateFormat);
    }

    @Override
    public ObjectMapper getContext(Class&lt;?&gt; aClass) {
        return mapper;
    }
}
</pre></body></html>




File path: kumuluzee-opentracing/customers/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-opentracing&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;opentracing-customers&lt;/artifactId&gt;

    &lt;name&gt;opentracing-customers&lt;/name&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.opentracing&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-opentracing-jaeger&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-opentracing.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</pre></body></html>




File path: kumuluzee-grpc/grpc-client/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-config-consul/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev
  config:
    start-retry-delay-ms: 500
    max-retry-delay-ms: 900000

rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
  encoded-property: ZW5jb2RlZCBwcm9wZXJ0eQ==
</pre></body></html>




File path: microservices-simple/models/src/main/java/com/kumuluz/ee/samples/microservices/simple/models/Book.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.microservices.simple.models;

import javax.persistence.*;
import java.util.List;

/**
 * @author Tilen Faganel
 * @since 2.3.0
 */
@Entity
@Table(name = "books")
@NamedQuery(name = "Book.findAll", query = "SELECT b FROM Book b")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    private String title;

    private String description;

    private String author;

    @OneToMany(mappedBy="book")
    private List&lt;Order&gt; bookOrders;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public List&lt;Order&gt; getBookOrders() {
        return bookOrders;
    }

    public void setBookOrders(List&lt;Order&gt; bookOrders) {
        this.bookOrders = bookOrders;
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery with etcd

&gt; Samples for KumuluzEE Discovery extension

This module contains four samples that will introduce you to KumuluzEE Discovery extension using etcd:

- [`discovery-etcd-register`](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-register) JAX-RS microservice that registers itself to etcd
- [`discovery-etcd-discover-servlet`](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-discover-servlet) servlet microservice that discovers
and calls `discovery-register` microservice
- [`discovery-etcd-discover-jaxrs`](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs) JAX-RS microservice that discovers
and calls `discovery-register` microservice
- [`discovery-etcd-kubernetes`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-kubernetes) deploy `discovery-register` and `discovery-discover-jaxrs` samples to Kubernetes cluster 

More information about the samples can be found in the README of each sample.
</pre></body></html>




File path: kumuluzee-grpc/grpc-client/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: "grpc client test"
  server:
    http:
      port: 8082
  grpc:
    clients:
    - name: client1
      port: 8081
      address: localhost
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: kumuluzee-opentracing/orders/src/main/java/com/kumuluz/ee/samples/opentracing/orders/Order.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.orders;

import java.util.ArrayList;

/**
 * @author Domen Jeric
 */
public class Order {

    private String id;
    private int customerId;
    private ArrayList&lt;String&gt; items;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public int getCustomerId() {
        return customerId;
    }

    public void setCustomerId(int customerId) {
        this.customerId = customerId;
    }

    public ArrayList&lt;String&gt; getItems() {
        return items;
    }

    public void setItems(ArrayList&lt;String&gt; items) {
        this.items = items;
    }
}

</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/contracts/Owned.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * &lt;p&gt;Auto generated code.
 * &lt;p&gt;&lt;strong&gt;Do not modify!&lt;/strong&gt;
 * &lt;p&gt;Please use the &lt;a href="https://docs.web3j.io/command_line.html"&gt;web3j command line tools&lt;/a&gt;,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * &lt;a href="https://github.com/web3j/web3j/tree/master/codegen"&gt;codegen module&lt;/a&gt; to update.
 *
 * &lt;p&gt;Generated with web3j version 3.6.0.
 */
public class Owned extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556101fc806100326000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166379ba509781146100665780638da5cb5b1461007d578063d4ee1d90146100ae578063f2fde38b146100c3575b600080fd5b34801561007257600080fd5b5061007b6100e4565b005b34801561008957600080fd5b5061009261016c565b60408051600160a060020a039092168252519081900360200190f35b3480156100ba57600080fd5b5061009261017b565b3480156100cf57600080fd5b5061007b600160a060020a036004351661018a565b600154600160a060020a031633146100fb57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146101a157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820b15e2d6302ac6a527346e652d82f1d2267297f58d6bc3ff195781d879a37d9a40029";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_NEWOWNER = "newOwner";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;(true) {}, new TypeReference&lt;Address&gt;(true) {}));
    ;

    @Deprecated
    protected Owned(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Owned(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Owned(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Owned(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall&lt;TransactionReceipt&gt; acceptOwnership() {
        final Function function = new Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.&lt;Type&gt;asList(), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall&lt;String&gt; owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall&lt;String&gt; newOwner() {
        final Function function = new Function(FUNC_NEWOWNER, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall&lt;TransactionReceipt&gt; transferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall&lt;Owned&gt; deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Owned.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall&lt;Owned&gt; deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Owned.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall&lt;Owned&gt; deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Owned.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall&lt;Owned&gt; deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Owned.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List&lt;OwnershipTransferredEventResponse&gt; getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List&lt;Contract.EventValuesWithLog&gt; valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList&lt;OwnershipTransferredEventResponse&gt; responses = new ArrayList&lt;OwnershipTransferredEventResponse&gt;(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable&lt;OwnershipTransferredEventResponse&gt; ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1&lt;Log, OwnershipTransferredEventResponse&gt;() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable&lt;OwnershipTransferredEventResponse&gt; ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    @Deprecated
    public static Owned load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Owned(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Owned load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Owned(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Owned load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Owned(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Owned load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Owned(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String _from;

        public String _to;
    }
}
</pre></body></html>




File path: kumuluzee-fault-tolerance/order-api/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/order/OrderApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.order;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class OrderApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: jax-rs/src/main/java/com/kumuluz/ee/samples/jaxrs/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxrs;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;discovery-etcd-register&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE ETCD Register JAX-RS sample&lt;/name&gt;
    &lt;description&gt;Register JAX-RS service with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-security-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-openapi-mp/src/main/java/com/kumuluz/ee/samples/openapi/Membership.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.openapi;

public enum Membership {
    GOLD, SILVER
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/health/HealthManagementDemo.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.health;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HealthManagementDemo {

    private boolean healthy;

    @PostConstruct
    private void init() {
        healthy = true;
    }

    public boolean isHealthy() {
        return healthy;
    }

    public void setHealthy(boolean healthy) {
        this.healthy = healthy;
    }
}
</pre></body></html>




File path: bean-validation/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE bean validation sample

&gt; Use bean validation within a REST service and pack it as a KumuluzEE microservice.

The objective of this sample is to demonstrate how to use bean validation. The tutorial shows you how to add bean validation annotations to existing classes. You will add KumuluzEE dependencies into pom.xml. Required knowledge: basic familiarity with bean validation.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd bean-validation
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource page - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to create a simple REST microservice which uses bean validation and pack it as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) add bean validation annotations to existing classes. 
Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Add Maven dependencies
* Add bean validation annotations
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in `pom.xml`.

Add the `kumuluz-el-uel` and `kumuluzee-bean-validation-hibernate-validator` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-el-uel&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-bean-validation-hibernate-validator&lt;/artifactId&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Add bean validation annotations

Add bean validation annotations, such as `@NotNull`, `@Size`, `@Min` ... to the `Customer` class.
 Also add additional fields with different data types, and try some other annotations as well.
Sample implementation:

```java
public class Customer {

    @NotNull
    private String id;
    @NotNull
    @Size(min = 1, max = 25)
    private String firstName;
    @NotNull
    @Size(min = 1, max = 50)
    private String lastName;
    @NotNull
    @Min(18)
    @Max(99)
    private int age;
    @NotNull
    @Past
    private Date birthday;
    @NotNull
    @AssertTrue
    private boolean active;
    
    ...
    
    // get and set methods
}
```

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {
  
    @POST
    public Response addNewCustomer(@Valid Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }
    
    ...
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/contracts/SampleToken.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * &lt;p&gt;Auto generated code.
 * &lt;p&gt;&lt;strong&gt;Do not modify!&lt;/strong&gt;
 * &lt;p&gt;Please use the &lt;a href="https://docs.web3j.io/command_line.html"&gt;web3j command line tools&lt;/a&gt;,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * &lt;a href="https://github.com/web3j/web3j/tree/master/codegen"&gt;codegen module&lt;/a&gt; to update.
 *
 * &lt;p&gt;Generated with web3j version 3.6.0.
 */
public class SampleToken extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556040805180820190915260068082527f53414d504c45000000000000000000000000000000000000000000000000000060209092019182526100679160029161012a565b5060408051808201909152600c8082527f53414d504c4520546f6b656e000000000000000000000000000000000000000060209092019182526100ac9160039161012a565b5060048054601260ff19909116179081905560ff16600a0a620f424002600581905560008054600160a060020a0390811682526006602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101c5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016b57805160ff1916838001178555610198565b82800160010185558215610198579182015b8281111561019857825182559160200191906001019061017d565b506101a49291506101a8565b5090565b6101c291905b808211156101a457600081556001016101ae565b90565b610a9c806101d46000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c8578063313ce567146101f257806370a082311461021d57806379ba50971461023e5780638da5cb5b1461025557806395d89b4114610286578063a9059cbb1461029b578063cae9ca51146102bf578063d4ee1d9014610328578063dc39d06d1461033d578063dd62ed3e14610361578063f2fde38b14610388575b600080fd5b3480156100eb57600080fd5b506100f46103a9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a0360043516602435610437565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b661049e565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a03600435811690602435166044356104e1565b3480156101fe57600080fd5b506102076105ec565b6040805160ff9092168252519081900360200190f35b34801561022957600080fd5b506101b6600160a060020a03600435166105f5565b34801561024a57600080fd5b50610253610610565b005b34801561026157600080fd5b5061026a610698565b60408051600160a060020a039092168252519081900360200190f35b34801561029257600080fd5b506100f46106a7565b3480156102a757600080fd5b5061018d600160a060020a03600435166024356106ff565b3480156102cb57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261018d948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107af9650505050505050565b34801561033457600080fd5b5061026a610910565b34801561034957600080fd5b5061018d600160a060020a036004351660243561091f565b34801561036d57600080fd5b506101b6600160a060020a03600435811690602435166109da565b34801561039457600080fd5b50610253600160a060020a0360043516610a05565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561042f5780601f106104045761010080835404028352916020019161042f565b820191906000526020600020905b81548152906001019060200180831161041257829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600080805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546005546104dc9163ffffffff610a4b16565b905090565b600160a060020a03831660009081526006602052604081205461050a908363ffffffff610a4b16565b600160a060020a0385166000908152600660209081526040808320939093556007815282822033835290522054610547908363ffffffff610a4b16565b600160a060020a03808616600090815260076020908152604080832033845282528083209490945591861681526006909152205461058b908363ffffffff610a6016565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60045460ff1681565b600160a060020a031660009081526006602052604090205490565b600154600160a060020a0316331461062757600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561042f5780601f106104045761010080835404028352916020019161042f565b3360009081526006602052604081205461071f908363ffffffff610a4b16565b3360009081526006602052604080822092909255600160a060020a03851681522054610751908363ffffffff610a6016565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000818152600760209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b8381101561089f578181015183820152602001610887565b50505050905090810190601f1680156108cc5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156108ee57600080fd5b505af1158015610902573d6000803e3d6000fd5b506001979650505050505050565b600154600160a060020a031681565b60008054600160a060020a0316331461093757600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b1580156109a757600080fd5b505af11580156109bb573d6000803e3d6000fd5b505050506040513d60208110156109d157600080fd5b50519392505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600054600160a060020a03163314610a1c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610a5a57600080fd5b50900390565b8181018281101561049857600080fd00a165627a7a723058204250af21ad6672070bd100e47328a66fae1c398f297333765178a518924b18600029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_APPROVEANDCALL = "approveAndCall";

    public static final String FUNC_NEWOWNER = "newOwner";

    public static final String FUNC_TRANSFERANYERC20TOKEN = "transferAnyERC20Token";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;(true) {}, new TypeReference&lt;Address&gt;(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;(true) {}, new TypeReference&lt;Address&gt;(true) {}, new TypeReference&lt;Uint256&gt;() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;(true) {}, new TypeReference&lt;Address&gt;(true) {}, new TypeReference&lt;Uint256&gt;() {}));
    ;

    @Deprecated
    protected SampleToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SampleToken(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SampleToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SampleToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall&lt;String&gt; name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Utf8String&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall&lt;TransactionReceipt&gt; approve(String spender, BigInteger tokens) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall&lt;BigInteger&gt; totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Uint256&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall&lt;TransactionReceipt&gt; transferFrom(String from, String to, BigInteger tokens) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall&lt;BigInteger&gt; decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Uint8&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall&lt;BigInteger&gt; balanceOf(String tokenOwner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(tokenOwner)), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Uint256&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall&lt;TransactionReceipt&gt; acceptOwnership() {
        final Function function = new Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.&lt;Type&gt;asList(), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall&lt;String&gt; owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall&lt;String&gt; symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Utf8String&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall&lt;TransactionReceipt&gt; transfer(String to, BigInteger tokens) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall&lt;TransactionReceipt&gt; approveAndCall(String spender, BigInteger tokens, byte[] data) {
        final Function function = new Function(
                FUNC_APPROVEANDCALL, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall&lt;String&gt; newOwner() {
        final Function function = new Function(FUNC_NEWOWNER, 
                Arrays.&lt;Type&gt;asList(), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Address&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall&lt;TransactionReceipt&gt; transferAnyERC20Token(String tokenAddress, BigInteger tokens) {
        final Function function = new Function(
                FUNC_TRANSFERANYERC20TOKEN, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(tokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall&lt;BigInteger&gt; allowance(String tokenOwner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(tokenOwner), 
                new org.web3j.abi.datatypes.Address(spender)), 
                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(new TypeReference&lt;Uint256&gt;() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall&lt;TransactionReceipt&gt; transferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.&lt;Type&gt;asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall&lt;SampleToken&gt; deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SampleToken.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall&lt;SampleToken&gt; deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SampleToken.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall&lt;SampleToken&gt; deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SampleToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall&lt;SampleToken&gt; deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SampleToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List&lt;OwnershipTransferredEventResponse&gt; getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List&lt;Contract.EventValuesWithLog&gt; valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList&lt;OwnershipTransferredEventResponse&gt; responses = new ArrayList&lt;OwnershipTransferredEventResponse&gt;(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable&lt;OwnershipTransferredEventResponse&gt; ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1&lt;Log, OwnershipTransferredEventResponse&gt;() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable&lt;OwnershipTransferredEventResponse&gt; ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public List&lt;TransferEventResponse&gt; getTransferEvents(TransactionReceipt transactionReceipt) {
        List&lt;Contract.EventValuesWithLog&gt; valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList&lt;TransferEventResponse&gt; responses = new ArrayList&lt;TransferEventResponse&gt;(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable&lt;TransferEventResponse&gt; transferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1&lt;Log, TransferEventResponse&gt;() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable&lt;TransferEventResponse&gt; transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List&lt;ApprovalEventResponse&gt; getApprovalEvents(TransactionReceipt transactionReceipt) {
        List&lt;Contract.EventValuesWithLog&gt; valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList&lt;ApprovalEventResponse&gt; responses = new ArrayList&lt;ApprovalEventResponse&gt;(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable&lt;ApprovalEventResponse&gt; approvalEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1&lt;Log, ApprovalEventResponse&gt;() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable&lt;ApprovalEventResponse&gt; approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    @Deprecated
    public static SampleToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SampleToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SampleToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SampleToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SampleToken load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SampleToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SampleToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SampleToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String _from;

        public String _to;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokens;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String tokenOwner;

        public String spender;

        public BigInteger tokens;
    }
}
</pre></body></html>




File path: kumuluzee-opentracing/orders/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: Orders Microservice
  server:
    http:
      port: 3001
  opentracing:
    jaeger:
      agent-host: localhost
      agent-port: 5775
    zipkin:
      agent-host: http://localhost
      agent-port: 9411

mp:
  opentracing:
    server:
      operation-name-provider: class-method
      skip-pattern: /openapi.*|/health.*</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/main/java/com/kumuluz/ee/samples/kafka/registry/consumer/ConsumerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.registry.consumer;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author cen1
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/consume")
@RequestScoped
public class ConsumerResource {

    @Inject
    TestConsumer consumer;

    @GET
    public Response getLastFiveMessages(){

        return Response.status(200).entity(consumer.getLastFiveMessages()).build();
    }

}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/ProxiedResponse.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

/**
 * @author Urban Malc
 */
public class ProxiedResponse {

    private String response;
    private String proxiedFrom;

    public String getResponse() {
        return response;
    }

    public void setResponse(String response) {
        this.response = response;
    }

    public String getProxiedFrom() {
        return proxiedFrom;
    }

    public void setProxiedFrom(String proxiedFrom) {
        this.proxiedFrom = proxiedFrom;
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-metro/src/main/java/com/kumuluz/ee/samples/jaxws/metro/GetCustomersResponse.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxws.metro;

import javax.xml.bind.annotation.*;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "",
        propOrder = {
            "output"
        }
)
@XmlRootElement(name = "GetCustomersResponse")
public class GetCustomersResponse implements Serializable {

    @XmlElement(required = true)
    private GetCustomersResponseMessage output;

    public GetCustomersResponseMessage getOutput() {
        return output;
    }

    public void setOutput(GetCustomersResponseMessage output) {
        this.output = output;
    }
}
</pre></body></html>




File path: kumuluzee-config-consul/src/main/java/com/kumuluz/ee/samples/kumuluz_config_consul/CustomConfigurationDecoder.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_consul;

import com.kumuluz.ee.configuration.ConfigurationDecoder;

import javax.xml.bind.DatatypeConverter;

/**
 * @author Jan Meznarič
 * @since 3.2.1
 */
public class CustomConfigurationDecoder implements ConfigurationDecoder {

    @Override
    public boolean shouldDecode(String key) {
        if ("rest-config.encoded-property".equals(key)) {
            return true;
        }
        return false;
    }

    @Override
    public String decode(String key, String value) {
        return new String(DatatypeConverter.parseBase64Binary(value));
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: microservices-simple/orders/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  datasources:
    - jndi-name: jdbc/BooksDS
      connection-url: jdbc:postgresql://localhost:5432/postgres
      username: postgres
      password: postgres
      pool:
        max-size: 20</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/com/kumuluz/ee/samples/ethereum/EventsEndpoint.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.ethereum;

import com.kumuluz.ee.ethereum.annotations.EventListen;
import com.kumuluz.ee.ethereum.annotations.Web3jUtil;
import com.kumuluz.ee.ethereum.utils.Web3jUtils;
import com.kumuluz.ee.samples.ethereum.entities.Customer;
import com.kumuluz.ee.samples.ethereum.services.CustomerService;
import contracts.SampleToken;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.tx.Transfer;
import org.web3j.tx.gas.ContractGasProvider;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.utils.Convert;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import java.util.logging.Logger;

/**
 * @author Domen Gašperlin
 * @since 1.0.0
 */
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Path("execute")
@ApplicationScoped
public class EventsEndpoint {

    private Credentials credentials = Web3jUtils.getCredentials();

    private final String deployedContractAddress = "0x7f45B345fB76D47770af9C4eF36514eD7f713a33"; // Smart contract address of SampleToken

    private Logger log = Logger.getLogger(EventsEndpoint.class.getName());

    @Inject
    CustomerService customerService; // CDI Bean to access data from database

    @Inject
    @Web3jUtil
    private Web3j web3j;


    @GET
    @Path("client/version")
    public String getClientVerstion() {
        try {
            Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
            String clientVersion = web3ClientVersion.getWeb3ClientVersion();
            return clientVersion;
        } catch (Exception e) {
            String error = e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @GET
    @Path("contract/balance/{id}")
    public String getBalance(@PathParam("id") String accountAddress) {
        try {
            BigInteger wei = web3j.ethGetBalance(accountAddress, DefaultBlockParameterName.LATEST).sendAsync().get().getBalance();
            return "You have " + wei + " wei.";
        } catch (Exception e) {
            String error = e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @GET
    @Path("contract/send/ether/{address}")
    public String sendEther(@PathParam("address") String receivingAddress) {
        try {
            TransactionReceipt transactionReceipt = Transfer.sendFunds(web3j, credentials, receivingAddress, BigDecimal.valueOf(0.01), Convert.Unit.ETHER).send();
            return "Transaction is at: " + transactionReceipt.getTransactionHash();
        } catch (Exception e) {
            String error = e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @GET
    @Path("contract/deploy")
    public String deployContract() {
        try {
            ContractGasProvider contractGasProvider = new DefaultGasProvider();
            SampleToken sampleToken = SampleToken.deploy(web3j, credentials, contractGasProvider).send();
            String contractAddress = sampleToken.getContractAddress();
            return "Contract is deployed at address: " + contractAddress;
        } catch (Exception e) {
            String error = "Deploynment failure " + e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @EventListen(eventName = "transfer", smartContractName = SampleToken.class, smartContractAddress = deployedContractAddress)
    public void reactToEvent(SampleToken.TransferEventResponse transferEventResponse) {
        if (transferEventResponse.tokens.compareTo(BigInteger.valueOf(20)) == 1) {
            log.info("Granting service access to user " + transferEventResponse.from + ". " +
                    transferEventResponse.tokens + " tokens received.");
        } else {
            log.info("Access denied. User " + transferEventResponse.from + " has send only " + transferEventResponse.tokens + " tokens.");
        }
    }

    @GET
    @Path("contract/get/owner")
    public String callContract() {
        ContractGasProvider contractGasProvider = new DefaultGasProvider();
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, contractGasProvider);
        try {
            String address = sampleToken.owner().send();
            String owner = String.format("Owner is address %s\n", address);
            return owner;
        } catch (Exception e) {
            String error = "Error calling method " + e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @GET
    @Path("contract/send/token/{to}/amount/{amount}")
    public String sendToken(@PathParam("to") String transaction, @PathParam("amount") String amount) {
        ContractGasProvider contractGasProvider = new DefaultGasProvider();
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, contractGasProvider);
        try {
            String logs = "Transaction is at: " + sampleToken.transfer(transaction, BigInteger.valueOf(Integer.valueOf(amount))).send().getTransactionHash();
            return logs;
        } catch (Exception e) {
            String error = "Error calling method " + e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @GET
    @Path("contract/send/tokens/customers")
    public String sendTokenToCustomers() {
        ContractGasProvider contractGasProvider = new DefaultGasProvider();
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, contractGasProvider);
        try {
            List&lt;Customer&gt; customerList = customerService.getCustomers();
            String logs = "";
            for (Customer customer : customerList) {
                BigInteger amount = BigInteger.valueOf(100);
                logs += amount + " of SampleToken transfered in transation: " + sampleToken.transfer(customer.getWalletAddress(), amount).send().getTransactionHash() + "\n";
            }
            return logs;
        } catch (Exception e) {
            String error = "Error calling method " + e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @GET
    @Path("contract/call/method/{name}")
    public String callContractMethod(@PathParam("name") String methodName) {
        ContractGasProvider contractGasProvider = new DefaultGasProvider();
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, contractGasProvider);
        try {
            String logs = runMethod(sampleToken, methodName).send().toString();
            return logs;
        } catch (Exception e) {
            String error = "Error calling method " + e.getMessage();
            log.severe(error);
            return error;
        }
    }

    @GET
    @Path("contract/call/method/{name}/argument/{argument}")
    public String callContractMethod(@PathParam("name") String methodName, @PathParam("argument") String argo) {
        ContractGasProvider contractGasProvider = new DefaultGasProvider();
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, contractGasProvider);
        try {
            String logs = runMethod(sampleToken, methodName, argo, argo.getClass()).send().toString();
            return methodName + "(" + argo + ") is: " + logs;
        } catch (Exception e) {
            String error = "Error calling method " + e.getMessage();
            log.severe(error);
            return error;
        }
    }

    private static RemoteCall runMethod(Object instance, String methodName) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = instance.getClass().getMethod(methodName);
        return (RemoteCall) method.invoke(instance);
    }

    private static RemoteCall runMethod(Object instance, String methodName, String argo, Class&lt;?&gt; parameterType) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = instance.getClass().getMethod(methodName, parameterType);
        return (RemoteCall) method.invoke(instance, argo);
    }
}

</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-business-logic/src/main/java/com/kumuluz/ee/samples/tutorial/customers/cdi/CustomersBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.cdi;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kumuluz.ee.discovery.annotations.DiscoverService;
import com.kumuluz.ee.fault.tolerance.annotations.*;
import com.kumuluz.ee.logs.LogManager;
import com.kumuluz.ee.logs.Logger;
import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;
import com.kumuluz.ee.samples.tutorial.customers.Customer;
import com.kumuluz.ee.samples.tutorial.customers.cdi.configuration.RestProperties;
import com.kumuluz.ee.samples.tutorial.orders.Order;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.impl.nio.client.HttpAsyncClients;
import org.apache.http.util.EntityUtils;
import org.eclipse.microprofile.faulttolerance.CircuitBreaker;
import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Timeout;

import javax.annotation.PostConstruct;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.ws.rs.InternalServerErrorException;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.Future;


@RequestScoped
@GroupKey("orders")
public class CustomersBean {

    private Logger log = LogManager.getLogger(CustomersBean.class.getName());

    @PersistenceContext(unitName = "customers-jpa")
    private EntityManager em;

    private ObjectMapper objectMapper;

    private HttpClient httpClient;

    @Inject
    @DiscoverService(value = "order-service", environment = "dev", version = "*")
    private Optional&lt;String&gt; basePath;

    @Inject
    private RestProperties restProperties;

    @Inject
    private CustomersBean customersBean;

    @PostConstruct
    private void init() {
        httpClient = HttpClientBuilder.create().build();
        objectMapper = new ObjectMapper();
    }

    public List&lt;Customer&gt; getCustomers() {

        Query query = em.createNamedQuery("Customer.getAll", Customer.class);

        return query.getResultList();

    }

    public List&lt;Customer&gt; getCustomersFilter(UriInfo uriInfo) {

        QueryParameters queryParameters = QueryParameters.query(uriInfo.getRequestUri().getQuery()).defaultOffset(0)
                .build();

        List&lt;Customer&gt; customers = JPAUtils.queryEntities(em, Customer.class, queryParameters);

        return customers;
    }

    public Customer getCustomer(String customerId) {

        Customer customer = em.find(Customer.class, customerId);

        if (customer == null) {
            throw new NotFoundException();
        }

        if (restProperties.isOrderServiceEnabled()) {
            List&lt;Order&gt; orders = customersBean.getOrders(customerId);
            customer.setOrders(orders);
        }

        return customer;
    }

    public Customer createCustomer(Customer customer) {

        try {
            beginTx();
            em.persist(customer);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return customer;
    }

    public Customer putCustomer(String customerId, Customer customer) {

        Customer c = em.find(Customer.class, customerId);

        if (c == null) {
            return null;
        }

        try {
            beginTx();
            customer.setId(c.getId());
            customer = em.merge(customer);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return customer;
    }

    public boolean deleteCustomer(String customerId) {

        Customer customer = em.find(Customer.class, customerId);

        if (customer != null) {
            try {
                beginTx();
                em.remove(customer);
                commitTx();
            } catch (Exception e) {
                rollbackTx();
            }
        } else
            return false;

        return true;
    }

    @CircuitBreaker(failureRatio = 0.3)
    @Fallback(fallbackMethod = "getOrdersFallback")
    @CommandKey("http-get-order")
    @Timeout(value = 500)
    public List&lt;Order&gt; getOrders(String customerId) {

        if (basePath.isPresent()) {

            try {
                HttpGet request = new HttpGet(basePath.get() + "/v1/orders?where=customerId:EQ:" + customerId);
                HttpResponse response = httpClient.execute(request);

                int status = response.getStatusLine().getStatusCode();

                if (status &gt;= 200 &amp;&amp; status &lt; 300) {
                    HttpEntity entity = response.getEntity();

                    if (entity != null)
                        return getObjects(EntityUtils.toString(entity));
                } else {
                    String msg = "Remote server '" + basePath.get() + "' is responded with status " + status + ".";
                    log.error(msg);
                    throw new InternalServerErrorException(msg);
                }

            } catch (IOException e) {
                String msg = e.getClass().getName() + " occured: " + e.getMessage();
                log.error(msg);
                throw new InternalServerErrorException(msg);
            }
        }

        return new ArrayList&lt;&gt;();

    }

    public List&lt;Order&gt; getOrdersFallback(String customerId) {
        return new ArrayList&lt;&gt;();
    }

    private List&lt;Order&gt; getObjects(String json) throws IOException {
        return json == null ? new ArrayList&lt;&gt;() : objectMapper.readValue(json,
                objectMapper.getTypeFactory().constructCollectionType(List.class, Order.class));
    }

    private void beginTx() {
        if (!em.getTransaction().isActive())
            em.getTransaction().begin();
    }

    private void commitTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().commit();
    }

    private void rollbackTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().rollback();
    }

    public void loadOrder(Integer n) {
        if (basePath.isPresent()) {

            HttpPost request = new HttpPost(basePath.get() + "/v1/load");
            try {
                request.setHeader("Content-Type", MediaType.APPLICATION_JSON);
                request.setEntity(new StringEntity(n.toString()));
            } catch (UnsupportedEncodingException e) {
                log.error(e.getMessage());
            }

            CloseableHttpAsyncClient asyncHttpClient = HttpAsyncClients.createDefault();
            asyncHttpClient.start();

            log.info("Invoking Order Load endpoint.");
            Future&lt;HttpResponse&gt; response = asyncHttpClient.execute(request, null);
            log.info("Order Load endpoint invoked.");
        }

    }
}
</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/generated/java/com/kumuluz/ee/samples/kafka/registry/avro/lib/Pricing.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kumuluz.ee.samples.kafka.registry.avro.lib;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Pricing extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8159164123532769464L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pricing\",\"namespace\":\"com.kumuluz.ee.samples.kafka.registry.avro.lib\",\"fields\":[{\"name\":\"price\",\"type\":\"string\"},{\"name\":\"priceExTax\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"string\"},{\"name\":\"taxAmount\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder&lt;Pricing&gt; ENCODER =
      new BinaryMessageEncoder&lt;Pricing&gt;(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder&lt;Pricing&gt; DECODER =
      new BinaryMessageDecoder&lt;Pricing&gt;(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder&lt;Pricing&gt; getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder&lt;Pricing&gt; getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder&lt;Pricing&gt; createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder&lt;Pricing&gt;(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Pricing to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Pricing from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Pricing instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Pricing fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence price;
  @Deprecated public java.lang.CharSequence priceExTax;
  @Deprecated public java.lang.CharSequence basePrice;
  @Deprecated public java.lang.CharSequence taxAmount;
  @Deprecated public java.lang.CharSequence description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use &lt;code&gt;newBuilder()&lt;/code&gt;.
   */
  public Pricing() {}

  /**
   * All-args constructor.
   * @param price The new value for price
   * @param priceExTax The new value for priceExTax
   * @param basePrice The new value for basePrice
   * @param taxAmount The new value for taxAmount
   * @param description The new value for description
   */
  public Pricing(java.lang.CharSequence price, java.lang.CharSequence priceExTax, java.lang.CharSequence basePrice, java.lang.CharSequence taxAmount, java.lang.CharSequence description) {
    this.price = price;
    this.priceExTax = priceExTax;
    this.basePrice = basePrice;
    this.taxAmount = taxAmount;
    this.description = description;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return price;
    case 1: return priceExTax;
    case 2: return basePrice;
    case 3: return taxAmount;
    case 4: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: price = (java.lang.CharSequence)value$; break;
    case 1: priceExTax = (java.lang.CharSequence)value$; break;
    case 2: basePrice = (java.lang.CharSequence)value$; break;
    case 3: taxAmount = (java.lang.CharSequence)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.CharSequence getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.CharSequence value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'priceExTax' field.
   * @return The value of the 'priceExTax' field.
   */
  public java.lang.CharSequence getPriceExTax() {
    return priceExTax;
  }


  /**
   * Sets the value of the 'priceExTax' field.
   * @param value the value to set.
   */
  public void setPriceExTax(java.lang.CharSequence value) {
    this.priceExTax = value;
  }

  /**
   * Gets the value of the 'basePrice' field.
   * @return The value of the 'basePrice' field.
   */
  public java.lang.CharSequence getBasePrice() {
    return basePrice;
  }


  /**
   * Sets the value of the 'basePrice' field.
   * @param value the value to set.
   */
  public void setBasePrice(java.lang.CharSequence value) {
    this.basePrice = value;
  }

  /**
   * Gets the value of the 'taxAmount' field.
   * @return The value of the 'taxAmount' field.
   */
  public java.lang.CharSequence getTaxAmount() {
    return taxAmount;
  }


  /**
   * Sets the value of the 'taxAmount' field.
   * @param value the value to set.
   */
  public void setTaxAmount(java.lang.CharSequence value) {
    this.taxAmount = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Creates a new Pricing RecordBuilder.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder() {
    return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
  }

  /**
   * Creates a new Pricing RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder(other);
    }
  }

  /**
   * Creates a new Pricing RecordBuilder by copying an existing Pricing instance.
   * @param other The existing instance to copy.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder(other);
    }
  }

  /**
   * RecordBuilder for Pricing instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase&lt;Pricing&gt;
    implements org.apache.avro.data.RecordBuilder&lt;Pricing&gt; {

    private java.lang.CharSequence price;
    private java.lang.CharSequence priceExTax;
    private java.lang.CharSequence basePrice;
    private java.lang.CharSequence taxAmount;
    private java.lang.CharSequence description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.priceExTax)) {
        this.priceExTax = data().deepCopy(fields()[1].schema(), other.priceExTax);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[2].schema(), other.basePrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.taxAmount)) {
        this.taxAmount = data().deepCopy(fields()[3].schema(), other.taxAmount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Pricing instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priceExTax)) {
        this.priceExTax = data().deepCopy(fields()[1].schema(), other.priceExTax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[2].schema(), other.basePrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.taxAmount)) {
        this.taxAmount = data().deepCopy(fields()[3].schema(), other.taxAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setPrice(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearPrice() {
      price = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'priceExTax' field.
      * @return The value.
      */
    public java.lang.CharSequence getPriceExTax() {
      return priceExTax;
    }


    /**
      * Sets the value of the 'priceExTax' field.
      * @param value The value of 'priceExTax'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setPriceExTax(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.priceExTax = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'priceExTax' field has been set.
      * @return True if the 'priceExTax' field has been set, false otherwise.
      */
    public boolean hasPriceExTax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'priceExTax' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearPriceExTax() {
      priceExTax = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'basePrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getBasePrice() {
      return basePrice;
    }


    /**
      * Sets the value of the 'basePrice' field.
      * @param value The value of 'basePrice'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setBasePrice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.basePrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'basePrice' field has been set.
      * @return True if the 'basePrice' field has been set, false otherwise.
      */
    public boolean hasBasePrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'basePrice' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearBasePrice() {
      basePrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxAmount() {
      return taxAmount;
    }


    /**
      * Sets the value of the 'taxAmount' field.
      * @param value The value of 'taxAmount'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setTaxAmount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.taxAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'taxAmount' field has been set.
      * @return True if the 'taxAmount' field has been set, false otherwise.
      */
    public boolean hasTaxAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'taxAmount' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearTaxAmount() {
      taxAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pricing build() {
      try {
        Pricing record = new Pricing();
        record.price = fieldSetFlags()[0] ? this.price : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.priceExTax = fieldSetFlags()[1] ? this.priceExTax : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.basePrice = fieldSetFlags()[2] ? this.basePrice : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.taxAmount = fieldSetFlags()[3] ? this.taxAmount : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter&lt;Pricing&gt;
    WRITER$ = (org.apache.avro.io.DatumWriter&lt;Pricing&gt;)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader&lt;Pricing&gt;
    READER$ = (org.apache.avro.io.DatumReader&lt;Pricing&gt;)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.price);

    out.writeString(this.priceExTax);

    out.writeString(this.basePrice);

    out.writeString(this.taxAmount);

    out.writeString(this.description);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);

      this.priceExTax = in.readString(this.priceExTax instanceof Utf8 ? (Utf8)this.priceExTax : null);

      this.basePrice = in.readString(this.basePrice instanceof Utf8 ? (Utf8)this.basePrice : null);

      this.taxAmount = in.readString(this.taxAmount instanceof Utf8 ? (Utf8)this.taxAmount : null);

      this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);

    } else {
      for (int i = 0; i &lt; 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);
          break;

        case 1:
          this.priceExTax = in.readString(this.priceExTax instanceof Utf8 ? (Utf8)this.priceExTax : null);
          break;

        case 2:
          this.basePrice = in.readString(this.basePrice instanceof Utf8 ? (Utf8)this.basePrice : null);
          break;

        case 3:
          this.taxAmount = in.readString(this.taxAmount instanceof Utf8 ? (Utf8)this.taxAmount : null);
          break;

        case 4:
          this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










</pre></body></html>




File path: kumuluzee-fault-tolerance/customer-api/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-fault-tolerance&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-fault-tolerance-customer-api&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Fault Tolerance sample customers service&lt;/name&gt;
    &lt;description&gt;KumuluzEE Fault Tolerance customers service implementation&lt;/description&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-fault-tolerance-common&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-fault-tolerance-smallrye&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-health/src/main/java/com/kumuluz/ee/samples/health/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.health;

import javax.persistence.*;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Entity
@Table(name = "customer")
@NamedQueries({
        @NamedQuery(
                name = "Customer.findCustomers",
                query = "SELECT c " +
                        "FROM Customer c"
        )
})
public class Customer implements Serializable {

    @Id
    private String id;
    @Column(name = "first_name")
    private String firstName;
    @Column(name = "last_name")
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: microservices-simple/orders/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-rest/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-security-keycloak/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
  security:
    keycloak:
      json: '{
               "realm": "customers-realm",
               "bearer-only": true,
               "auth-server-url": "http://localhost:8082/auth",
               "ssl-required": "external",
               "resource": "customers-api",
               "confidential-port": 0
             }'</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-kubernetes/discover-deployment.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: discover-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: discover
    spec:
      containers:
      - image: discover-sample:v1
        name: discover
        env:
          - name: KUMULUZEE_DISCOVERY_CLUSTER
            value: minikube
          - name: KUMULUZEE_DISCOVERY_ETCD_HOSTS
            value: http://etcd:2379
        ports:
        - containerPort: 8080
          name: server
          protocol: TCP
</pre></body></html>




File path: kumuluzee-rest-client/src/main/java/com/kumuluz/ee/samples/kumuluzee_rest_client/api/CustomerApi.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_rest_client.api;

import com.kumuluz.ee.rest.client.mp.integrations.KeeRestParameters;
import com.kumuluz.ee.samples.kumuluzee_rest_client.entities.Customer;
import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.enterprise.context.Dependent;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.util.List;
import java.util.concurrent.CompletionStage;

/**
 * @author Urban Malc
 * @since 3.1.0
 */
@Path("/customers")
@RegisterRestClient
@RegisterProvider(SensitiveDataResponseMapper.class)
@RegisterClientHeaders
@Dependent
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public interface CustomerApi {

    @GET
    List&lt;Customer&gt; getAllCustomers(@BeanParam KeeRestParameters restParameters);

    @GET
    @Path("{customerId}")
    Customer getCustomer(@PathParam("customerId") String id);

    @POST
    void createCustomer(Customer customer);

    @POST
    CompletionStage&lt;Void&gt; createCustomerAsynch(Customer customer);

    @DELETE
    @Path("{customerId}")
    void deleteCustomer(@PathParam("customerId") String id);
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Reactive &amp;mdash; listen to Vert.x event bus

&gt; Develop a REST microservice that listens to a given address on Vert.x event bus

The objective of this sample is to show how to listen to Vert.x event bus using KumuluzEE Reactive extension. The tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into `pom.xml`. You will develop a simple annotated method, which uses KumuluzEE Reactive extension to listen for messages on Vert.x event bus. Required knowledge: basic familiarity with Vert.x.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener
    $ mvn clean package
    ```

2. Run the sample:

    * Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
     
3. Message will be printed out in the terminal when the microservice receives it.

4. Latest five messages can be accessed on the following URL:
    * JAX-RS REST resource - http://localhost:8080/v1/vertx/messages with a GET request

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a Vert.x event bus listener with the help of the KumuluzEE Reactive Vert.x extension.
We will develop a simple annotated method which will be invoked when the message is received.

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS, CDI)
* Add Maven dependency to KumuluzEE Reactive Vertx extension
* Implement the service and the onMessage method
* Add configuration for Vert.x
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey` and `kumuluzee-cdi-weld` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```
Alternatively, we could add the `kumuluzee-microProfile-1.0`, which adds the MicroProfile 1.0 dependencies (JAX-RS, CDI, JSON-P, and Servlet).

Add the `kumuluzee-reactive-vertx` dependency:
```xml
&lt;dependency&gt;
	&lt;groupId&gt;com.kumuluz.ee.reactive&lt;/groupId&gt;
	&lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
	&lt;version&gt;${kumuluzee-reactive-vertx.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service and the onMessage method

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class VertxApplication extends Application {
}
```

Implement a class e.g. VertxEventListener annotated with `@ApplicationScoped` that has a method. The method is annotated with `@ReactiveEventListener(address = "tacos")` and takes a parameter of type `Message&lt;Object&gt;` that contains data of the received message.

We will store the received messages in a `List`. Method `getFiveLastMessages()` returnes the latest five messages received.

In the example the address name is defiined within the annotation. You can also change the method name to match your preferences.

```java
@ApplicationScoped
public class VertxEventListener {

	private static final Logger log = Logger.getLogger(VertxEventListener.class.getName());

	private List&lt;String&gt; messages = new ArrayList&lt;&gt;();
	
	@ReactiveEventListener(address = "tacos")
	public void onMessage(Message&lt;Object&gt; event) {
		if(event.body() != null) {
			messages.add((String) event.body());
			log.info("New message received: " + event.body());
		} else {
			log.warning("Error when receiving messages.");
		}
	}
	
	public List&lt;String&gt; getFiveLastMessages() {
		if(messages.size() &lt;= 5) {
			return messages;
		}
		return messages.subList(messages.size() - 5, messages.size());
	}

}
```

When no address is supplied to the annotation, the default address `listener` is used.

Implement JAX-RS resource, with a GET method for displaying the last 5 received  messages. Inject the `VertxEventListener` and retrieve the messages:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("vertx")
@RequestScoped
public class VertxResource {

	@Inject
	VertxEventListener vertxEventListener;
	
	@GET
	@Path("messages")	
	public Response getMessages() {
		return Response.ok(vertxEventListener.getFiveLastMessages()).build();
	}
	
}
```


### Add configuration for Vert.x

You can configure Vert.x using any KumuluzEE configuration source.

For example, you can use `config.yml` file, placed in resources folder.
In this example we configured `config.yml` as shown below:

```yaml
kumuluzee:
  name: vertx-listener
  version: 1.0.0
  server:
    http:
      port: 8081
  reactive:
    vertx:
      clustered: true
      cluster-host: localhost
      cluster-port: 0 
```

Setting the `clustered` tag to `true` allows multiple Vert.x instances to form a single, distributed, event bus. `cluster-host` and `cluster-port` determine which address will be used for cluster communication with other Vert.x instances. Their default values are `localhost` and `0`, which means a random free port will be chosen.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

You can either run [`kumuluzee-reactive-vertx-publisher`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher) or [`verticle-publisher`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/simple-verticles/verticle-publisher) to test the functionalities of this microservice.</pre></body></html>




File path: kumuluzee-logs-log4j2/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

import com.kumuluz.ee.logs.cdi.Log;
import com.kumuluz.ee.logs.cdi.LogParams;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Log(LogParams.METRICS)
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    @Log(value = LogParams.METRICS, methodCall = false)
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/proto/user_service.proto
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">syntax = "proto3";
option java_package = "grpc";

service User {
    rpc getUser(UserRequest) returns (UserResponse) {};
}

message UserRequest {
    int32 id = 1;
}

message UserResponse {
    int32 id = 1;
    string name = 2;
    string surname = 3;
}</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/connections/LecturerConnection.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities.connections;

import com.kumuluz.ee.samples.graphql_advanced.entities.Lecturer;

import java.util.List;

public class LecturerConnection extends ConnectionBase&lt;Lecturer&gt; {

    public LecturerConnection(List&lt;Lecturer&gt; edges, long totalCount) {
        super(edges, totalCount);
    }
}
</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-openapi-mp/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
</pre></body></html>




File path: microservices-simple/catalogue/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/java/grpc/interceptors/HeaderInterceptor2.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package grpc.interceptors;

import io.grpc.*;

import java.util.logging.Logger;

public class HeaderInterceptor2 implements ServerInterceptor {

    private static final Logger logger = Logger.getLogger(HeaderInterceptor.class.getName());

    static final Metadata.Key&lt;String&gt; HEADER_KEY = Metadata.Key.of("server_header_key", Metadata.ASCII_STRING_MARSHALLER);

    @Override
    public &lt;ReqT, RespT&gt; ServerCall.Listener&lt;ReqT&gt; interceptCall(ServerCall&lt;ReqT, RespT&gt; serverCall, Metadata metadata,
                                                                 ServerCallHandler&lt;ReqT, RespT&gt; serverCallHandler) {

        logger.info("Header received from client " + serverCall.getAuthority() + ": interceptor 2");
        return serverCallHandler.startCall(new ForwardingServerCall.SimpleForwardingServerCall&lt;ReqT, RespT&gt;(serverCall) {
            @Override
            public void sendHeaders(Metadata headers) {
                headers.put(HEADER_KEY, "respondValue");
                super.sendHeaders(headers);
            }
        }, metadata);
    }

}
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/java/com/kumuluz/ee/samples/amqp/rabbitmq/messaging/MessageConsumer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.amqp.rabbitmq.messaging;

import com.kumuluz.ee.amqp.common.annotations.AMQPConsumer;
import com.kumuluz.ee.amqp.common.annotations.AMQPProducer;
import com.kumuluz.ee.amqp.rabbitmq.utils.consumer.MessageInfo;

import javax.enterprise.context.ApplicationScoped;
import java.util.logging.Logger;

/**
 * @author Blaž Mrak
 * @since 3.2.0
 */

@ApplicationScoped
public class MessageConsumer {

    private static Logger log = Logger.getLogger(MessageConsumer.class.getName());

    @AMQPConsumer(host = "MQtest", exchange = "directExchange", key = "red")
    public void listenToRed(String message) {
        log.info("Recieved message: " + message + " from direct exchange with the red key.");
    }

    @AMQPConsumer(host = "MQtest", exchange = "directExchange", key = "object")
    public void listenToObject(ExampleObject message) {
        log.info("Recieved message: \"" + message.getContent() + "\" of length " + message.getLength());
    }

    @AMQPConsumer(host = "MQtest", exchange = "directExchange", key = "message")
    @AMQPProducer(host = "MQtest", exchange = "directExchange", key = "red")
    public String listenToObjectMessage(ExampleObject message, MessageInfo messageInfo) {
        log.info("[" + messageInfo.getProperties().getTimestamp().toString() + "] Recieved message: " + message.getContent() + " of length " + message.getLength() + " with title: '" + messageInfo.getProperties().getHeaders().get("title") + "'");
        return "WOW! I can receive and send messages";
    }

    @AMQPConsumer(host = "MQtest2", key = "testQueue")
    public void listenToWorkQueue(ExampleObject message) {
        log.info(" Recieved message: " + message.getContent() + " of length " + message.getLength());
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/src/main/java/com/kumuluz/ee/samples/kafka/producer/ProducerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.producer;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Matija Kljun
 */
@ApplicationPath("v1")
public class ProducerApplication extends Application {
}</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-persistence/src/main/java/com/kumuluz/ee/samples/tutorial/customers/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers;

import com.kumuluz.ee.samples.tutorial.orders.Order;
import org.eclipse.persistence.annotations.UuidGenerator;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@Entity(name = "customer")
@NamedQueries(value =
        {
                @NamedQuery(name = "Customer.getAll", query = "SELECT c FROM customer c")
        })
@UuidGenerator(name = "idGenerator")
public class Customer {

    @Id
    @GeneratedValue(generator = "idGenerator")
    private String id;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    private String address;

    @Column(name = "date_of_birth")
    private Date dateOfBirth;

    @Transient
    private List&lt;Order&gt; orders;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Date getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public List&lt;Order&gt; getOrders() {
        return orders;
    }

    public void setOrders(List&lt;Order&gt; orders) {
        this.orders = orders;
    }
}</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/graphql/StudentResolvers.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.graphql;

import com.kumuluz.ee.graphql.mp.utils.GraphQLUtils;
import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.QueryStringDefaults;
import com.kumuluz.ee.rest.utils.StreamUtils;
import com.kumuluz.ee.samples.graphql_advanced.beans.StudentBean;
import com.kumuluz.ee.samples.graphql_advanced.beans.SubjectBean;
import com.kumuluz.ee.samples.graphql_advanced.dtos.Subject;
import com.kumuluz.ee.samples.graphql_advanced.entities.Student;
import com.kumuluz.ee.samples.graphql_advanced.entities.connections.StudentConnection;
import org.eclipse.microprofile.graphql.*;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.util.List;

@GraphQLApi
@ApplicationScoped
public class StudentResolvers {

    @Inject
    private StudentBean studentBean;

    @Inject
    private SubjectBean subjectBean;

    @Inject
    private QueryStringDefaults qsd;

    // additional data
    @Name("subjects")
    public List&lt;Subject&gt; getStudentSubjects(@Source Student student, String sort) {

        QueryParameters qp = GraphQLUtils.queryParametersBuilder()
                .withQueryStringDefaults(qsd)
                .withOrder(sort)
                .build();

        List&lt;Subject&gt; subjectList = subjectBean.getSubjects(student.getStudentNumber());
        return StreamUtils.queryEntities(subjectList, qp);
    }

    // queries
    @Query
    public StudentConnection getStudentsConnection(Long limit, Long offset, String sort, String filter) {

        QueryParameters qp = GraphQLUtils.queryParametersBuilder()
                .withQueryStringDefaults(qsd)
                .withLimit(limit)
                .withOffset(offset)
                .withOrder(sort)
                .withFilter(filter)
                .build();

        return studentBean.getStudentConnection(qp);
    }

    @Query
    public Student studentById(@NonNull Integer id) {

        return studentBean.getStudentById(id);
    }

    // mutations
    @Mutation
    public Student createStudent(@NonNull Student student) {

        return studentBean.createStudent(student);
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/src/main/java/com.kumuluz.ee.samples.discovery.register/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Urban Malc
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/producers/CacheProducer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.jcache.rest.producers;

import com.kumuluz.ee.samples.jcache.rest.lib.InvoiceData;
import com.kumuluz.ee.samples.jcache.rest.listeners.MyCacheListener;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.configuration.CacheEntryListenerConfiguration;
import javax.cache.configuration.FactoryBuilder;
import javax.cache.configuration.MutableCacheEntryListenerConfiguration;
import javax.cache.configuration.MutableConfiguration;
import javax.cache.expiry.CreatedExpiryPolicy;
import javax.cache.expiry.Duration;
import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import java.util.concurrent.TimeUnit;

/**
 * @author cen1
 * @since 3.6.0
 */
public class CacheProducer {

    @Inject
    private CacheManager cacheManager;

    @MyCache
    @Produces
    @ApplicationScoped
    public Cache&lt;String, InvoiceData&gt; getMyCache() {
        /**
         * My cache is not configured in config.yml, dynamic configuration
         * For explanation on different expiry policy factories, see javadoc on javax.cache.expiry
         */
        final CacheEntryListenerConfiguration&lt;String, InvoiceData&gt; listenersConfiguration
                = new MutableCacheEntryListenerConfiguration&lt;&gt;(FactoryBuilder.factoryOf(MyCacheListener.class),
                null, false, true);

        final MutableConfiguration&lt;String, InvoiceData&gt; config = new MutableConfiguration&lt;String, InvoiceData&gt;()
                .setTypes(String.class, InvoiceData.class)
                .addCacheEntryListenerConfiguration(listenersConfiguration)
                //.setExpiryPolicyFactory(AccessedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, 5)))
                //.setExpiryPolicyFactory(ModifiedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, 5)))
                //.setExpiryPolicyFactory(TouchedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, 5)))
                .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, 5)));
        return cacheManager.createCache("my", config);
    }

    @DefaultCache
    @Produces
    @ApplicationScoped
    public Cache&lt;String, InvoiceData&gt; getDefaultCache() {
        //Default cache is configured in config.yml
        return cacheManager.getCache("default");
    }
}</pre></body></html>




File path: microservices-simple/catalogue/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-jpa" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/CustomersDS&lt;/jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.graphql_simple.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;

    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/src/main/java/com/kumuluz/ee/samples/reactive/vertx/Message.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

/**
*
* @author Žan Ožbot
*/
public class Message {

	private String content;
	
	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

}
</pre></body></html>




File path: kumuluzee-config-etcd/src/main/resources/META-INF/services/com.kumuluz.ee.configuration.ConfigurationDecoder
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">com.kumuluz.ee.samples.kumuluz_config_etcd.CustomConfigurationDecoder</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/producers/DefaultCache.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.jcache.rest.producers;

import javax.inject.Qualifier;
import java.lang.annotation.Retention;

import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
 * @author cen1
 * @since 3.6.0
 */
@Qualifier
@Retention(RUNTIME)
public @interface DefaultCache {
}</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/src/main/java/com/kumuluz/ee/samples/kafka/consumer/ConsumerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.consumer;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author Matija Kljun
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/consume")
@RequestScoped
public class ConsumerResource {

    @Inject
    TestConsumer consumer;

    @GET
    public Response getLastFiveMessages(){

        return Response.status(200).entity(consumer.getLastFiveMessages()).build();
    }

}
</pre></body></html>




File path: kumuluzee-fault-tolerance/customer-api/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/customer/beans/OrdersBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.beans;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kumuluz.ee.configuration.utils.ConfigurationUtil;
import com.kumuluz.ee.samples.circuit_breaker_hystrix.models.Order;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.util.EntityUtils;
import org.eclipse.microprofile.faulttolerance.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.InternalServerErrorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
@RequestScoped
public class OrdersBean {

    private static final Logger log = LoggerFactory.getLogger(OrdersBean.class);

    private static String ordersApiPath;

    @Inject
    private HttpClient httpClient;

    private ObjectMapper objectMapper;

    static {
        ordersApiPath = ConfigurationUtil.getInstance().get("orders-api.path")
                .orElse("http://localhost:8081/v1/order");

        log.info("Orders API path set to " + ordersApiPath);
    }

    public OrdersBean() {
        objectMapper = new ObjectMapper();
    }

    @CircuitBreaker
    @Fallback(fallbackMethod = "findOrdersByCustomerIdFallback")
    @Timeout
    @Asynchronous
    @Bulkhead
    public Future&lt;List&lt;Order&gt;&gt; findOrdersByCustomerId(String customerId) {

        try {

            HttpGet request = new HttpGet(ordersApiPath + "?customerId=" + customerId);
            HttpResponse response = httpClient.execute(request);

            int status = response.getStatusLine().getStatusCode();

            if (status &gt;= 200 &amp;&amp; status &lt; 300) {
                HttpEntity entity = response.getEntity();

                if (entity != null)
                    return CompletableFuture.completedFuture(toOrdersArray(EntityUtils.toString(entity)));
            } else {
                String msg = "Remote server '" + ordersApiPath + "' failed with status " + status + ".";
                log.warn(msg);
                throw new InternalServerErrorException(msg);
            }

        } catch (IOException e) {
            String msg = e.getClass().getName() + " occured: " + e.getMessage();
            log.warn(msg);
            throw new InternalServerErrorException(msg);
        }

        return CompletableFuture.completedFuture(new ArrayList&lt;&gt;());
    }

    public Future&lt;List&lt;Order&gt;&gt; findOrdersByCustomerIdFallback(String customerId) {

        log.info("Fallback called for findOrdersByCustomerId.");

        Order order = new Order();
        order.setCustomerId(customerId);
        order.setName("N/A");
        order.setPaymentType("N/A");
        order.setId("N/A");

        List&lt;Order&gt; orders = new ArrayList&lt;&gt;();
        orders.add(order);

        return CompletableFuture.completedFuture(orders);
    }

    private List&lt;Order&gt; toOrdersArray(String json) throws IOException {

        return json == null ?
                new ArrayList&lt;&gt;() :
                objectMapper.readValue(json, objectMapper.getTypeFactory().constructCollectionType(List.class, Order
                        .class));
    }

}
</pre></body></html>




File path: kumuluzee-logs-jul/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-config-mp/src/main/java/com/kumuluz/ee/samples/ConfigResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples;

import com.kumuluz.ee.samples.models.Customer;
import org.eclipse.microprofile.config.Config;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Optional;

/**
 * @author Urban Malc
 * @author Jan Meznarič
 * @since 2.5.0
 */
@RequestScoped
@Produces(MediaType.APPLICATION_JSON)
@Path("config")
public class ConfigResource {

    @Inject
    private Config injectedConfig;

    @Inject
    @ConfigProperty(name = "mp.example-string")
    private String injectedString;

    @Inject
    @ConfigProperty(name = "mp.non-existent-string", defaultValue = "Property does not exist!")
    private String nonExistentString;

    @Inject
    @ConfigProperty(name = "mp.non-existent-string")
    private Optional&lt;String&gt; nonExistentStringOpt;

    @Inject
    @ConfigProperty(name = "mp.example-customer")
    private Customer customer;

    @Inject
    @ConfigProperty(name = "mp.custom-source-value")
    private String customSourceValue;

    @Inject
    @ConfigProperty(name = "mp.custom-source-ordinal")
    private String customSourceOrdinal;

    @Inject
    @ConfigProperty(name = "mp.example-customers")
    private Customer[] customers;

    @GET
    public Response testConfig() {

        Config config = ConfigProvider.getConfig();

        String exampleString = config.getValue("mp.example-string", String.class);
        Boolean exampleBoolean = injectedConfig.getValue("mp.example-boolean", boolean.class);

        String response =
                "{" +
                        "\"exampleString\": \"%s\"," +
                        "\"exampleBoolean\": %b," +
                        "\"injectedString\": \"%s\"," +
                        "\"nonExistentString\": \"%s\"," +
                        "\"nonExistentStringOpt\": \"%s\"," +
                        "\"customer\": \"%s\"," +
                        "\"customSourceValue\": \"%s\"," +
                        "\"customSourceOrdinal\": \"%s\"," +
                        "\"customers[1]\": \"%s\"" +
                        "}";

        response = String.format(
                response,
                exampleString,
                exampleBoolean,
                injectedString,
                nonExistentString,
                nonExistentStringOpt.orElse("Empty Optional"),
                customer,
                customSourceValue,
                customSourceOrdinal,
                customers[1]
        );

        return Response.ok(response).build();
    }
}
</pre></body></html>




File path: microservices-simple/orders/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;microservices-simple&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;microservices-simple-orders&lt;/artifactId&gt;

    &lt;name&gt;Simple microservices example with KumuluzEE orders&lt;/name&gt;
    &lt;description&gt;Orders microservice example using KumuluzEE using a shared database module&lt;/description&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
            &lt;artifactId&gt;microservices-simple-models&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: vertx-publisher
  version: 1.0.0
  server:
    http:
      port: 8080
  reactive:
    vertx:
      clustered: true
      cluster-host: localhost
      cluster-port: 0</pre></body></html>




File path: kumuluzee-swagger/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-swagger&lt;/artifactId&gt;

    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE Swagger sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Swagger usage sample with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-swagger.version&gt;1.3.0-SNAPSHOT&lt;/kumuluzee-swagger.version&gt;
        &lt;kumuluzee-security.version&gt;1.0.1&lt;/kumuluzee-security.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.swagger&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-swagger&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-swagger.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.swagger&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-swagger-ui&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-swagger.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--&lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
        &lt;/dependency&gt;--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-version/src/main/java/com/kumuluz/ee/samples/jaxrs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxrs;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/resources/schemas/avro/v2.0.0/pricing.avsc
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{
  "namespace": "com.kumuluz.ee.samples.kafka.registry.avro.lib",
  "type": "record",
  "name": "Pricing",
  "fields": [
    {"name": "price", "type": "string"},
    {"name": "priceExTax", "type": "string"},
    {"name": "basePrice", "type": "string"},
    {"name": "taxAmount", "type": "string"},
    {"name": "description", "type": "string"},
    {"name": "taxPercentRequired", "type": "string"},
    {"name": "taxPercentOptional", "type": "string", "default": "undefined"}
  ]
}</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-persistence/src/main/resources/sql-scripts/init-customers.sql
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">INSERT INTO customer (id, date_of_birth, first_name, last_name, address) VALUES (1, TIMESTAMP '2006-01-01 15:36:38', 'James', 'Smith', '32 Threadneedle Street, London');
INSERT INTO customer (id, date_of_birth, first_name, last_name, address) VALUES (2, TIMESTAMP '2009-03-17 15:36:38', 'John', 'Williams', '21 Foster Lane, London');
INSERT INTO customer (id, date_of_birth, first_name, last_name, address) VALUES (3, TIMESTAMP '2013-11-29 15:36:38', 'Robert', 'Jones', '11 Ludgate Hill, London');</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams/src/main/java/com/kumuluz/ee/samples/kafka/streams/WordCountStreamsControl.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.streams;

import com.kumuluz.ee.streaming.common.annotations.StreamProcessorController;
import com.kumuluz.ee.streaming.kafka.utils.streams.StreamsController;
import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import java.util.concurrent.CountDownLatch;

/**
 * @author Matija Kljun
 */
@ApplicationScoped
public class WordCountStreamsControl {

    @StreamProcessorController(id="word-count")
    StreamsController wordCountStreams;

    public void startStream(@Observes @Initialized(ApplicationScoped.class) Object init) {
        final CountDownLatch latch = new CountDownLatch(1);

        // attach shutdown handler to catch control-c
        Runtime.getRuntime().addShutdownHook(new Thread("streams-wordcount-shutdown-hook") {
            @Override
            public void run() {
                wordCountStreams.close();
                latch.countDown();
            }
        });

        try {
            wordCountStreams.start();
            latch.await();
        } catch (Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }
}
</pre></body></html>




File path: kumuluzee-opentracing/customers/src/main/java/com/kumuluz/ee/samples/opentracing/customers/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.customers;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Domen Jeric
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-opentracing/customers/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/customer-cm.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-customer-config
  namespace: kumuluzee-blog
data:
  KUMULUZEE_DISCOVERY_CLUSTER: private-coreos
  KUMULUZEE_DISCOVERY_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_CONFIG_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_DATASOURCES0_CONNECTIONURL: jdbc:postgresql://postgres-customers:5433/customer
  KUMULUZEE_SERVER_BASEURL: http://192.168.29.246:32600
  KUMULUZEE_HEALTH_CHECKS_DATASOURCEHEALTHCHECK_CONNECTIONURL: jdbc:postgresql://postgres-customers:5433/customer
</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/lib/InvoiceData.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.jcache.rest.lib;

import java.io.Serializable;

/**
 * @author cen1
 * @since 3.6.0
 */
public class InvoiceData implements Serializable {

    private String id;

    public InvoiceData() {}

    public InvoiceData(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-metro/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;jax-ws&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jax-ws-metro&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JAX-WS metro sample&lt;/name&gt;
    &lt;description&gt;JAX-WS usage sample with KumuluzEE metro&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-ws-metro&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge/src/main/resources/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8079
  streaming:
    kafka:
      consumer-avro:
        bootstrap-servers: localhost:29092
        group-id: group1
        enable-auto-commit: true
        auto-commit-interval-ms: 1000
        auto-offset-reset: latest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
        schema-registry-url: http://localhost:8081
        specific-avro-reader: true</pre></body></html>




File path: kumuluzee-config-etcd/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev
  config:
    start-retry-delay-ms: 500
    max-retry-delay-ms: 900000
    etcd:
      hosts: http://localhost:2379
#      username: root
#      password: admin
#      ca: -----BEGIN CERTIFICATE-----
#          MIIDDjCCAfagAwIBAgIUZzEIr206GOYqlxHLWtUUEu2ztvcwDQYJKoZIhvcNAQEL
#          BQAwDTELMAkGA1UEAxMCQ0EwHhcNMTcwNDEwMDcyMDAwWhcNMjIwNDA5MDcyMDAw
#          WjANMQswCQYDVQQDEwJDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
#          AMKAeFREzc3wjOCQ8RlbnTJmD0PUls4HS6lV/xlRKbsNwqC3rxpoSp7lDoVy6MNr
#          vX+7ZiyL05bkhWfF6Vzqqy6BVc6ock+nsIQyn1mXaTYDftue2z142KpjPLsj9YbP
#          r2C5fmQk3rigQER95nT4gX3SleFENrnsmJU8bOt59b33uaYv6WLKUCInADITsQAN
#          O8LiQ4scRwQXMFq0xORWdno9xPoRZOKMi5p+mIN0cGl9/+ComuqIcWomjKkWYK58
#          Qhsy9jSaFYo6INMKLAjnmu5qY2Z7Hpf6iaVjgCayO8IXBWegspCTtZWZKOCpbO4A
#          w3iH1eCz6VaG3F9FC1yWlh0CAwEAdaNmMGQwDgYDVR0PAQH/BAQDAgEGMBIGA1Ud
#          EwEB/wQIMAYBAf8CAQIwHQYDeoklfBYEFBG6m7kZljsfFK2MTnQ5RWdM+mnDMB8G
#          A1UdIwQYMBaAFBG6m7kZljsfFK2MTnQ5RWdM+mnDMA0GCSqGSIb3DQEBCwUAA4IB
#          AQAT3tRmXGqt8Uh3Va0+Rlm4MDzcFsD7aO77tJuELCDC4cOCeROCEtYNJGm33MFe
#          buxwaZ+zAneg5a1DtDkdjMZ6N+CVkMBTDWWm8cuo6Dm3HKWr+Rtd6Z8LwOq/X40C
#          CHyowEYlYZSAof9rOHwn0rt8zgUSmZV6z9PXwFajwE2nEU7wlglYXtuLqBNzUYeN
#          wYNnVFjMYtsWKgi/3nCegXastYGqoDpnAT25CsExrRuxAQw5i5WJU5RJwNsOPod5
#          6X2Iz/EV5flbWti5OcoxLr3pfaCueLa71E+mPDKlWB55BXdNyHyS248msZC7UD2I
#          Opyz239QjRq2HRMl+i7C0e6O
#          -----END CERTIFICATE-----

rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
  encoded-property: ZW5jb2RlZCBwcm9wZXJ0eQ==
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8-jre-alpine

RUN mkdir /app

WORKDIR /app

ADD ./customers-api/target/customers-api-1.0.0-SNAPSHOT.jar /app

EXPOSE 8080

CMD ["java", "-jar", "customers-api-1.0.0-SNAPSHOT.jar"]
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/postgres-orders.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: postgres-orders-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-orders
    spec:
      containers:
        - image: postgres:latest
          name: postgres-orders
          env:
            - name: POSTGRES_USER
              value: dbuser
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: order
          ports:
          - containerPort: 5432
            protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-orders
  namespace: kumuluzee-blog
spec:
  type: ClusterIP
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres-orders</pre></body></html>




File path: kumuluzee-grpc/grpc-client/src/main/proto/user_service.proto
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">syntax = "proto3";
option java_package = "client";

service User {
    rpc getUser(UserRequest) returns (UserResponse) {};
}

message UserRequest {
    int32 id = 1;
}

message UserResponse {
    int32 id = 1;
    string name = 2;
    string surname = 3;
}</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/beans/SubjectBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.beans;

import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.StreamUtils;
import com.kumuluz.ee.samples.graphql_advanced.dtos.Subject;
import com.kumuluz.ee.samples.graphql_advanced.entities.connections.SubjectConnection;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


// This bean represents a different data source (outside of JPA).
@ApplicationScoped
public class SubjectBean {
    private Map&lt;Integer, List&lt;Subject&gt;&gt; subjectsByStudentNumber;
    private List&lt;Subject&gt; subjectList;

    @PostConstruct
    public void init() {
        subjectsByStudentNumber = new HashMap&lt;&gt;();
        subjectList = new ArrayList&lt;&gt;();

        subjectList.add(new Subject(subjectList.size(),"Maths", "P22"));
        subjectList.add(new Subject(subjectList.size(),"Programming in Java", "PA"));
        subjectList.add(new Subject(subjectList.size(),"Programming in Python", "P1"));

        List&lt;Subject&gt; subjectList1 = new ArrayList&lt;&gt;();
        subjectList1.add(subjectList.get(0));
        subjectList1.add(subjectList.get(1));
        subjectsByStudentNumber.put(63170000, subjectList1);

        List&lt;Subject&gt; subjectList2 = new ArrayList&lt;&gt;();
        subjectList2.add(subjectList.get(2));
        subjectsByStudentNumber.put(63170001, subjectList2);
    }

    public List&lt;Subject&gt; getSubjects(Integer studentNumber) {
        List&lt;Subject&gt; subjects = subjectsByStudentNumber.get(studentNumber);
        if (subjects != null) {
            return subjects;
        } else {
            return new ArrayList&lt;&gt;();
        }
    }

    public Subject createSubject(Subject s) {

        s.setId(subjectList.size());
        subjectList.add(s);

        return s;
    }

    public boolean assignSubject(Integer studentNumber, Integer subjectId) {

        List&lt;Subject&gt; subjects = subjectsByStudentNumber.get(studentNumber);
        Subject subject = getSubjectById(subjectId);
        if (subjects != null) {
            if(subjects.contains(subject)) {
                // assignment already present
                return false;
            } else {
                subjects.add(subject);
            }
        } else {
            List&lt;Subject&gt; newSubjects = new ArrayList&lt;&gt;();
            newSubjects.add(subject);
            subjectsByStudentNumber.put(studentNumber, newSubjects);
        }
        return true;
    }

    private Subject getSubjectById(Integer id) {
        return subjectList.get(id);
    }

    public SubjectConnection getSubjectConnection(QueryParameters queryParameters) {

        return new SubjectConnection(StreamUtils.queryEntities(subjectList, queryParameters),
                StreamUtils.queryEntitiesCount(subjectList, queryParameters));
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Reactive &amp;mdash; publish on Vert.x event bus

&gt; Develop a REST microservice that publishes a message to the given address on Vert.x event bus

The objective of this sample is to show how to publish a message on Vert.x event bus using KumuluzEE Reactive extension. The tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into `pom.xml`. You will develop a simple REST service, which uses KumuluzEE Reactive extension for publishing messages on Vert.x event bus. Required knowledge: basic familiarity with JAX-RS and REST, basic familiarity with Vert.x.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher
    $ mvn clean package
    ```

2. Run the sample:

    * Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```

3. The message producer can be accessed on the following URL:
    * JAX-RS REST resource, for producing messages - http://localhost:8080/v1/vertx/publish with a POST request with a JSON object, e.g.:
    ```javascript
	{
		"content": "Hello, World"
	}
	```

To shut down the example simply stop the processes in the foreground.


## Tutorial

This tutorial will guide you through the steps required to create a Vert.x event bus message publisher with the help of the KumuluzEE Reactive Vert.x extension.
We will develop a simple REST service for producing messages on Vert.x event bus:
* POST http://localhost:8080/v1/vertx/publish

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS, CDI)
* Add Maven dependency to KumuluzEE Reactive Vertx extension
* Implement the service
* Add configuration for Vert.x
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey` and `kumuluzee-cdi-weld` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```
Alternatively, we could add the `kumuluzee-microProfile-1.0`, which adds the MicroProfile 1.0 dependencies (JAX-RS, CDI, JSON-P, and Servlet).

Add the `kumuluzee-reactive-vertx` dependency:
```xml
&lt;dependency&gt;
	&lt;groupId&gt;com.kumuluz.ee.reactive&lt;/groupId&gt;
	&lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
	&lt;version&gt;${kumuluzee-reactive-vertx.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class VertxApplication extends Application {
}
```

Implement a simple Message Java class, which is a POJO:

```java
public class Message {

	private String content;

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}
	
}
```

Implement JAX-RS resource, with a POST method for publishing messages. Inject the Message Producer using the `@ReactiveEventPublisher(address = "tacos")` annotation and send a message on POST request.

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("vertx")
@RequestScoped
public class VertxResource {
	
	@Inject
	@ReactiveEventPublisher(address = "tacos")
	MessageProducer&lt;Object&gt; tacos;
	
	@POST
	@Path("publish")
	public Response sendMessage(Message message) {
		tacos.send(message.getContent());
		
		JsonObject reponse = new JsonObject()
				.put("message", message.getContent())
				.put("status", "sent");
		
		return Response.ok(reponse.encodePrettily()).build();
	}
	
}
```

When no address is supplied to the annotation, the default address `publisher` is used.

### Add configuration for Vert.x

You can configure Vert.x using any KumuluzEE configuration source.

For example, you can use `config.yml` file, placed in resources folder.
In this example we configured `config.yml` as shown below:

```yaml
kumuluzee:
  name: vertx-publisher
  version: 1.0.0
  server:
    http:
      port: 8080
  reactive:
    vertx:
      clustered: true
      cluster-host: localhost
      cluster-port: 0       
```

Setting the `clustered` tag to `true` allows multiple Vert.x instances to form a single, distributed, event bus. `cluster-host` and `cluster-port` determine which address will be used for cluster communication with other Vert.x instances. Their default values are `localhost` and `0`, which means a random free port will be chosen.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

You can either run [`kumuluzee-reactive-vertx-listener`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener) or [`verticle-listener`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/simple-verticles/verticle-listener) to test the functionalities of this microservice.</pre></body></html>




File path: kumuluzee-opentracing-tutorial/alpha/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8081</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
	   bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
  security:
    keycloak:
      json: '{
               "realm": "customers-realm",
               "bearer-only": true,
               "auth-server-url": "http://localhost:8082/auth",
               "ssl-required": "external",
               "resource": "customers-api",
               "confidential-port": 0
             }'</pre></body></html>




File path: kumuluzee-security-keycloak/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/listeners/MyCacheListener.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.jcache.rest.listeners;

import com.kumuluz.ee.logs.LogManager;
import com.kumuluz.ee.logs.Logger;
import com.kumuluz.ee.samples.jcache.rest.lib.InvoiceData;

import javax.cache.event.*;
import java.io.Serializable;

/**
 * @author cen1
 * @since 3.6.0
 */
public class MyCacheListener implements
        CacheEntryCreatedListener&lt;String, InvoiceData&gt;,
        CacheEntryRemovedListener&lt;String, InvoiceData&gt;,
        CacheEntryExpiredListener&lt;String, InvoiceData&gt;,
        Serializable {

    private static final Logger LOG = LogManager.getLogger(MyCacheListener.class.getName());

    @Override
    public void onCreated(Iterable&lt;CacheEntryEvent&lt;? extends String, ? extends InvoiceData&gt;&gt; iterable) throws CacheEntryListenerException {
        for (CacheEntryEvent&lt;? extends String, ? extends InvoiceData&gt; cacheEntryEvent : iterable) {
            LOG.info("Cache {} stored key {}",
                    cacheEntryEvent.getSource().getName(),
                    cacheEntryEvent.getKey());
        }
    }

    @Override
    public void onRemoved(Iterable&lt;CacheEntryEvent&lt;? extends String, ? extends InvoiceData&gt;&gt; iterable) throws CacheEntryListenerException {
        for (CacheEntryEvent&lt;? extends String, ? extends InvoiceData&gt; cacheEntryEvent : iterable) {
            LOG.info("Cache {} removed key {}",
                    cacheEntryEvent.getSource().getName(),
                    cacheEntryEvent.getKey());
        }
    }

    @Override
    public void onExpired(Iterable&lt;CacheEntryEvent&lt;? extends String, ? extends InvoiceData&gt;&gt; iterable) throws CacheEntryListenerException {
        for (CacheEntryEvent&lt;? extends String, ? extends InvoiceData&gt; cacheEntryEvent : iterable) {
            LOG.info("Cache {} expired key {}",
                    cacheEntryEvent.getSource().getName(),
                    cacheEntryEvent.getKey());
        }
    }
}</pre></body></html>




File path: kumuluzee-cors/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  cors-filter:
    annotations:
      customer-servlet:
        allow-origin: "http://origin2.kumuluz.com"
        allow-subdomains: false</pre></body></html>




File path: kumuluzee-config-consul/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/exceptionmappers/NotFoundExceptionMapper.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.exceptionmappers;


import com.kumuluz.ee.samples.tutorial.orders.api.v1.dtos.Error;

import javax.enterprise.context.ApplicationScoped;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

@Provider
@ApplicationScoped
public class NotFoundExceptionMapper implements ExceptionMapper&lt;NotFoundException&gt; {

    @Override
    public Response toResponse(NotFoundException e) {

        Error error = new Error();
        error.setStatus(404);
        error.setCode("resource.not.found");
        error.setMessage(e.getMessage());

        return Response
                .status(Response.Status.NOT_FOUND)
                .entity(error)
                .build();
    }
}
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  amqp:
    rabbitmq:
      hosts:
        - name: MQtest
          url: localhost
          username: guest
          password: guest
          exchanges:
            - name: directExchange
              type: direct
        - name: MQtest2
          queues:
          - name: testQueue
      properties:
        - name: testProperty
          headers:
            title: text
          timestamp: true</pre></body></html>




File path: kumuluzee-opentracing-tutorial/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-opentracing-tutorial&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE OpenTracing tutorial&lt;/name&gt;
    &lt;description&gt;Sample project for blog tutorial&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;master&lt;/module&gt;
        &lt;module&gt;alpha&lt;/module&gt;
        &lt;module&gt;beta&lt;/module&gt;
        &lt;module&gt;gamma&lt;/module&gt;
        &lt;module&gt;delta&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;kumuluzee-opentracing.version&gt;1.3.1&lt;/kumuluzee-opentracing.version&gt;
    &lt;/properties&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Event Streaming Kafka &amp;mdash; Stream processing with Kafka Streams

&gt; Develop a simple WordCount stream processing application using KumuluzEE Event Streaming with Kafka Streams

The objective of this sample is to show how to easily develop a stream processing application using 
KumuluzEE Event Streaming with Kafka Streams. The tutorial will guide you through all the necessary steps. 
You will add KumuluzEE dependencies into pom.xml. You will develop a simple stream processing application,
that implements the WordCount algorithm, which computes a word occurrence histogram from the input text.
Required knowledge: basic familiarity with Apache Kafka Streams.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need an Kafka and Zookeeper instance [Kafka Quickstart](https://kafka.apache.org/quickstart).
There are a lot of Kafka Docker available on the Docker hub, in this tutorial we use  
[ches/kafka](https://hub.docker.com/r/ches/kafka/) and a separate Docker with the Zookeeper instance 
[jplock/zookeeper](https://hub.docker.com/r/jplock/zookeeper/)
Here is an example on how to quickly run the Zookeeper and Kafka Docker:

```bash
$ docker network create kafka-net
  
$ docker run -d -p 2181:2181 --name zookeeper --network kafka-net zookeeper:3.4
$ docker run -d -p 9092:9092 --name kafka --network kafka-net --env ZOOKEEPER_IP=zookeeper --env KAFKA_ADVERTISED_HOST_NAME={docker_host_ip} ches/kafka
```

Replace `{docker_host_ip}` with you Docker host IP.

## Usage

The example uses Docker to set up the Kafka and Zookeeper instances and maven to build and run the microservice.

1. Start the Zookeeper and Kafka Docker:

    ```bash
    $ docker network create kafka-net
      
    $ docker run -d -p 2181:2181 --name zookeeper --network kafka-net zookeeper:3.4
    $ docker run -d -p 9092:9092 --name kafka --network kafka-net --env ZOOKEEPER_IP=zookeeper --env KAFKA_ADVERTISED_HOST_NAME={docker_host_ip} ches/kafka
    ```
    
    Replace `{docker_host_ip}` with you Docker host IP.
    
    To consume messages in the terminal, you can use the Kafka CLI command:
    
    ```bash
    $ docker run --rm --network kafka-net ches/kafka \
      kafka-console-consumer.sh --topic test --from-beginning --bootstrap-server kafka:9092
    ```
    
    To produce messages in the terminal, you can use the Kafka CLI command:
        
    ```bash
    $ docker run --rm --interactive --network kafka-net ches/kafka \
      kafka-console-producer.sh --topic test --broker-list kafka:9092
    &lt;type some messages followed by newline&gt;
    ```
    

2. Build the sample using maven:
   
   ```bash
   $ cd kumuluzee-streaming-kafka/kumuluzee-kafka-streams
   $ mvn clean package
   ```

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```

To shut down the example simply stop the processes in the foreground and all Docker containers started for this example.

## Tutorial

This tutorial will guide you through the steps required to create a service, 
which uses KumuluzEE Event Streaming Kafka extension.
We will develop a simple stream processing application.

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components with the microProfile-1.0 dependency
* Add Maven dependency to KumuluzEE Event Streaming Kafka extension
* Implement the service
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-microProfile-1.0`, `kumuluzee-streaming-kafka` and `kafka-streams` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;
        &lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;
        &lt;version&gt;${kafka.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

We will use `kumuluzee-logs` for logging in this sample, so you need to include kumuluzee logs implementation dependency:
```xml
&lt;dependency&gt;
    &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
    &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
    &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
&lt;/dependency&gt;
```

For more information about the KumuluzEE Logs visit the [KumuluzEE Logs Github page](https://github.com/kumuluz/kumuluzee-logs).
Currently, Log4j2 is supported implementation of `kumuluzee-logs`, so you need to include a sample Log4j2 configuration, 
which should be in a file named `log4j2.xml` and located in `src/main/resources`:

```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
```

If you would like to collect Kafka related logs through the KumuluzEE Logs, you have to include the following `slf4j` implementation as dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
    &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the stream processor

In an ApplicationScoped class we create a StreamProcessor annotated method that returns the StreamsBuilder object, the
annotation has the parameter `id` set to "word-count" and autoStart to `false`, the configuration prefix has the default
value "streams".

In the annotated method we:
1. Construct the StreamsBuilder.
2. Construct a `KStream` from the input topic "input", where message values represent lines of text (for the sake of 
this example, we ignore whatever may be stored in the message keys).
3. With the help of Kafka `KTable` we then split each text line from the `KStream`, by whitespace, into words. Group the 
text words as message keys and count the occurrences of each word (message key). 
4. Then we store the running counts as a changelog stream to the output topic "output".
5. At the end we return the constructed StreamsBuilder.

```java
@ApplicationScoped
public class WordCountStreamsBuilder {

    @StreamProcessor(id = "word-count", autoStart = false)
    public StreamsBuilder wordCountBuilder() {

        StreamsBuilder builder = new StreamsBuilder();

        // Serializers/deserializers (serde) for String and Long types
        final Serde&lt;String&gt; stringSerde = Serdes.String();

        // Construct a `KStream` from the input topic "streams-plaintext-input", where message values
        // represent lines of text (for the sake of this example, we ignore whatever may be stored
        // in the message keys).
        KStream&lt;String, String&gt; textLines = builder.stream("in",
                Consumed.with(stringSerde, stringSerde));

        KTable&lt;String, String&gt; wordCounts = textLines
                // Split each text line, by whitespace, into words.
                .flatMapValues(value -&gt; Arrays.asList(value.toLowerCase().split("\\W+")))
                // Group the text words as message keys
                .groupBy((key, value) -&gt; value)
                // Count the occurrences of each word (message key).
                .count()
                .mapValues((key, value) -&gt; value.toString());

        // Store the running counts as a changelog stream to the output topic.
        wordCounts.toStream().to("out", Produced.with(stringSerde, stringSerde));

        return builder;

    }
}
```

Since we set the StreamProcessor parameter autoStart to `false` we must manually start the Streams instance. We can do 
this by injecting StreamsController annotated with `@StreamProcessorController` with the parameter `id` set to the id of
the previously annotated `wordCountBuilder` method.
With the `StreamsController` class we can access the KafkaStreams methods that manage the lifecycle of the created 
Kafka Streams instance.

In the example below we can see that we created a method `startStream` that observes the initialization of the 
ApplicationScoped class. In the method we start the Kafka Streams instance and attach a shutdown handler to catch 
control-c and close the stream processor.

```java
@ApplicationScoped
public class WordCountStreamsControl {

    @StreamProcessorController(id="word-count")
    StreamsController wordCountStreams;

    public void startStream(@Observes @Initialized(ApplicationScoped.class) Object init) {
        final CountDownLatch latch = new CountDownLatch(1);

        // attach shutdown handler to catch control-c
        Runtime.getRuntime().addShutdownHook(new Thread("streams-wordcount-shutdown-hook") {
            @Override
            public void run() {
                wordCountStreams.close();
                latch.countDown();
            }
        });

        try {
            wordCountStreams.start();
            latch.await();
        } catch (Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }
}
```

### Add required configuration for the Kafka Producer

You have to add the Kafka Streams configuration using any KumuluzEE configuration source.

For example, you can use config.yaml file, placed in resources folder:

```yaml
kumuluzee:
  streaming:
    kafka:
      streams:
        bootstrap-servers: localhost:9092
        application-id: sample-word-count
        default-key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default-value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        commit-interval-ms: 500
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

</pre></body></html>




File path: kumuluzee-discovery-consul/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE Consul Discovery samples&lt;/name&gt;
    &lt;description&gt;Samples for service discovery with KumuluzEE&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;discovery-consul-register&lt;/module&gt;
        &lt;module&gt;discovery-consul-discover-servlet&lt;/module&gt;
        &lt;module&gt;discovery-consul-discover-jaxrs&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;kumuluzee-discovery.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-discovery.version&gt;
    &lt;/properties&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-version/src/main/java/com/kumuluz/ee/samples/jaxrs/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxrs;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery &amp;mdash; register service with Consul

&gt; Develop a REST KumuluzEE microservice and register it with Consul.

The objective of this sample is to show how to register a REST service with Consul using KumuluzEE Discovery extension.
This tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into pom.xml.
You will use existing JAX-RS sample, described [here](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
Required knowledge: basic familiarity with JAX-RS and basic concepts of REST and JSON; basic familiarity with Consul.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need a Consul instance. Note that such setup with only one node is not viable for 
production environments, but only for developing purposes. Download Consul and run it in development mode with the 
following command:

   ```bash
    $ consul agent -dev
   ```

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd discovery-samples/discovery-register
    $ mvn clean package
    ```

2. Start local Consul instance:

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8081/v1/customers

The application is registered with Consul. You can discover it using one of the discover samples:
* [discover-consul-servlet sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-discover-servlet)
* [discover-consul-jaxrs sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-discover-jaxrs)

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to register KumuluzEE microservice with Consul. 
We will use existing [sample Customer REST service](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) with the following resources:
* GET http://localhost:8080/v1/customers - list of all customers 
* GET http://localhost:8080/v1/customers/{customerId} – details of customer with ID {customerId}
* POST http://localhost:8080/v1/customers – add a customer
* DELETE http://localhost:8080/v1/customers/{customerId} – delete customer with ID {customerId}

We will follow these steps:
* Import a Maven sample, mentioned above, in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependency to KumuluzEE Discovery extension
* Annotate JAX-RS Application class with @RegisterService annotation
* Build the microservice
* Run it

### Add Maven dependencies

Add the `kumuluzee-discovery-consul` dependency to the sample:
```xml
&lt;dependencies&gt;
    ...
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```
Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Annotate JAX-RS Application

Add the `@RegisterService` annotation to JAX-RS Application class (CustomerApplication.java):

```java
@RegisterService
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
```

### Add required configuration for the service discovery

You can add configuration using any KumuluzEE configuration source.

For example, you can use config.yml file, placed in resources folder:
```yaml
kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    http:
      port: 8081
  discovery:
    ttl: 20
    ping-interval: 15
```

Port 8081 is used because we want to run another microservice on default port, which discovers this service.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-rest/src/main/java/com/kumuluz/ee/samples/rest/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.rest;

import com.kumuluz.ee.rest.beans.QueryParameters;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.util.List;

/**
 * @author Benjamin Kastelic, Marko Skrjanec
 * @since 2.3.0
 */
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @Context
    protected UriInfo uriInfo;

    @Inject
    private CustomerService customerBean;

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = customerBean.getCustomers(createQuery());
        return Response.ok(customers).build();
    }

    @GET
    @Path("count")
    public Response getCount() {
        Long count = customerBean.getCustomerCount(createQuery());
        return Response.ok(count).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = customerBean.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        customerBean.saveCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        customerBean.deleteCustomer(customerId);
        return Response.noContent().build();
    }

    /**
     * Helper method for parsing query parameters from uri.
     *
     * @return query parameters
     */
    private QueryParameters createQuery() {
        return QueryParameters.query(uriInfo.getRequestUri().getQuery()).defaultOffset(0).defaultLimit(10).build();
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-persistence/src/main/java/com/kumuluz/ee/samples/tutorial/orders/Order.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders;

import org.eclipse.persistence.annotations.UuidGenerator;

import javax.persistence.*;
import java.util.Date;

@Entity(name = "orders")
@NamedQueries(value =
        {
                @NamedQuery(name = "Order.getAll", query = "SELECT o FROM orders o"),
                @NamedQuery(name = "Order.findByCustomer", query = "SELECT o FROM orders o WHERE o.customerId = " +
                        ":customerId")
        })
@UuidGenerator(name = "idGenerator")
public class Order {

    @Id
    @GeneratedValue(generator = "idGenerator")
    private String id;

    private String title;

    private String description;

    private Date submitted;

    @Column(name = "customer_id")
    private String customerId;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public Date getSubmitted() {
        return submitted;
    }

    public void setSubmitted(Date submitted) {
        this.submitted = submitted;
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-servlet/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;discovery-consul-discover-servlet&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Consul Discovery servlet sample&lt;/name&gt;
    &lt;description&gt;Discover service with KumuluzEE servlet service&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1;

import javax.annotation.security.DeclareRoles;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/v1")
@DeclareRoles({"user", "admin"})
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/dtos/Error.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.dtos;

public class Error {

    private Integer status;
    private String code;
    private String message;

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

}

</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-business-logic/src/main/java/com/kumuluz/ee/samples/tutorial/customers/cdi/configuration/RestProperties.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.cdi.configuration;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;
import com.kumuluz.ee.configuration.cdi.ConfigValue;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
@ConfigBundle("rest-properties")
public class RestProperties {

    @ConfigValue(value = "external-dependencies.order-service.enabled", watch = true)
    private boolean orderServiceEnabled;

    public boolean isOrderServiceEnabled() {
        return orderServiceEnabled;
    }

    public void setOrderServiceEnabled(boolean orderServiceEnabled) {
        this.orderServiceEnabled = orderServiceEnabled;
    }
}
</pre></body></html>




File path: kumuluzee-openapi-mp/src/main/java/com/kumuluz/ee/samples/openapi/v2/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.openapi.v2;

import org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;
import org.eclipse.microprofile.openapi.annotations.enums.SecuritySchemeType;
import org.eclipse.microprofile.openapi.annotations.info.Contact;
import org.eclipse.microprofile.openapi.annotations.info.Info;
import org.eclipse.microprofile.openapi.annotations.info.License;
import org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement;
import org.eclipse.microprofile.openapi.annotations.security.SecurityScheme;
import org.eclipse.microprofile.openapi.annotations.servers.Server;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * CustomerApplication class
 *
 * @author Zvone Gazvoda
 * @since 3.2.0
 */
@SecurityScheme(securitySchemeName = "openid-connect", type = SecuritySchemeType.OPENIDCONNECT,
        openIdConnectUrl = "http://auth-server-url/.well-known/openid-configuration")
@ApplicationPath("v2")
@OpenAPIDefinition(info = @Info(title = "CustomerApi", version = "v2.0.0", contact = @Contact(), license = @License(name="something")), servers = @Server(url = "http://localhost:8080/v2"), security
        = @SecurityRequirement(name = "openid-connect"))
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8-jre-alpine

RUN mkdir /app

WORKDIR /app

ADD ./orders-api/target/orders-api-1.0.0-SNAPSHOT.jar /app

EXPOSE 8080

CMD ["java", "-jar", "orders-api-1.0.0-SNAPSHOT.jar"]
</pre></body></html>




File path: kumuluzee-microProfile-1.2/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: microProfile-1.2-sample
  version: 1.0.0
  env:
    name: dev
  metrics:
    web-instrumentation:
      - name: customersEndpoint
        url-pattern: /v1/customers/*
  jwt-auth:
      public-key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnOTgnGBISzm3pKuG8QXMVm6eEuTZx8Wqc8D9gy7vArzyE5QC/bVJNFwlz...
      issuer: http://example.org/auth
healthy: true</pre></body></html>




File path: kumuluzee-microProfile-1.2/src/main/java/com/kumuluz/ee/samples/kumuluzee_microProfile_12/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_microProfile_12;

import java.util.ArrayList;
import java.util.List;

public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(int customerId) {
        for (Customer customer : customers) {
            if (customer.getId() == customerId)
                return customer;
        }

        return null;
    }

    public static Customer addCustomer(Customer customer) {
        customers.add(customer);
        return customer;
    }

    public static void deleteCustomer(int customerId) {
        for (Customer customer : customers) {
            if (customer.getId() == customerId) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-listener/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;simple-verticles&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;verticle-listener&lt;/artifactId&gt;

    &lt;name&gt;Listen to Vert.x event bus&lt;/name&gt;
    &lt;description&gt;Listen to events on Vert.x event bus using a Verticle&lt;/description&gt;

    &lt;properties&gt;
        &lt;!-- the main verticle class name --&gt;
        &lt;main.verticle&gt;com.kumuluz.ee.samples.reactive.vertx.ListenerVerticle&lt;/main.verticle&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.vertx&lt;/groupId&gt;
            &lt;artifactId&gt;vertx-core&lt;/artifactId&gt;
            &lt;version&gt;${vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.vertx&lt;/groupId&gt;
            &lt;artifactId&gt;vertx-hazelcast&lt;/artifactId&gt;
            &lt;version&gt;${vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;pluginManagement&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;version&gt;${maven.compiler.version}&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;source&gt;${maven.compiler.source}&lt;/source&gt;
                        &lt;target&gt;${maven.compiler.target}&lt;/target&gt;
                    &lt;/configuration&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;

        &lt;!-- You only need the part below if you want to build your application
            into a fat executable jar. This is a jar that contains all the dependencies
            required to run it, so you can just run it with java -jar --&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
                &lt;version&gt;${maven.shade.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;shade&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;transformers&gt;
                                &lt;transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;
                                    &lt;manifestEntries&gt;
                                        &lt;Main-Class&gt;io.vertx.core.Launcher&lt;/Main-Class&gt;
                                        &lt;Main-Verticle&gt;${main.verticle}&lt;/Main-Verticle&gt;
                                    &lt;/manifestEntries&gt;
                                &lt;/transformer&gt;
                                &lt;transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer"&gt;
                                    &lt;resource&gt;META-INF/services/io.vertx.core.spi.VerticleFactory&lt;/resource&gt;
                                &lt;/transformer&gt;
                            &lt;/transformers&gt;
                            &lt;artifactSet&gt;
                            &lt;/artifactSet&gt;
                            &lt;outputFile&gt;${project.build.directory}/${project.artifactId}-${project.version}-fat.jar&lt;/outputFile&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${maven.exec.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;run&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;java&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;mainClass&gt;io.vertx.core.Launcher&lt;/mainClass&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;run&lt;/argument&gt;
                                &lt;argument&gt;${main.verticle}&lt;/argument&gt;
                            &lt;/arguments&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;

                    &lt;execution&gt;
                        &lt;id&gt;run-app&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;exec&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;executable&gt;java&lt;/executable&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;-jar&lt;/argument&gt;
                                &lt;argument&gt;target/${project.artifactId}-${project.version}-fat.jar&lt;/argument&gt;
                            &lt;/arguments&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/DiscoverResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

import com.kumuluz.ee.discovery.annotations.DiscoverService;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Optional;

/**
 * @author Urban Malc
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("discover")
@RequestScoped
public class DiscoverResource {

    @Inject
    @DiscoverService(value = "customer-service", version = "1.0.x", environment = "dev")
    private Optional&lt;WebTarget&gt; target;

    @GET
    @Path("url")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getUrl() {
        if (target.isPresent()) {
            return Response.ok(target.get().getUri().toString()).build();
        } else {
            return Response.status(Response.Status.NO_CONTENT).build();
        }
    }

    @GET
    public Response getProxiedCustomers() {
        if (target.isPresent()) {
            WebTarget service = target.get().path("v1/customers");

            Response response;
            try {
                response = service.request().get();
            } catch (ProcessingException e) {
                return Response.status(408).build();
            }

            ProxiedResponse proxiedResponse = new ProxiedResponse();
            proxiedResponse.setResponse(response.readEntity(String.class));
            proxiedResponse.setProxiedFrom(target.get().getUri().toString());

            return Response.ok(proxiedResponse).build();
        } else {
            return Response.status(Response.Status.NO_CONTENT).build();
        }
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        if (target.isPresent()) {
            WebTarget service = target.get().path("v1/customers");

            Response response;
            try {
                response = service.request().post(Entity.json(customer));
            } catch (ProcessingException e) {
                return Response.status(408).build();
            }

            return Response.fromResponse(response).build();
        } else {
            return Response.status(Response.Status.NO_CONTENT).build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/java/com/kumuluz/ee/samples/kumuluzee_database_schema_migrations_liquibase/BookApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_database_schema_migrations_liquibase;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Din Music
 * @since 3.13.0
 */
@ApplicationPath("v1")
public class BookApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-opentracing/orders/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-feature-flags-unleash/src/main/java/com/kumuluz/ee/samples/api/RestApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.api;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Blaž Mrak
 * @since 1.0.0
 */
@ApplicationPath("v1")
public class RestApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-version/src/main/java/com/kumuluz/ee/samples/jaxrs/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxrs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-openapi/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-openapi&lt;/artifactId&gt;

    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE OpenAPI sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE OpenAPI usage sample with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-openapi.varsion&gt;1.1.0-SNAPSHOT&lt;/kumuluzee-openapi.varsion&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.openapi&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-openapi&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-openapi.varsion}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.openapi&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-openapi-ui&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-openapi.varsion}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</pre></body></html>




File path: jax-rs/src/main/java/com/kumuluz/ee/samples/jaxrs/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxrs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/java/com/kumuluz/ee/samples/amqp/rabbitmq/api/RestMessage.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.amqp.rabbitmq.api;

/**
 * @author Blaž Mrak
 * @since 3.2.0
 */

public class RestMessage {

    private String exchange;
    private String key;
    private String message;

    public String getExchange() {
        return exchange;
    }

    public void setExchange(String exchange) {
        this.exchange = exchange;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8081
    http:
      port: 8081
  discovery:
    etcd:
      hosts: http://localhost:2379
    ttl: 20
    ping-interval: 15
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/order-deployment.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: order-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: order
    spec:
      containers:
      - image: zvoneg/kubernetes-orders:v1.0.5
        name: kubernetes-orders
        envFrom:
          - configMapRef:
              name: kubernetes-order-config
        ports:
        - containerPort: 8081
          name: server
          protocol: TCP</pre></body></html>




File path: kumuluzee-opentracing-tutorial/alpha/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/alpha/Application.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.alpha;

import javax.ws.rs.ApplicationPath;

@ApplicationPath("v1")
public class Application extends javax.ws.rs.core.Application {
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/customer-cm.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-customer-config
  namespace: kumuluzee-blog
data:
  KUMULUZEE_DISCOVERY_CLUSTER: private-coreos
  KUMULUZEE_DISCOVERY_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_CONFIG_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_DATASOURCES0_CONNECTIONURL: jdbc:postgresql://postgres-customers:5433/customer
  KUMULUZEE_SERVER_BASEURL: http://192.168.29.246:32600
  KUMULUZEE_HEALTH_CHECKS_DATASOURCEHEALTHCHECK_CONNECTIONURL: jdbc:postgresql://postgres-customers:5433/customer
</pre></body></html>




File path: kumuluzee-logs-jul/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE Kafka sample&lt;/name&gt;
    &lt;description&gt;Kumuluz EE Kafka usage sample with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-streaming-kafka.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-streaming-kafka.version&gt;
        &lt;kumuluzee-logs.version&gt;1.3.0&lt;/kumuluzee-logs.version&gt;

        &lt;kafka.version&gt;2.0.0&lt;/kafka.version&gt;
        &lt;log4j-slf4j.version&gt;2.8.1&lt;/log4j-slf4j.version&gt;
    &lt;/properties&gt;

    &lt;modules&gt;
        &lt;module&gt;kumuluzee-streaming-kafka-producer&lt;/module&gt;
        &lt;module&gt;kumuluzee-streaming-kafka-consumer&lt;/module&gt;
        &lt;module&gt;kumuluzee-streaming-kafka-streams&lt;/module&gt;
    &lt;/modules&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/order-service.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: Service
metadata:
  name: order
  namespace: kumuluzee-blog
  labels:
    app: order
spec:
  type: NodePort
  ports:
  - name: server
    port: 8081
    protocol: TCP
    targetPort: 8081
  selector:
    app: order
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-persistence/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-tutorial-orders&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: websocket/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;websocket&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Websocket sample&lt;/name&gt;
    &lt;description&gt;Websocket usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-websocket-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: websocket/src/main/java/com/kumuluz/ee/samples/websocket/CustomerEndpoint.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.websocket;

import javax.websocket.OnMessage;
import javax.websocket.server.ServerEndpoint;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ServerEndpoint("/customer")
public class CustomerEndpoint {

    @OnMessage
    public String greetCustomer(String name) {
        System.out.print("Preparing greeting for customer '" + name + "' ...");
        return "Hello, " + name + "!";
    }
}
</pre></body></html>




File path: kumuluzee-rest/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customers
      username: postgres
      password: postgres
      pool:
        max-size: 20</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/postgres-orders.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: postgres-orders-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-orders
    spec:
      containers:
        - image: postgres:latest
          name: postgres-orders
          env:
            - name: POSTGRES_USER
              value: dbuser
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: order
          ports:
          - containerPort: 5432
            protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-orders
  namespace: kumuluzee-blog
spec:
  type: ClusterIP
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres-orders</pre></body></html>




File path: bean-validation/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;bean-validation&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Bean Validation sample&lt;/name&gt;
    &lt;description&gt;Bean validation usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-el-uel&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bean-validation-hibernate-validator&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: bean-validation/src/main/java/com/kumuluz/ee/samples/validation/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.validation;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: bean-validation/src/main/java/com/kumuluz/ee/samples/validation/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.validation;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/etcd.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: etcd-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: etcd
    spec:
      containers:
      - command:
        - /usr/local/bin/etcd
        - --name
        - etcd0
        - --initial-advertise-peer-urls
        - http://etcd:2380
        - --listen-peer-urls
        - http://0.0.0.0:2380
        - --listen-client-urls
        - http://0.0.0.0:2379
        - --advertise-client-urls
        - http://etcd:2379
        - --initial-cluster-state
        - new
        - -cors
        - "*"
        - --data-dir
        - /etcd-data
        image: quay.io/coreos/etcd:latest
        name: etcd
        ports:
        - containerPort: 2379
          name: client
          protocol: TCP
        - containerPort: 2380
          name: server
          protocol: TCP
        volumeMounts:
          - mountPath: /etcd-data
            name: etcddata
      volumes:
        - name: etcddata
          emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: etcd
spec:
  type: NodePort
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  - name: server
    port: 2380
    protocol: TCP
    targetPort: 2380
  selector:
    app: etcd
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka-registry&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka-registry-consumer&lt;/artifactId&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
            &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
            &lt;artifactId&gt;avro&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.confluent&lt;/groupId&gt;
            &lt;artifactId&gt;kafka-avro-serializer&lt;/artifactId&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
                &lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;generate-sources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;schema&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;sourceDirectory&gt;src/main/resources/schemas/avro&lt;/sourceDirectory&gt;
                            &lt;outputDirectory&gt;${project.basedir}/src/generated/java/&lt;/outputDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;io.confluent&lt;/groupId&gt;
                &lt;artifactId&gt;kafka-schema-registry-maven-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;subjects&gt;
                    &lt;/subjects&gt;
                    &lt;subjectPatterns&gt;
                        &lt;param&gt;pricing-avro-value&lt;/param&gt;
                    &lt;/subjectPatterns&gt;
                    &lt;outputDirectory&gt;${project.basedir}/src/main/resources/schemas/avro/&lt;/outputDirectory&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/src/main/java/com.kumuluz.ee.samples.discovery.register/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

/**
 * @author Urban Malc
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-health/src/main/java/com/kumuluz/ee/samples/health/GithubHealthCheckBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.health;

import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;
import org.eclipse.microprofile.health.Readiness;

import javax.enterprise.context.ApplicationScoped;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Logger;

/**
 * @author Marko Škrjanec
 * @since 2.5.0
 */
@Readiness
@ApplicationScoped
public class GithubHealthCheckBean implements HealthCheck {

    private static final String url = "https://github.com/kumuluz/kumuluzee";

    private static final Logger LOG = Logger.getLogger(GithubHealthCheckBean.class.getSimpleName());

    @Override
    public HealthCheckResponse call() {
        try {

            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setRequestMethod("HEAD");

            if (connection.getResponseCode() == 200) {
                return HealthCheckResponse.named(GithubHealthCheckBean.class.getSimpleName()).up().build();
            }
        } catch (Exception exception) {
            LOG.severe(exception.getMessage());
        }
        return HealthCheckResponse.named(GithubHealthCheckBean.class.getSimpleName()).down().build();
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-metro/src/main/java/com/kumuluz/ee/samples/jaxws/metro/CustomerEndpoint.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxws.metro;

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.ResponseWrapper;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@WebService(
        targetNamespace = "http://kumuluz.com/samples/jax-ws/customers/v1",
        serviceName = "CustomerEndpoint",
        portName = "CustomerEndpointSOAP"
)
public class CustomerEndpoint {

    @WebMethod(operationName = "GetCustomers", action = "http://kumuluz.com/samples/jax-ws/customers/v1/GetCustomers")
    @WebResult(name = "output")
    @ResponseWrapper(
            localName = "GetCustomersResponse",
            targetNamespace = "http://kumuluz.com/samples/jax-ws/customers/v1",
            className = "com.kumuluz.ee.samples.jaxws.metro.GetCustomersResponse"
    )
    public GetCustomersResponseMessage getCustomers() {
        Customer customer1 = new Customer();
        customer1.setId("1");
        customer1.setFirstName("John");
        customer1.setLastName("Doe");

        Customer customer2 = new Customer();
        customer2.setId("2");
        customer2.setFirstName("Alice");
        customer2.setLastName("Cooper");

        Customer customer3 = new Customer();
        customer3.setId("3");
        customer3.setFirstName("Bob");
        customer3.setLastName("Builder");

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        customers.add(customer1);
        customers.add(customer2);
        customers.add(customer3);

        CustomersList customersList = new CustomersList();
        customersList.setCustomer(customers);

        GetCustomersResponseMessage message = new GetCustomersResponseMessage();
        message.setCustomers(customersList);

        return message;
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-business-logic/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: jpa/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-jpa" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/CustomersDS&lt;/jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.jpa.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;

    &lt;/persistence-unit&gt;

    &lt;persistence-unit name="kumuluzee-samples-jpa-failed" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/FailedCustomersDS&lt;/jta-data-source&gt;

    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.utils.ConfigurationUtil;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                        "\"stringProperty\": \"%s\"," +
                        "\"booleanProperty\": %b," +
                        "\"integerProperty\": %d," +
                        "\"encodedProperty\": \"%s\"" +
                        "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty(),
                properties.getEncodedProperty());

        return Response.ok(response).build();
    }

    @GET
    @Path("/get")
    public Response get() {
        return Response.ok(ConfigurationUtil.getInstance().get("rest-config.string-property").orElse("nope")).build();
    }
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/Assistant.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities;

import javax.persistence.*;

@Entity
public class Assistant extends Person {

    @Column
    private Double popularity;

    public Assistant() {
    }

    public Double getPopularity() {
        return popularity;
    }

    public void setPopularity(Double popularity) {
        this.popularity = popularity;
    }
}
</pre></body></html>




File path: kumuluzee-microProfile-1.2/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Microservices with KumuluzEE MicroProfile 1.2

&gt; Build a microservice with Eclipse MicroProfile APIs implemented in KumuluzEE MicroProfile 1.2

The objective of this sample is to demonstrate how to use KumuluzEE MicroProfile 1.2 to build a microservice 
with [Eclipse MicroProfile](http://microprofile.io/) APIs, including health checks, configuration management, 
metrics collection, fault tolerance and JWT authentication mechanisms.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-microProfile-1.2
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target\${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp 'target/classes;target/dependency/*' com.kumuluz.ee.EeApplication
    ```
    
    
The microservice can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers
* Metrics JSON &amp; Prometheus - http://localhost:8080/metrics
* Health status - http://localhost:8080/health

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to use KumuluzEE MicroProfile 1.2 to develop a cloud-native 
microservice with Eclipse MicroProfile APIs. We will extend the existing
[KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
First, complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for
[KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing
sample
* Change Maven dependencies
* Add health check and configuration
* Add metrics collectors 
* Add fault tolerance mechanisms
* Access the JWT security token 
* Build the microservice and run it

### Change Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the
dependencies for `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in `pom.xml`. 
Replace them with `kumuluzee-microProfile-1.2` which already includes all of them, together with KumuluzEE CDI 
component, KumuluzEE Health, KumuluzEE Config MicroProfile, KumuluzEE Metrics, KumuluzEE Fault Tolerance and 
KumuluzEE JWT Authentication. 

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-microProfile-1.2&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

### Add health check and configuration

We will implement a custom health check, using the Eclipse MicroProfile Health Check API. The goal of this health 
check is to demonstrate the implementation and usage of custom health checks. Our health check will determine the 
health of the microservice according to the configuration value `healthy` that will be retrieved with the Eclipse 
MicroProfile Config API. We implement our health check as a CDI bean that extends the `HealthCheck` interface. We 
annotate it with `@Health` annotation and implement the `call` method.

```java
@Health
@ApplicationScoped
public class ServiceHealthCheck implements HealthCheck {

    @Inject
    @ConfigProperty(name = "healthy")
    private Provider&lt;Boolean&gt; isHealthy;

    @Override
    public HealthCheckResponse call() {

        if (isHealthy.get().booleanValue()) {
            return HealthCheckResponse.named(ServiceHealthCheck.class.getSimpleName()).up().build();
        } else {
            return HealthCheckResponse.named(ServiceHealthCheck.class.getSimpleName()).down().build();
        }

    }
}
```

Configuration value `healthy` is read from the configuration file `config.yaml` using the MicroProfile annotation 
`@ConfigProperty`:

```yalm
healthy: true
```

We can access the health status of our microservice on the endpoint `http://localhost:8080/health` which should 
return HTTP status `200` with outcome `UP`. If we change the value in the configuration file and restart the 
microservice, health endpoint will return HTTP status `503` with outcome `DOWN`.

More information about [KumuluzEE Config MicroProfile](https://github.com/kumuluz/kumuluzee-config-mp) and 
[KumuluzEE Health](https://github.com/kumuluz/kumuluzee-health) can be found on GitHub. 

### Add metrics collectors 

In this step we will use Eclipse MicroProfile Metrics API to equip or microservice with a few metrics collectors. We 
will use annotations `@Timed`, `@Metered` and `@Gauge` to collect metrics on selected methods in `CustomerResource` class.

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@RequestScoped
public class CustomerResource {

    @GET
    @Path("add-sample-names")
    @Timed(name = "add-sample-names-timer")
    public Response addSampleNames() {
        addNewCustomer(new Customer(Database.getCustomers().size(), "Daniel", "Ornelas"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Dennis", "McBride"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Walter", "Wright"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Mitchell", "Kish"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Tracy", "Edwards"));

        return Response.noContent().build();
    }
    
    @DELETE
    @Path("{customerId}")
    @Metered(name = "customer_deleting_meter")
    public Response deleteCustomer(@PathParam("customerId") int customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }

    @Gauge(name = "customer_count_gauge", unit = MetricUnits.NONE)
    private int getCustomerCount() {
        return Database.getCustomers().size();
    }
}
```

Now we will add web instrumentation that monitors requests and responses at a certain endpoint. We will configure it to 
monitor the endpoint `/v1/customers`. We do that by simply adding the following lines to the configuration file 
`config.yaml`:

```yaml
kumuluzee:
    metrics:
        webinstrumentation:
          - name: customersEndpoint
            url-pattern: /v1/customers/*
```

Collected metrics can be accessed at the endpoint `http://localhost:8080/metrics`, which by default returns data in 
Prometheus format. To view metrics data as a JSON object, add request header `Accept` and set it to `application/json`.

More information about KumuluzEE Metrics can be found in the 
[GitHub repository](https://github.com/kumuluz/kumuluzee-metrics).


### Add fault tolerance mechanisms

In this step we will use Eclipse MicroProfile Fault Tolerance API to enable fault tolerance mechanisms. We add 
annotations `@GroupKey`, `@CommandKey`, `@Timeout` and `@CircuitBreaker` to enable circuit breaker on the 
`addNewCustomer` method.

More information about KumuluzEE Fault Tolerance can be found in the 
[GitHub repository](https://github.com/kumuluz/kumuluzee-fault-tolerance). 

### Access the JWT security token 

In this step we will use Eclipse MicroProfile JWT Authentication API to access the JWT token.
 
In order for the extension to work correctly, we must first provide two configuration properties:

```yaml
kumuluzee:
  jwt-auth:
    public-key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnOTgnGBISzm3pKuG8QXMVm6eEuTZx8Wqc8D9gy7vArzyE5QC/bVJNFwlz...
    issuer: http://example.org/auth
```

JWT token can then be injected as a MicroProfile `JsonWebToken` object with the following code:

```java
@Inject
private JsonWebToken principal; 
```

More information about KumuluzEE JWT Authentication can be found in the 
[GitHub repository](https://github.com/kumuluz/kumuluzee-jwt-auth). 

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka-registry&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE Kafka Schema Registry sample&lt;/name&gt;
    &lt;description&gt;Kumuluz EE Kafka usage sample with KumuluzEE and Schema Registry&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-streaming-kafka.version&gt;1.3.0-SNAPSHOT&lt;/kumuluzee-streaming-kafka.version&gt;
        &lt;kumuluzee-logs.version&gt;1.3.0&lt;/kumuluzee-logs.version&gt;

        &lt;kafka.version&gt;2.5.0&lt;/kafka.version&gt;
        &lt;log4j-slf4j.version&gt;2.8.1&lt;/log4j-slf4j.version&gt;

        &lt;avro.version&gt;1.9.2&lt;/avro.version&gt;
        &lt;confluent.version&gt;5.5.0&lt;/confluent.version&gt;
    &lt;/properties&gt;

    &lt;modules&gt;
        &lt;module&gt;kumuluzee-streaming-kafka-registry-producer&lt;/module&gt;
        &lt;module&gt;kumuluzee-streaming-kafka-registry-consumer&lt;/module&gt;
        &lt;module&gt;kumuluzee-streaming-kafka-registry-streams&lt;/module&gt;
    &lt;/modules&gt;

    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;confluent&lt;/id&gt;
            &lt;name&gt;Confluent&lt;/name&gt;
            &lt;url&gt;http://packages.confluent.io/maven/&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;confluent&lt;/id&gt;
            &lt;name&gt;Confluent&lt;/name&gt;
            &lt;url&gt;http://packages.confluent.io/maven/&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;
                &lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;
                &lt;version&gt;${kafka.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
                &lt;artifactId&gt;avro&lt;/artifactId&gt;
                &lt;version&gt;${avro.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.confluent&lt;/groupId&gt;
                &lt;artifactId&gt;kafka-avro-serializer&lt;/artifactId&gt;
                &lt;version&gt;${confluent.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.confluent&lt;/groupId&gt;
                &lt;artifactId&gt;kafka-streams-avro-serde&lt;/artifactId&gt;
                &lt;version&gt;${confluent.version}&lt;/version&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;build&gt;
        &lt;pluginManagement&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
                    &lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;${avro.version}&lt;/version&gt;
                &lt;/plugin&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;io.confluent&lt;/groupId&gt;
                    &lt;artifactId&gt;kafka-schema-registry-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;${confluent.version}&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;schemaRegistryUrls&gt;
                            &lt;param&gt;http://localhost:8081&lt;/param&gt;
                        &lt;/schemaRegistryUrls&gt;
                        &lt;schemaTypes&gt;
                            &lt;pricing-value&gt;AVRO&lt;/pricing-value&gt;&gt;
                        &lt;/schemaTypes&gt;
                    &lt;/configuration&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;test-compatibility&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/plugin&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;generatedSourcesDirectory&gt;src/generated/java&lt;/generatedSourcesDirectory&gt;
                    &lt;/configuration&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;
    &lt;/build&gt;

&lt;/project&gt;
</pre></body></html>




File path: kumuluzee-swagger/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;

&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-logs-log4j2/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="customers"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;!-- Resources (REST) --&gt;
        &lt;Logger name="com.kumuluz.ee.samples.kumuluzee_logs.CustomerResource" level="trace" additivity="false"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Logger&gt;

        &lt;!-- Default logger --&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: kumuluzee-opentracing/orders/src/main/java/com/kumuluz/ee/samples/opentracing/orders/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.orders;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Domen Jeric
 */
public class Database {
    private static List&lt;Order&gt; orders = new ArrayList&lt;Order&gt;();

    public static List&lt;Order&gt; getOrders() {
        return orders;
    }

    public static Order getOrder(String orderId) {
        for (Order order : orders) {
            if (order.getId().equals(orderId))
                return order;
        }

        return null;
    }

    public static void addOrder(Order order) {
        orders.add(order);
    }

    public static void deleteOrder(String orderId) {
        for (Order order : orders) {
            if (order.getId().equals(orderId)) {
                orders.remove(order);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/java/com/kumuluz/ee/samples/kumuluzee_database_schema_migrations_liquibase/LiquibaseResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_database_schema_migrations_liquibase;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

/**
 * @author Din Music
 * @since 3.13.0
 */
@Path("migrations")
@RequestScoped
public class LiquibaseResource {

    @Inject
    private LiquibaseService liquibaseService;

    @POST
    @Path("reset")
    public Response reset() {
        liquibaseService.reset();
        return Response.noContent().build();
    }

    @POST
    @Path("populate")
    public Response populate1() {
        liquibaseService.populate();
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-swagger/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-kubernetes&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;kumuluzee-orders&lt;/artifactId&gt;

    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;orders-api&lt;/module&gt;
        &lt;module&gt;orders-business-logic&lt;/module&gt;
        &lt;module&gt;orders-persistence&lt;/module&gt;
    &lt;/modules&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/delta/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-opentracing-tutorial&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;delta&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE OpenTracing tutorial - delta&lt;/name&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: jax-ws/jax-ws-metro/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JAX-WS SOAP web service sample

&gt; Develop a SOAP web service using standard JAX-WS 2 API and pack it as a KumuluzEE microservice.

The objective of this sample is to show how to develop a SOAP web service using standard JAX-WS 2 API and pack it as a KumuluzEE microservice. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. To develop the SOAP web service, you will use the standard JAX-WS 2.2. Required knowledge: basic familiarity with JAX-WS 2 and basic concepts of SOAP, WSDL and XML.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
   
## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd jax-ws/jax-ws-metro
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* JAX-WS SOAP endpoint - http://localhost:8080/CustomerEndpoint
* JAX-WS SOAP WSDL - http://localhost:8080/CustomerEndpoint?WSDL

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple SOAP service using standard JAX-WS 2.2 API and pack it as a KumuluzEE microservice. 
We will develop a simple Customer SOAP service with the following operation:
* GetCustomers - list of all customers 

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet and JAX-WS)
* Implement the service using standard JAX-WS 2.2 API
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-ws-metro` dependencies:
```xml
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-ws-metro&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Typical approach to the implementation of a SOAP web service is using the Top-Down approach by generating implementation from a WSDL file. To demonstrate KumuluzEE microservice implementation with JAX-WS 2.2 API usage, we will use the Bottom-Up approach in this tutorial. In case you are generating your implementation from a WSDL file, you can skip to point where service is configured in file `sun-jaxws.xml`.

For example, imagine that you are creating a SOAP web service, which returns all customers. First, let us create a sample Java class annotated with JAXB annotations which will hold a single customer, for example:

```java
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "Customer",
        propOrder = {
            "id",
            "firstName",
            "lastName"
        }
)
public class Customer implements Serializable {

    @XmlElement(required = true)
    private String id;
    @XmlElement(required = true)
    private String firstName;
    @XmlElement(required = true)
    private String lastName;

    // TODO: implement get and set methods
}
```

In similar fashion create a Java class that will hold a list of customers:

```java
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "CustomersList",
        propOrder = {
            "customer"
        }
)
public class CustomersList implements Serializable {

    @XmlElement(required = true)
    private List&lt;Customer&gt; customer;

    // TODO: implement get and set methods
}
```

Create Response Java object and corresponding message wrapper:

```java
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "",
        propOrder = {
            "output"
        }
)
@XmlRootElement(name = "GetCustomersResponse")
public class GetCustomersResponse implements Serializable {

    @XmlElement(required = true)
    private GetCustomersResponseMessage output;

    // TODO: implement get and set methods
}
```

```java
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "GetCustomersResponseMessage",
        propOrder = {
            "customers"
        }
)
public class GetCustomersResponseMessage implements Serializable {

    @XmlElement(required = true)
    private CustomersList customers;

    // TODO: implement get and set methods
}
```

Finally, implement the service using JAX-WS annotations:

```java
@WebService(
        targetNamespace = "http://kumuluz.com/samples/jax-ws/customers/v1",
        serviceName = "CustomerEndpoint",
        portName = "CustomerEndpointSOAP"
)
public class CustomerEndpoint {

    @WebMethod(operationName = "GetCustomers", action = "http://kumuluz.com/samples/jax-ws/customers/v1/GetCustomers")
    @WebResult(name = "output")
    @ResponseWrapper(
            localName = "GetCustomersResponse",
            targetNamespace = "http://kumuluz.com/samples/jax-ws/customers/v1",
            className = "com.kumuluz.ee.samples.jaxws.metro.GetCustomersResponse"
    )
    public GetCustomersResponseMessage getCustomers() {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        // TODO: add sample customers to list

        CustomersList customersList = new CustomersList();
        customersList.setCustomer(customers);

        GetCustomersResponseMessage message = new GetCustomersResponseMessage();
        message.setCustomers(customersList);

        return message;
    }
}
```

Customer is a POJO with get and set methods, for example:
```java
public class Customer {

    private String id;

    private String firstName;

    private String lastName;

    // TODO: implement get and set methods
}
```

Create directory `webapp/WEB-INF` in `resources` folder and in this directory file `sun-jaxws.xml`. The file should contain the configuration as 
shown below. Replace the text attribute value `com.kumuluz.ee.samples.jaxws.metro.CustomerEndpoint` with the name of your web service implementation 
class. To modify the URL of your web service, you can change the `url-pattern` attribute.
```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;endpoints xmlns="http://java.sun.com/xml/ns/jax-ws/ri/runtime"
           version="2.0"&gt;
    &lt;endpoint name="WebServiceImpl"
              implementation="com.kumuluz.ee.samples.jaxws.metro.CustomerEndpoint"
              url-pattern="/CustomerEndpoint"/&gt;
&lt;/endpoints&gt;
```

### Run the service

To run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-feature-flags-unleash/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/services/impl/InvoiceServiceImpl.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.jcache.rest.services.impl;

import com.kumuluz.ee.logs.LogManager;
import com.kumuluz.ee.logs.Logger;
import com.kumuluz.ee.samples.jcache.rest.lib.InvoiceData;
import com.kumuluz.ee.samples.jcache.rest.producers.DefaultCache;
import com.kumuluz.ee.samples.jcache.rest.producers.MyCache;
import com.kumuluz.ee.samples.jcache.rest.services.InvoiceService;

import javax.annotation.PostConstruct;
import javax.cache.Cache;
import javax.cache.annotation.CacheKey;
import javax.cache.annotation.CachePut;
import javax.cache.annotation.CacheResult;
import javax.cache.annotation.CacheValue;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.NotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * @author cen1
 * @since 3.6.0
 */
@ApplicationScoped
public class InvoiceServiceImpl implements InvoiceService {

    private static final Logger LOG = LogManager.getLogger(InvoiceServiceImpl.class.getName());

    @DefaultCache
    @Inject
    private Cache&lt;String, InvoiceData&gt; defaultCache;

    @MyCache
    @Inject
    private Cache&lt;String, InvoiceData&gt; myCache;

    private ConcurrentHashMap&lt;String, InvoiceData&gt; db;

    @PostConstruct
    void init() {
        db = new ConcurrentHashMap&lt;&gt;();
        db.put("654321", new InvoiceData("654321"));
        db.put("654322", new InvoiceData("654322"));
        db.put("654323", new InvoiceData("654323"));
        db.put("654324", new InvoiceData("654324"));
        db.put("654325", new InvoiceData("654325"));
    }

    @CachePut(cacheName = "invoices")
    @Override
    public InvoiceData putInvoice(@CacheKey String key, @CacheValue InvoiceData data) {
        LOG.info("putInvoice() put to cache");
        db.put(key, data);
        return data;
    }

    @CacheResult(cacheName = "invoices")
    public InvoiceData getInvoice(@CacheKey String key) {

        LOG.info("getInvoice() Returning non-cached data");

        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        if (db.containsKey(key)) {
            return db.get(key);
        }
        else {
            throw new NotFoundException();
        }
    }

    @Override
    public InvoiceData getInvoiceDefault(String key) {

        if (defaultCache.containsKey(key)) {
            return defaultCache.get(key);
        }
        else {
            LOG.info("getInvoiceDefault() Returning non-cached data");

            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (db.containsKey(key)) {
                defaultCache.put(key, db.get(key));
                return db.get(key);
            }
            else {
                throw new NotFoundException();
            }
        }
    }

    @Override
    public InvoiceData getInvoiceMy(String key) {

        if (myCache.containsKey(key)) {
            return myCache.get(key);
        }
        else {
            LOG.info("getInvoiceMy() Returning non-cached data");

            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (db.containsKey(key)) {
                myCache.put(key, db.get(key));
                return db.get(key);
            }
            else {
                throw new NotFoundException();
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-config-etcd/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.utils.ConfigurationUtil;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                        "\"stringProperty\": \"%s\"," +
                        "\"booleanProperty\": %b," +
                        "\"integerProperty\": %d," +
                        "\"encodedProperty\": \"%s\"" +
                        "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty(),
                properties.getEncodedProperty());

        return Response.ok(response).build();
    }

    @GET
    @Path("/get")
    public Response get() {
        return Response.ok(ConfigurationUtil.getInstance().get("rest-config.string-property").orElse("nope")).build();
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/gamma/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk


</pre></body></html>




File path: microservices-simple/catalogue/src/main/java/com/kumuluz/ee/samples/microservices/simple/CatalogueApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.microservices.simple;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Tilen Faganel
 * @since 2.3.0
 */
@ApplicationPath("/")
public class CatalogueApplication extends Application{
}
</pre></body></html>




File path: kumuluzee-config-etcd/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/master/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-opentracing-tutorial&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;master&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE OpenTracing tutorial - master&lt;/name&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/src/main/java/com.kumuluz.ee.samples.discovery.register/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

import com.kumuluz.ee.discovery.annotations.RegisterService;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Urban Malc
 */
@RegisterService
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: kumuluzee-grpc/grpc-server/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Kumuluzee-grpc sample

## Requirements

In order to run this example you will need the following:
1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the
    following in command line:
    ```bash
   java -version   
    ```
2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the
    following in a command line:
    ```bash
    mvn -version
    ```
3. Git:
    * If you have installed Git, you can check the version by typing the
    following in a command line:
    ```bash
    git --version
    ```

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:
    ```bash
    cd kumuluzee-grpc-sample/grpc-server
    mvn clean package
    ```
2. Start local PostgreSQL DB:
    ```bash
    docker run -d --name postgres -e POSTGRES_DB=users -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:latest
    ```
3. Run the sample:
    * Uber-jar:
    ```bash
    java -jar target/${project.build.finalName}.jar
    ```
    
    * Exploded:
    ```bash
    java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```

The grpc server should be running on port specified in
the config.yml file (default 8443). To test if server is responding use provided
client sample:
* [grpc-client](../grpc-client)

## Tutorial

This tutorial will guide you through the steps required to initialize gRPC server
in KumuluzEE microservice.

### Add Maven dependencies

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-cdi-weld`,
 `kumuluzee-jpa-eclipselink`, `postgresql` and `kumuluzee-grpc` dependency to the sample:

```xml
&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;${postgres.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.grpc&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-grpc&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.grpc.version}&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar,
`protobuf-maven-plugin` plugin to generate java classes from `.proto` files and 
`os-maven-plugin` extension to let maven discover your OS so it can download the appropriate
compiler for Protobuf files.

```xml
&lt;build&gt;
    &lt;extensions&gt;
        &lt;extension&gt;
            &lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;
            &lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.5.0.Final&lt;/version&gt;
        &lt;/extension&gt;
    &lt;/extensions&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;0.5.1&lt;/version&gt;
            &lt;configuration&gt;
                &lt;protocArtifact&gt;com.google.protobuf:protoc:3.5.1-1:exe:${os.detected.classifier}&lt;/protocArtifact&gt;
                &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;
                &lt;pluginArtifact&gt;io.grpc:protoc-gen-grpc-java:1.14.0:exe:${os.detected.classifier}&lt;/pluginArtifact&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;compile&lt;/goal&gt;
                        &lt;goal&gt;compile-custom&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

If you prefer exploded version change `goal` in `kumuluzee-maven-plugin` to `copy-dependencies`.

### Define proto file

Define `.proto` file with service and messages definition. More about Protobuf files
can be found on [Google Developers](https://developers.google.com/protocol-buffers/). Place your proto files
in "proto" directory so the maven plugin can detect it and compile correspondent Java classes.

```proto
syntax = "proto3";
option java_package = "grpc";

service User {
    rpc getUser(UserRequest) returns (UserResponse) {};
}

message UserRequest {
    int32 id = 1;
}

message UserResponse {
    int32 id = 1;
    string name = 2;
    string surname = 3;
}
```

### Implement entity and service bean

Implement entity object that holds data about `Account`:
```java
package entity;

import javax.persistence.*;

@Entity
@Table(name = "account")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String name;
    private String surname;

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```

Service bean that returns details for account with provided id:

```java
package beans;

import entity.User;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.logging.Logger;

@ApplicationScoped
public class UserBean {

    private static final Logger logger = Logger.getLogger(UserBean.class.getName());

    @PersistenceContext(name = "sample-user-jpa")
    private EntityManager em;

    @PostConstruct
    private void init() {
        logger.info("UserBean initialized");
    }

    public User getUser(Integer id) {
        return em.find(User.class, id);
    }

}
```

Make sure that `META-INF/persistence.xml` and `META-INF/beans.xml` files are present.

persistence.xml
```xml
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="sample-user-jpa" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/UsersDB&lt;/jta-data-source&gt;

        &lt;class&gt;entity.User&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source" value="sql-script/init-db.sql"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
```

beans.xml
```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;
```

Database initialization sql script:

`sql-script/init-db.sql`
```sql
INSERT INTO account (name, surname) VALUES ('Primoz', 'Hrovat');
```

### Implement services

You should implement services defined in your `.proto` files.

Example:
```java
@GrpcService(interceptors = {
        @GrpcInterceptor(name = "grpc.interceptors.HeaderInterceptor2"),
        @GrpcInterceptor(name = "grpc.interceptors.HeaderInterceptor")},
        secured = true)
public class UserServiceImpl extends UserGrpc.UserImplBase {

    private static final Logger logger = Logger.getLogger(UserServiceImpl.class.getName());

    private UserBean userBean;

    @Override
    public void getUser(UserService.UserRequest request, StreamObserver&lt;UserService.UserResponse&gt; responseObserver) {

        userBean = CDI.current().select(UserBean.class).get();
        User user = userBean.getUser(request.getId());
        UserService.UserResponse response;

        if (user != null) {
            response = UserService.UserResponse.newBuilder()
                    .setId(user.getId())
                    .setName(user.getName())
                    .setSurname(user.getSurname())
                    .build();
            responseObserver.onNext(response);
        }

        responseObserver.onCompleted();
    }
}
```

And annotate it with `@GrpcService` so KumuluzEE can automatically discover and bind your
implementation to server. If using server interceptors they should be provided for 
each service with their full class name inside `@GrpcService` annotation using `@GrpcInterceptor`.
Each service can be additionally secured with JWT token with `secured` value set to true.

**NOTE:** CDI injection currenty doesn't work inside service implementations. Lookup must
be done manually using
```java
CDI.current().select(UserBean.class).get();
```

### Add configuration

Add required configuration (database, grpc):
```yaml
kumuluzee:
  name: "grpc-server"
  server:
    http:
      port: 8080
  datasources:
    - jndi-name: jdbc/UsersDB
      connection-url: jdbc:postgresql://192.168.99.100:5432/users
      username: postgres
      password: postgres
  grpc:
    server:
      url: localhost
      http:
        port: 8443
      auth:
        public-key: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDW6Angsf0Ry+GFD5HPstdcuaHJU5KhpT+gkzCCx7zZAbKRaEQexaTA9nPXK2Uzk2JqWTbZXSQYX2kBzYeiiedMpW6wvTaZWL9QhGjEnA9o97oNV1G5wQHKL/8FsvLXqt/81BCeZzWPDGvLNuU9l0qK3/xXL3efaZYPsZkB2AyZiQIDAQAB
        issuer: http://localhost
```

### Build the microservice and run it

To build the microservice and run the example use the commands as described in previous section.


</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/generated/java/com/kumuluz/ee/samples/kafka/registry/avro/lib/Pricing.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kumuluz.ee.samples.kafka.registry.avro.lib;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Pricing extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8159164123532769464L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pricing\",\"namespace\":\"com.kumuluz.ee.samples.kafka.registry.avro.lib\",\"fields\":[{\"name\":\"price\",\"type\":\"string\"},{\"name\":\"priceExTax\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"string\"},{\"name\":\"taxAmount\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder&lt;Pricing&gt; ENCODER =
      new BinaryMessageEncoder&lt;Pricing&gt;(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder&lt;Pricing&gt; DECODER =
      new BinaryMessageDecoder&lt;Pricing&gt;(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder&lt;Pricing&gt; getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder&lt;Pricing&gt; getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder&lt;Pricing&gt; createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder&lt;Pricing&gt;(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Pricing to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Pricing from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Pricing instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Pricing fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence price;
  @Deprecated public java.lang.CharSequence priceExTax;
  @Deprecated public java.lang.CharSequence basePrice;
  @Deprecated public java.lang.CharSequence taxAmount;
  @Deprecated public java.lang.CharSequence description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use &lt;code&gt;newBuilder()&lt;/code&gt;.
   */
  public Pricing() {}

  /**
   * All-args constructor.
   * @param price The new value for price
   * @param priceExTax The new value for priceExTax
   * @param basePrice The new value for basePrice
   * @param taxAmount The new value for taxAmount
   * @param description The new value for description
   */
  public Pricing(java.lang.CharSequence price, java.lang.CharSequence priceExTax, java.lang.CharSequence basePrice, java.lang.CharSequence taxAmount, java.lang.CharSequence description) {
    this.price = price;
    this.priceExTax = priceExTax;
    this.basePrice = basePrice;
    this.taxAmount = taxAmount;
    this.description = description;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return price;
    case 1: return priceExTax;
    case 2: return basePrice;
    case 3: return taxAmount;
    case 4: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: price = (java.lang.CharSequence)value$; break;
    case 1: priceExTax = (java.lang.CharSequence)value$; break;
    case 2: basePrice = (java.lang.CharSequence)value$; break;
    case 3: taxAmount = (java.lang.CharSequence)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.CharSequence getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.CharSequence value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'priceExTax' field.
   * @return The value of the 'priceExTax' field.
   */
  public java.lang.CharSequence getPriceExTax() {
    return priceExTax;
  }


  /**
   * Sets the value of the 'priceExTax' field.
   * @param value the value to set.
   */
  public void setPriceExTax(java.lang.CharSequence value) {
    this.priceExTax = value;
  }

  /**
   * Gets the value of the 'basePrice' field.
   * @return The value of the 'basePrice' field.
   */
  public java.lang.CharSequence getBasePrice() {
    return basePrice;
  }


  /**
   * Sets the value of the 'basePrice' field.
   * @param value the value to set.
   */
  public void setBasePrice(java.lang.CharSequence value) {
    this.basePrice = value;
  }

  /**
   * Gets the value of the 'taxAmount' field.
   * @return The value of the 'taxAmount' field.
   */
  public java.lang.CharSequence getTaxAmount() {
    return taxAmount;
  }


  /**
   * Sets the value of the 'taxAmount' field.
   * @param value the value to set.
   */
  public void setTaxAmount(java.lang.CharSequence value) {
    this.taxAmount = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Creates a new Pricing RecordBuilder.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder() {
    return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
  }

  /**
   * Creates a new Pricing RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder(other);
    }
  }

  /**
   * Creates a new Pricing RecordBuilder by copying an existing Pricing instance.
   * @param other The existing instance to copy.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder(other);
    }
  }

  /**
   * RecordBuilder for Pricing instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase&lt;Pricing&gt;
    implements org.apache.avro.data.RecordBuilder&lt;Pricing&gt; {

    private java.lang.CharSequence price;
    private java.lang.CharSequence priceExTax;
    private java.lang.CharSequence basePrice;
    private java.lang.CharSequence taxAmount;
    private java.lang.CharSequence description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.priceExTax)) {
        this.priceExTax = data().deepCopy(fields()[1].schema(), other.priceExTax);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[2].schema(), other.basePrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.taxAmount)) {
        this.taxAmount = data().deepCopy(fields()[3].schema(), other.taxAmount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Pricing instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priceExTax)) {
        this.priceExTax = data().deepCopy(fields()[1].schema(), other.priceExTax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[2].schema(), other.basePrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.taxAmount)) {
        this.taxAmount = data().deepCopy(fields()[3].schema(), other.taxAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setPrice(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearPrice() {
      price = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'priceExTax' field.
      * @return The value.
      */
    public java.lang.CharSequence getPriceExTax() {
      return priceExTax;
    }


    /**
      * Sets the value of the 'priceExTax' field.
      * @param value The value of 'priceExTax'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setPriceExTax(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.priceExTax = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'priceExTax' field has been set.
      * @return True if the 'priceExTax' field has been set, false otherwise.
      */
    public boolean hasPriceExTax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'priceExTax' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearPriceExTax() {
      priceExTax = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'basePrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getBasePrice() {
      return basePrice;
    }


    /**
      * Sets the value of the 'basePrice' field.
      * @param value The value of 'basePrice'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setBasePrice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.basePrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'basePrice' field has been set.
      * @return True if the 'basePrice' field has been set, false otherwise.
      */
    public boolean hasBasePrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'basePrice' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearBasePrice() {
      basePrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxAmount() {
      return taxAmount;
    }


    /**
      * Sets the value of the 'taxAmount' field.
      * @param value The value of 'taxAmount'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setTaxAmount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.taxAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'taxAmount' field has been set.
      * @return True if the 'taxAmount' field has been set, false otherwise.
      */
    public boolean hasTaxAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'taxAmount' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearTaxAmount() {
      taxAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pricing build() {
      try {
        Pricing record = new Pricing();
        record.price = fieldSetFlags()[0] ? this.price : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.priceExTax = fieldSetFlags()[1] ? this.priceExTax : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.basePrice = fieldSetFlags()[2] ? this.basePrice : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.taxAmount = fieldSetFlags()[3] ? this.taxAmount : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter&lt;Pricing&gt;
    WRITER$ = (org.apache.avro.io.DatumWriter&lt;Pricing&gt;)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader&lt;Pricing&gt;
    READER$ = (org.apache.avro.io.DatumReader&lt;Pricing&gt;)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.price);

    out.writeString(this.priceExTax);

    out.writeString(this.basePrice);

    out.writeString(this.taxAmount);

    out.writeString(this.description);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);

      this.priceExTax = in.readString(this.priceExTax instanceof Utf8 ? (Utf8)this.priceExTax : null);

      this.basePrice = in.readString(this.basePrice instanceof Utf8 ? (Utf8)this.basePrice : null);

      this.taxAmount = in.readString(this.taxAmount instanceof Utf8 ? (Utf8)this.taxAmount : null);

      this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);

    } else {
      for (int i = 0; i &lt; 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);
          break;

        case 1:
          this.priceExTax = in.readString(this.priceExTax instanceof Utf8 ? (Utf8)this.priceExTax : null);
          break;

        case 2:
          this.basePrice = in.readString(this.basePrice instanceof Utf8 ? (Utf8)this.basePrice : null);
          break;

        case 3:
          this.taxAmount = in.readString(this.taxAmount instanceof Utf8 ? (Utf8)this.taxAmount : null);
          break;

        case 4:
          this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










</pre></body></html>




File path: kumuluzee-logs-jul/src/main/resources/logging.properties
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Default global logging level
.level=FINER

# ConsoleHandler definition
handlers=java.util.logging.ConsoleHandler

# ConsoleHandler configuration settings
java.util.logging.ConsoleHandler.level=FINER
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/resources/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"&gt;

&lt;/web-app&gt;</pre></body></html>




File path: bean-validation/src/main/java/com/kumuluz/ee/samples/validation/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.validation;

import javax.validation.constraints.*;
import java.util.Date;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    @NotNull
    private String id;
    @NotNull
    @Size(min = 1, max = 25)
    private String firstName;
    @NotNull
    @Size(min = 1, max = 50)
    private String lastName;
    @NotNull
    @Min(18)
    @Max(99)
    private int age;
    @NotNull
    @Past
    private Date birthday;
    @NotNull
    @AssertTrue
    private boolean active;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }
}
</pre></body></html>




File path: kumuluzee-swagger/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Swagger sample

&gt; Develop a microservice application with support for Swagger specification.

The objective of this sample is to demonstrate how to document API with Swagger/OpenAPI v2 compliant annotations. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. 
To enable support for Swagger annotations you will use kumuluzee-swagger extension. 
Required knowledge: basic familiarity with JAX-RS.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-swagger
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* JAX-RS - http://localhost:8080/v1/customers

### Swagger specification

OpenAPI specification for APIs can be access on the following URL:
* API v1 - http://localhost:8080/api-specs/v1/swagger.json

Swagger specification URL always follows the following URL template:
* http://&lt;-hostname-&gt;:&lt;-port-&gt;/api-specs/&lt;jax-rs application-base-path&gt;/swagger.[json|yaml]

## Tutorial

This tutorial will guide you through the steps required to document JAX-RS application using Swagger annotations. 

Package contains two versions of JAX-RS application CustomersAPI.

**CustomersAPI v1**
JAX-RS resource:
* GET http://localhost:8080/v1/customers - list of all customers.

OpenAPI specification:
* GET http://localhost:8080/api-specs/v1/swagger.json


We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (OpenAPI)
* Implement the JAX-RS resource using standard JAX-RS API
* Use Swagger annotations to document API
* Build the microservice
* Run it


### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-swagger` dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.swagger&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-swagger&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-swagger.varsion}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Tutorial for the implementation of JAX-RS is described in **jax-rs** sample.
 
### Documenting API 

KumuluzEE-Swagger extension brings Swagger compliant annotations for documenting APIs.

#### Documenting CustomersAPI v1

##### Application class

```java
@ApplicationPath("v1")
@SwaggerDefinition(info = @Info(title = "CustomersAPI", version = "v1.0.0"), host = "localhost:8080")
public class CustomerApplication extends Application {

}
```

##### Resources

```java
@Path("customer")
@Api
@Produces(MediaType.APPLICATION_JSON)
public class CustomerResource {

    @GET
    @ApiOperation(value = "Get customers list", tags = {"customers"}, notes = "Returns a list of customers.",
            authorizations = {
                    @Authorization(value = "application")})
    @ApiResponses(value = {
            @ApiResponse(
                    message = "List of customers",
                    code = 200,
                    response = Customer.class,
                    responseContainer = "List")
    })
    public Response getCustomers() {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");

        customers.add(c);

        return Response.status(Response.Status.OK).entity(customers).build();
    }
}
```
 
### Configure Swagger extension
 
By default Swagger extension will expose API specification, however this can be disabled by property **kumuluzee.swagger.spec.enabled** in config.

```yaml
kumuluzee:
  swagger:
    spec:
      enabled: false
```

#### Swagger-UI

To enable Swagger UI add **kumuluzee-swagger-ui** dependency to your project: 

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.swagger&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-swagger-ui&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-swagger.varsion}&lt;/version&gt;
&lt;/dependency&gt;
```

In case you want to disable Swagger UI you can set the following property:

```yaml
kumuluzee:
  swagger:
    ui:
      enabled: false
```

**Swagger-UI** is available at:
http://localhost:8080/api-specs/ui

If serving of the API specification is disabled the Swagger-UI will not be available.

### Runtime configuration
By default api-specs will be generated and exposed on /api-specs url. To disable swagger definitions and UI in runtime you can use configuration property **kumuluzee.swagger.enabled** and set it to false (see example in **config.yaml**).


### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/exceptionmappers/NotFoundExceptionMapper.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.exceptionmappers;


import com.kumuluz.ee.samples.tutorial.customers.api.v1.dtos.Error;

import javax.enterprise.context.ApplicationScoped;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

@Provider
@ApplicationScoped
public class NotFoundExceptionMapper implements ExceptionMapper&lt;NotFoundException&gt; {

    @Override
    public Response toResponse(NotFoundException e) {

        Error error = new Error();
        error.setStatus(404);
        error.setCode("resource.not.found");
        error.setMessage(e.getMessage());

        return Response
                .status(Response.Status.NOT_FOUND)
                .entity(error)
                .build();
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/java/com/kumuluz/ee/samples/jaxws/cxf/interceptors/WsHandler.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxws.cxf.interceptors;

import javax.xml.namespace.QName;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import java.util.Collections;
import java.util.Set;
import java.util.logging.Logger;

/**
 * @author gpor89
 * @since 3.0.0
 */
public class WsHandler implements SOAPHandler&lt;SOAPMessageContext&gt; {

    private static final Logger LOG = Logger.getLogger(WsHandler.class.getName());

    @Override
    public Set&lt;QName&gt; getHeaders() {
        return Collections.emptySet();
    }

    @Override
    public boolean handleMessage(SOAPMessageContext messageContext) {
        Object soapAction = messageContext.get("SOAPAction");

        LOG.info("Soap action: " + soapAction);

        return true;
    }

    @Override
    public boolean handleFault(SOAPMessageContext messageContext) {
        return true;
    }

    @Override
    public void close(MessageContext messageContext) {
    }

}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/master/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/master/Application.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.master;

import javax.ws.rs.ApplicationPath;

@ApplicationPath("v1")
public class Application extends javax.ws.rs.core.Application {
}
</pre></body></html>




File path: jax-rs/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jax-rs&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JAX-RS sample&lt;/name&gt;
    &lt;description&gt;JAX-RS usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/src/main/java/com/kumuluz/ee/samples/kafka/consumer/ConsumerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">

package com.kumuluz.ee.samples.kafka.consumer;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Matija Kljun
 */
@ApplicationPath("v1")
public class ConsumerApplication extends Application {
}</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/etcd.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: etcd-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: etcd
    spec:
      containers:
      - command:
        - /usr/local/bin/etcd
        - --name
        - etcd0
        - --initial-advertise-peer-urls
        - http://etcd:2380
        - --listen-peer-urls
        - http://0.0.0.0:2380
        - --listen-client-urls
        - http://0.0.0.0:2379
        - --advertise-client-urls
        - http://etcd:2379
        - --initial-cluster-state
        - new
        - -cors
        - "*"
        - --data-dir
        - /etcd-data
        image: quay.io/coreos/etcd:latest
        name: etcd
        ports:
        - containerPort: 2379
          name: client
          protocol: TCP
        - containerPort: 2380
          name: server
          protocol: TCP
        volumeMounts:
          - mountPath: /etcd-data
            name: etcddata
      volumes:
        - name: etcddata
          emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: etcd
spec:
  type: NodePort
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  - name: server
    port: 2380
    protocol: TCP
    targetPort: 2380
  selector:
    app: etcd
</pre></body></html>




File path: kumuluzee-graphql-advanced/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk

ObjectStore


</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/java/beans/UserBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package beans;

import entity.User;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.logging.Logger;

@ApplicationScoped
public class UserBean {

    private static final Logger logger = Logger.getLogger(UserBean.class.getName());

    @PersistenceContext(name = "sample-user-jpa")
    private EntityManager em;

    @PostConstruct
    private void init() {
        logger.info("UserBean initialized");
    }

    public User getUser(Integer id) {
        return em.find(User.class, id);
    }

}
</pre></body></html>




File path: kumuluzee-logs-fluentd/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_logs;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */

public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/src/main/java/com/kumuluz/ee/samples/graphql_simple/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.graphql_simple;

import org.eclipse.microprofile.graphql.GraphQLApi;
import org.eclipse.microprofile.graphql.Mutation;
import org.eclipse.microprofile.graphql.Name;
import org.eclipse.microprofile.graphql.Query;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@GraphQLApi
public class CustomerResource {

    @Inject
    private CustomerService customerBean;

    @Query
    public List&lt;Customer&gt; getAllCustomers() {
       return customerBean.getCustomers();
    }

    @Query
    public Customer getCustomer(@Name("customerId") String customerId) {
        return customerBean.getCustomer(customerId);
    }

    @Mutation
    public Customer addNewCustomer(@Name("customer") Customer customer) {
        customerBean.saveCustomer(customer);
        return customer;
    }

    @Mutation
    public Boolean deleteCustomer(@Name("customerId") String customerId) {
        return customerBean.deleteCustomer(customerId);
    }
}
</pre></body></html>




File path: kumuluzee-logs-jul/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
	   bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/java/com/kumuluz/ee/samples/amqp/rabbitmq/messaging/ExampleObject.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.amqp.rabbitmq.messaging;

import java.io.Serializable;

/**
 * @author Blaž Mrak
 * @since 3.2.0
 */

public class ExampleObject implements Serializable {

    private String content;
    private int length;

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
        this.length = content.length();
    }

    public int getLength() {
        return this.length;
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/java/com/kumuluz/ee/samples/jaxws/cxf/interceptors/WsInterceptor.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxws.cxf.interceptors;

import javax.annotation.Resource;
import javax.interceptor.AroundInvoke;
import javax.interceptor.InvocationContext;
import javax.xml.ws.WebServiceContext;
import java.util.logging.Logger;

/**
 * @author gpor89
 * @since 3.0.0
 */
public class WsInterceptor {

    private static final Logger LOG = Logger.getLogger(WsInterceptor.class.getName());

    @Resource(name = "wsContext")
    private WebServiceContext webServiceContext;

    @AroundInvoke
    public Object intercept(InvocationContext context) throws Exception {

        Object soapAction = webServiceContext.getMessageContext().get("SOAPAction");

        LOG.info("Soap action: " + soapAction);

        return context.proceed();
    }
}
</pre></body></html>




File path: kumuluzee-config-etcd/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigurationEventHandler.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.utils.ConfigurationUtil;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import java.util.logging.Logger;

/**
 * @author Jan Meznarič
 * @since 2.3.0
 */
@ApplicationScoped
public class ConfigurationEventHandler {

    private static final Logger log = Logger.getLogger(ConfigurationEventHandler.class.getName());

    public void init(@Observes @Initialized(ApplicationScoped.class) Object init) {

        String watchedKey = "rest-config.maintenance";

        ConfigurationUtil.getInstance().subscribe(watchedKey, (String key, String value) -&gt; {

            if (watchedKey.equals(key)) {

                if ("true".equals(value.toLowerCase())) {
                    log.info("Maintenance mode enabled.");
                } else {
                    log.info("Maintenance mode disabled.");
                }

            }

        });
    }

}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-persistence/src/main/resources/sql-scripts/init-customers.sql
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">INSERT INTO customer (id, date_of_birth, first_name, last_name, address) VALUES (1, TIMESTAMP '2006-01-01 15:36:38', 'James', 'Smith', '32 Threadneedle Street, London');
INSERT INTO customer (id, date_of_birth, first_name, last_name, address) VALUES (2, TIMESTAMP '2009-03-17 15:36:38', 'John', 'Williams', '21 Foster Lane, London');
INSERT INTO customer (id, date_of_birth, first_name, last_name, address) VALUES (3, TIMESTAMP '2013-11-29 15:36:38', 'Robert', 'Jones', '11 Ludgate Hill, London');</pre></body></html>




File path: https/src/main/java/jaxrs/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package jaxrs;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-config-mp/src/main/java/com/kumuluz/ee/samples/models/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.models;

/**
 * @author Urban Malc
 * @author Jan Meznarič
 * @since 2.5.0
 */
public class Customer {

    private String name;
    private String surname;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public static Customer parse(String s) {
        String[] spl = s.split(":");

        if (spl.length == 2) {
            Customer c = new Customer();
            c.setName(spl[0]);
            c.setSurname(spl[1]);

            return c;
        }

        return null;
    }

    @Override
    public String toString() {
        return "Customer with name " + name + " and surname " + surname;
    }
}
</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/RestApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jcache.rest;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author cen1
 * @since 3.6.0
 */
@ApplicationPath("/")
public class RestApplication extends Application {
}
</pre></body></html>




File path: websocket/src/main/resources/webapp/index.html
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
    &lt;title&gt;Websocket sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Websocket sample&lt;/h1&gt;
    &lt;div style="text-align: center;"&gt;
        &lt;form action=""&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        Responses
                        &lt;br/&gt;
                        &lt;textarea readonly="true" rows="6" cols="50" id="responseField"&gt;&lt;/textarea&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        &lt;input id="textField" name="name" type="text" placeholder="Enter name ..."&gt;
                        &lt;input onclick="sendMessage();" value="Send" type="button"&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/form&gt;
    &lt;/div&gt;
    &lt;br/&gt;
    &lt;div id="output"&gt;&lt;/div&gt;
    &lt;script language="javascript" type="text/javascript" src="websocket.js"&gt;&lt;/script&gt;
&lt;/body&gt;</pre></body></html>




File path: microservices-simple/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;
    &lt;modules&gt;
        &lt;module&gt;models&lt;/module&gt;
        &lt;module&gt;catalogue&lt;/module&gt;
        &lt;module&gt;orders&lt;/module&gt;
    &lt;/modules&gt;

    &lt;artifactId&gt;microservices-simple&lt;/artifactId&gt;

    &lt;name&gt;Simple microservices sample with KumuluzEE&lt;/name&gt;
    &lt;description&gt;Two simple microservices sample using KumuluzEE using a shared database module&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

&lt;/project&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-business-logic/src/main/java/com/kumuluz/ee/samples/tutorial/customers/cdi/CustomersBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.cdi;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kumuluz.ee.discovery.annotations.DiscoverService;
import com.kumuluz.ee.fault.tolerance.annotations.*;
import com.kumuluz.ee.logs.LogManager;
import com.kumuluz.ee.logs.Logger;
import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;
import com.kumuluz.ee.samples.tutorial.customers.Customer;
import com.kumuluz.ee.samples.tutorial.customers.cdi.configuration.RestProperties;
import com.kumuluz.ee.samples.tutorial.orders.Order;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.eclipse.microprofile.faulttolerance.CircuitBreaker;
import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Timeout;

import javax.annotation.PostConstruct;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.ws.rs.InternalServerErrorException;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.UriInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


@RequestScoped
@GroupKey("orders")
public class CustomersBean {

    private Logger log = LogManager.getLogger(CustomersBean.class.getName());

    @PersistenceContext(unitName = "customers-jpa")
    private EntityManager em;

    private ObjectMapper objectMapper;

    private HttpClient httpClient;

    @Inject
    @DiscoverService(value = "order-service", environment = "dev", version = "*")
    private Optional&lt;String&gt; basePath;

    @Inject
    private RestProperties restProperties;

    @Inject
    private CustomersBean customersBean;

    @PostConstruct
    private void init() {
        httpClient = HttpClientBuilder.create().build();
        objectMapper = new ObjectMapper();
    }

    public List&lt;Customer&gt; getCustomers() {

        Query query = em.createNamedQuery("Customer.getAll", Customer.class);

        return query.getResultList();

    }

    public List&lt;Customer&gt; getCustomersFilter(UriInfo uriInfo) {

        QueryParameters queryParameters = QueryParameters.query(uriInfo.getRequestUri().getQuery()).defaultOffset(0)
                .build();

        List&lt;Customer&gt; customers = JPAUtils.queryEntities(em, Customer.class, queryParameters);

        return customers;
    }

    public Customer getCustomer(String customerId) {

        Customer customer = em.find(Customer.class, customerId);

        if (customer == null) {
            throw new NotFoundException();
        }

        if (restProperties.isOrderServiceEnabled()) {
            List&lt;Order&gt; orders = customersBean.getOrders(customerId);
            customer.setOrders(orders);
        }

        return customer;
    }

    public Customer createCustomer(Customer customer) {

        try {
            beginTx();
            em.persist(customer);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return customer;
    }

    public Customer putCustomer(String customerId, Customer customer) {

        Customer c = em.find(Customer.class, customerId);

        if (c == null) {
            return null;
        }

        try {
            beginTx();
            customer.setId(c.getId());
            customer = em.merge(customer);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return customer;
    }

    public boolean deleteCustomer(String customerId) {

        Customer customer = em.find(Customer.class, customerId);

        if (customer != null) {
            try {
                beginTx();
                em.remove(customer);
                commitTx();
            } catch (Exception e) {
                rollbackTx();
            }
        } else
            return false;

        return true;
    }

    @CircuitBreaker(failureRatio = 0.3)
    @Fallback(fallbackMethod = "getOrdersFallback")
    @CommandKey("http-get-order")
    @Timeout(value = 500)
    public List&lt;Order&gt; getOrders(String customerId) {

        if (basePath.isPresent()) {
            try {
                HttpGet request = new HttpGet(basePath.get() + "/v1/orders?where=customerId:EQ:" + customerId);
                HttpResponse response = httpClient.execute(request);

                int status = response.getStatusLine().getStatusCode();

                if (status &gt;= 200 &amp;&amp; status &lt; 300) {
                    HttpEntity entity = response.getEntity();

                    if (entity != null)
                        return getObjects(EntityUtils.toString(entity));
                } else {
                    String msg = "Remote server '" + basePath.get() + "' is responded with status " + status + ".";
                    log.error(msg);
                    throw new InternalServerErrorException(msg);
                }

            } catch (IOException e) {
                String msg = e.getClass().getName() + " occured: " + e.getMessage();
                log.error(msg);
                throw new InternalServerErrorException(msg);
            }
        } else {
            log.error("Orders service not available");
        }
        return new ArrayList&lt;&gt;();
    }

    public List&lt;Order&gt; getOrdersFallback(String customerId) {
        return new ArrayList&lt;&gt;();
    }

    private List&lt;Order&gt; getObjects(String json) throws IOException {
        return json == null ? new ArrayList&lt;&gt;() : objectMapper.readValue(json,
                objectMapper.getTypeFactory().constructCollectionType(List.class, Order.class));
    }

    private void beginTx() {
        if (!em.getTransaction().isActive())
            em.getTransaction().begin();
    }

    private void commitTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().commit();
    }

    private void rollbackTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().rollback();
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://192.168.99.100:5432/customer
      username: postgres
      password: postgres
      pool:
        max-size: 20
  config:
    etcd:
      hosts: http://192.168.99.100:2379
  discovery:
    etcd:
      hosts: http://192.168.99.100:2379
  metrics:
    web-instrumentation:
      - name: customers-endpoint
        url-pattern: /v1/customers/*
  logs:
    config-file:
      '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
       &lt;Configuration name="tutorial-logging"&gt;
           &lt;Appenders&gt;
               &lt;Console name="console" target="SYSTEM_OUT"&gt;
                   &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
               &lt;/Console&gt;

               &lt;!-- A socket definition for sending logs into Logstash using TCP and JSON format.--&gt;
               &lt;!--&lt;Socket name="logstash" host="192.168.99.100" port="5043" protocol="tcp"&gt;
                   &lt;JSONLayout complete="false" compact="true" eventEol="true" charset="UTF-8" properties="true"/&gt;
               &lt;/Socket&gt;--&gt;

           &lt;/Appenders&gt;
           &lt;Loggers&gt;
               &lt;!-- Default logger --&gt;
               &lt;Root level="trace"&gt;
                   &lt;AppenderRef ref="console"/&gt;
                   &lt;AppenderRef ref="logstash"/&gt;
               &lt;/Root&gt;
           &lt;/Loggers&gt;
       &lt;/Configuration&gt;'
  security:
    keycloak:
      json: '{
               "realm": "customers-realm",
               "bearer-only": true,
               "auth-server-url": "http://192.168.99.100:8082/auth",
               "ssl-required": "external",
               "resource": "customers-api"
             }'
rest-properties:
  external-dependencies:
    order-service:
      enabled: true</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-persistence/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-tutorial-customers&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;customers-persistence&lt;/artifactId&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
            &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-rest-client/src/main/java/com/kumuluz/ee/samples/kumuluzee_rest_client/rest/RestResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_rest_client.rest;

import com.kumuluz.ee.rest.client.mp.integrations.KeeRestParameters;
import com.kumuluz.ee.rest.enums.FilterOperation;
import com.kumuluz.ee.samples.kumuluzee_rest_client.api.CustomerApi;
import com.kumuluz.ee.samples.kumuluzee_rest_client.api.SensitiveDataResponseMapper;
import com.kumuluz.ee.samples.kumuluzee_rest_client.entities.Customer;
import org.eclipse.microprofile.rest.client.RestClientBuilder;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutionException;

/**
 * @author Urban Malc
 * @since 3.1.0
 */
@RequestScoped
@Path("operations")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class RestResource {

    @Inject
    @RestClient
    private CustomerApi customerApi;

    @GET
    public Response getAllCustomers() {
        return Response.ok(customerApi.getAllCustomers(null)).build();
    }

    @GET
    @Path("filter")
    public Response getCustomersWhoseNamesStartWithJ() throws MalformedURLException {
        KeeRestParameters parameters = new KeeRestParameters.KeeRestParametersBuilder()
                .addFilter("firstName", FilterOperation.LIKE,"J%").build();

        CustomerApi customerApi = RestClientBuilder.newBuilder()
                .baseUrl(new URL("http://localhost:8080/v1"))
                .build(CustomerApi.class);

        List&lt;Customer&gt; JCustomers = customerApi.getAllCustomers(parameters);
        return Response.ok(JCustomers).build();
    }

    @GET
    @Path("batch")
    public Response createBatchCustomers() {
        String[] ids = {"1", "2", "3"};
        String[] firstNames = {"Jonh", "Mary", "Joe"};
        String[] lastNames = {"Doe", "McCallister", "Green"};

        for (int i = 0; i &lt; ids.length; i++) {
            Customer c = new Customer();
            c.setId(ids[i]);
            c.setFirstName(firstNames[i]);
            c.setLastName(lastNames[i]);

            customerApi.createCustomer(c);
        }

        return Response.noContent().build();
    }

    @GET
    @Path("batchAsynch")
    public Response createBatchCustomersAsynch() {
        String[] ids = {"1", "2", "3"};
        String[] firstNames = {"Jonh", "Mary", "Joe"};
        String[] lastNames = {"Doe", "McCallister", "Green"};

        List&lt;CompletionStage&lt;Void&gt;&gt; requests = new LinkedList&lt;&gt;();

        for (int i = 0; i &lt; ids.length; i++) {
            Customer c = new Customer();
            c.setId(ids[i]);
            c.setFirstName(firstNames[i]);
            c.setLastName(lastNames[i]);

            requests.add(customerApi.createCustomerAsynch(c));
        }

        boolean hasError = false;

        for (CompletionStage&lt;Void&gt; cs : requests) {
            try {
                cs.toCompletableFuture().get();
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
                hasError = true;
            }
        }

        if (hasError) {
            return Response.serverError().build();
        }

        return Response.noContent().build();
    }

    @GET
    @Path("{cId}")
    public Response getSingleMasked(@PathParam("cId") String customerId) throws MalformedURLException {

        CustomerApi programmaticLookupApi = RestClientBuilder.newBuilder()
                .baseUrl(new URL("http://localhost:8080/v1"))
                .register(SensitiveDataResponseMapper.class)
                .build(CustomerApi.class);

        Customer c = programmaticLookupApi.getCustomer(customerId);
        c.setFirstName(c.getFirstName().substring(0, 1) + getStars(c.getFirstName().length() - 1));
        c.setLastName(c.getLastName().substring(0, 1) + getStars(c.getLastName().length() - 1));

        return Response.ok(c).build();
    }

    private String getStars(int len) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i &lt; len; i++) {
            s.append("*");
        }

        return s.toString();
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    http:
      port: 8081
  discovery:
    ttl: 20
    ping-interval: 15</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/graphql/AssistantResolvers.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.graphql;

import com.kumuluz.ee.graphql.mp.utils.GraphQLUtils;
import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.QueryStringDefaults;
import com.kumuluz.ee.samples.graphql_advanced.beans.AssistantBean;
import com.kumuluz.ee.samples.graphql_advanced.entities.Assistant;
import org.eclipse.microprofile.graphql.GraphQLApi;
import org.eclipse.microprofile.graphql.Query;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.util.List;

@GraphQLApi
@ApplicationScoped
public class AssistantResolvers {

    @Inject
    private QueryStringDefaults qsd;

    @Inject
    private AssistantBean assistantBean;

    @Query
    public List&lt;Assistant&gt; getAssistants(String sort) {

        QueryParameters qp = GraphQLUtils.queryParametersBuilder()
                .withQueryStringDefaults(qsd)
                .withOrder(sort)
                .build();

        return assistantBean.getAssistants(qp);
    }
}</pre></body></html>




File path: kumuluzee-streaming-kafka/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Event Streaming samples using Kafka

&gt; Samples for KumuluzEE Event Streaming Kafka project

This module contains three samples that will introduce you to KumuluzEE
Event Streaming project using Kafka:

- [`kumuluzee-streaming-kafka-producer`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer) Kafka message producer microservice that produces messages
- [`kumuluzee-streaming-kafka-consumer`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer) Kafka message consumer microservice that consumes messages
- [`kumuluzee-streaming-kafka-streams`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams) Kafka Streams microservice for stream processing

More information about the samples can be found in the README of each sample.
</pre></body></html>




File path: jpa/src/main/java/com/kumuluz/ee/samples/jpa/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jpa;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @Inject
    private CustomerService customerBean;

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = customerBean.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = customerBean.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        customerBean.saveCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        customerBean.deleteCustomer(customerId);
        return Response.noContent().build();
    }

    @GET
    @Path("/failed")
    public Response getAllCustomersFailed() {
        List&lt;Customer&gt; customers = customerBean.getCustomersFailed();
        return Response.ok(customers).build();
    }
}
</pre></body></html>




File path: kumuluzee-feature-flags-unleash/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: feature-flags-sample-service
  version: 1.0.0
  env:
    name: dev
  feature-flags:
    unleash:
      unleash-api: "http://localhost:4242/api"</pre></body></html>




File path: jax-rs/src/main/java/com/kumuluz/ee/samples/jaxrs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxrs;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/resources/SAMPLEToken.sol
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">pragma solidity ^0.4.24;

// ----------------------------------------------------------------------------
// 'SAMPLE' token contract
//
// Symbol      : SAMPLE
// Name        : SAMPLE Token
// Total supply: 1,000,000.000000000000000000
// Decimals    : 18
//
// Enjoy.
//
// (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Safe maths
// ----------------------------------------------------------------------------
library SafeMath {
    function add(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c &gt;= a);
    }
    function sub(uint a, uint b) internal pure returns (uint c) {
        require(b &lt;= a);
        c = a - b;
    }
    function mul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function div(uint a, uint b) internal pure returns (uint c) {
        require(b &gt; 0);
        c = a / b;
    }
}


// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
// ----------------------------------------------------------------------------
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}


// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// Borrowed from MiniMeToken
// ----------------------------------------------------------------------------
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}


// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
    address public owner;
    address public newOwner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() public {
        owner = msg.sender;
    }
    
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}


// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and a
// fixed supply
// ----------------------------------------------------------------------------
contract SampleToken is ERC20Interface, Owned {
    using SafeMath for uint;
    
    string public symbol;
    string public  name;
    uint8 public decimals;
    uint _totalSupply;
    
    mapping(address =&gt; uint) balances;
    mapping(address =&gt; mapping(address =&gt; uint)) allowed;
    
    
    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor() public {
        symbol = "SAMPLE";
        name = "SAMPLE Token";
        decimals = 18;
        _totalSupply = 1000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        emit Transfer(address(0), owner, _totalSupply);
    }
    
    
    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }
    
    
    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }
    
    
    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }
    
    
    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
    
    
    // ------------------------------------------------------------------------
    // Transfer `tokens` from the `from` account to the `to` account
    //
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the `from` account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }
    
    
    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    
    
    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
    
    
    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
    
    
    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</pre></body></html>




File path: kumuluzee-logs-fluentd/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_logs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/producers/MyCache.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.jcache.rest.producers;

import javax.inject.Qualifier;
import java.lang.annotation.Retention;

import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
 * @author cen1
 * @since 3.6.0
 */
@Qualifier
@Retention(RUNTIME)
public @interface MyCache {
}</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-security-cdi-keycloak&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Security CDI sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Security extension with CDI based security usage sample with KumuluzEE and Keycloak&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-security.version&gt;1.3.0-SNAPSHOT&lt;/kumuluzee-security.version&gt;
        &lt;keycloak.version&gt;5.0.0&lt;/keycloak.version&gt;
        &lt;kumuluzee-config.version&gt;1.2.0&lt;/kumuluzee-config.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.keycloak&lt;/groupId&gt;
            &lt;artifactId&gt;keycloak-jetty94-adapter&lt;/artifactId&gt;
            &lt;version&gt;${keycloak.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-rest-client/src/main/java/com/kumuluz/ee/samples/kumuluzee_rest_client/entities/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_rest_client.entities;

import java.io.Serializable;

/**
 * @author Urban Malc
 * @since 3.1.0
 */
public class Customer implements Serializable {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-config-mp/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE MicroProfile Config sample

&gt; Build a JAX-RS service that utilizes the KumuluzEE MicroProfile Config API implementation to access configuration 
values and pack it as a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses the MicroProfile Config API to
access configuration values. In this sample we develop a simple JAX-RS service that returns
a list of configuration properties from configuration file and pack it as KumuluzEE microservice. This tutorial will 
guide you through all the necessary steps. You will first add KumuluzEE dependencies into pom.xml. You will then
implement a JAX-RS Resource, which will expose some configuration values. Required knowledge: basic familiarity with
JAX-RS 2.0.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-config-mp
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environment use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp 'target/classes;target/dependency/*' com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS Resource - http://localhost:8080/v1/config

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple JAX-RS service that exposes configuration 
properties retrieved with the MicroProfile Config API and pack it as a KumuluzEE microservice. We will develop a 
simple JAX-RS Resource:
* GET http://localhost:8080/v1/config - list of configuration properties from a configuration file 

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, CDI, JAX-RS and MicroProfile Config)
* Define our configuration properties in configuration file
* Implement the JAX-RS service
* Add a custom Converter
* Add custom configuration sources
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:

```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-microProfile-1.1` dependency, which adds the MicroProfile 1.1 dependencies: JAX-RS, CDI,
JSON-P, Servlet and MicroProfile Config 1.1.

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-microProfile-1.1&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Alternatively, we could add the dependencies `kumuluzee-microProfile-1.0` and `KumuluzEE MicroProfile Config` 
separately:

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
        &lt;version&gt;1.2.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

We could also add all the following dependencies separately: `kumuluzee-core`,`kumuluzee-servlet-jetty`, 
`kumuluzee-cdi-weld`, `kumuluzee-jax-rs-jersey` and `kumuluzee-config-mp`:

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
        &lt;version&gt;1.2.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Define configuration values

Define your configuration properties in a `META-INF/microprofile-config.properties` configuration file:

```properties
mp.example-string=Hello MicroProfile Config!
mp.example-boolean=true
mp.example-customer=John:Doe
mp.example-customers=James:White,Robert:Simpson,Ronald:Smith
```

### Implement the JAX-RS service

Register your module as a JAX-RS service and define the application path. You could do that in web.xml or for example 
with the `@ApplicationPath` annotation:

```java
@ApplicationPath("/v1")
public class ConfigApplication extends Application {
}
```

Implement the JAX-RS Resource, which will read the configuration values through various mechanisms, offered by the
MicroProfile Config API.

```java
@RequestScoped
@Produces(MediaType.APPLICATION_JSON)
@Path("config")
public class ConfigResource {

    @GET
    public Response testConfig() {

        return Response.ok().build();
    }
}
```

Configuration values can be accessed through the `Config` object. You can get the `Config` object programmatically.
To do so, add the following lines to the `testConfig` method:

```java
Config config = ConfigProvider.getConfig();
String exampleString = config.getValue("mp.example-string", String.class);
```

The `Config` object can also be acquired with CDI injection. Add the following lines to your Resource implementation:

```java
@Inject
private Config injectedConfig;
```

To use the injected `Config` object, add the following line to the `testConfig` method:

```java
Boolean exampleBoolean = injectedConfig.getValue("mp.example-boolean", boolean.class);
```

You can also use the `@ConfigProperty` annotation to inject configuration values directly.
Injection is supported for all types listed in MicroProfile Config specification.
Annotation also supports the `defaultValue` parameter, which is used, when configuration property in not present.
If `defaultValue` is not specified and configuration property is not present, injection will throw
`DeploymentException`. 

To inject configuration values, add the following lines to your Resource implementation:

```java
@Inject
@ConfigProperty(name = "mp.example-string")
private String injectedString;

@Inject
@ConfigProperty(name = "mp.non-existent-string", defaultValue = "Property does not exist!")
private String nonExistentString;
```

Alternatively to `defaultValue` parameter, you can inject configuration values as an `Optional` object. Add the
following lines to your Resource implementation:

```java
@Inject
@ConfigProperty(name = "mp.non-existent-string")
private Optional&lt;String&gt; nonExistentStringOpt;
```


### Add custom Converter

Creating custom Converters enables you to inject configuration values in the field types of your choice.

First create a `Customer` class, which is a POJO:

```java
public class Customer {

    private String name;
    private String surname;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public static Customer parse(String s) {
        String[] spl = s.split(":");

        if(spl.length == 2) {
            Customer c = new Customer();
            c.setName(spl[0]);
            c.setSurname(spl[1]);

            return c;
        }

        return null;
    }

    @Override
    public String toString() {
        return "Customer with name " + name + " and surname " + surname;
    }
}
```

Create a custom Converter for your `Customer` class:

```java
@Priority(500)
public class CustomerConverter implements Converter&lt;Customer&gt; {

    @Override
    public Customer convert(String s) {
        return Customer.parse(s);
    }
}
```

You can create multiple Converters for the same type. Converter with the highest priority will be used. Priority is
read from the `@Priority` annotation.

In order for Converter to be discovered, you need to register it in the
`/META-INF/services/org.eclipse.microprofile.config.spi.Converter` file with the fully qualified class name:

```text
com.kumuluz.ee.samples.converters.CustomerConverter
```

Inject a `Customer` instance in your Resource implementation:
```java
@Inject
@ConfigProperty(name = "mp.example-customer")
private Customer customer;
```

You can also inject an array of customers:
```java
@Inject
@ConfigProperty(name = "mp.example-customers")
private Customer[] customers;
```

### Add custom configuration source

Create a custom configuration source by implementing the `ConfigSource` interface. Our configuration source will
contain a single value `mp.custom-source-value`.

```java
public class ExampleConfigSource implements ConfigSource {
    @Override
    public Map&lt;String, String&gt; getProperties() {
        return null;
    }

    @Override
    public int getOrdinal() {
        return 120;
    }

    @Override
    public String getValue(String s) {
        if ("mp.custom-source-value".equals(s)) {
            return "Hello from custom ConfigSource";
        }

        return null;
    }

    @Override
    public String getName() {
        return "ExampleConfigSource";
    }
}
```

Register the implementation in the
`/META-INF/services/org.eclipse.microprofile.config.spi.ConfigSource` file with the fully qualified class name:

```text
com.kumuluz.ee.samples.configsources.ExampleConfigSource
```

Inject the value from custom configuration source in your Resource implementation:
```java
@Inject
@ConfigProperty(name = "mp.custom-source-value")
private String customSourceValue;
```

To add custom configuration sources dynamically, implement the `ConfigSourceProvider` interface. Our provider will
generate 10 configuration sources, each will provide the `mp.custom-source-ordinal` configuration property. Their
ordinals will range from 150 to 159. The `mp.custom-source-ordinal` configuration property will be supplied from
the configuration source with the highest priority, which is the source with ordinal 159.

```java
public class ExampleConfigSourceProvider implements ConfigSourceProvider {
    @Override
    public Iterable&lt;ConfigSource&gt; getConfigSources(ClassLoader classLoader) {
        List&lt;ConfigSource&gt; csList = new LinkedList&lt;&gt;();

        for (int i = 150; i &lt; 160; i++) {
            int finalI = i;
            csList.add(new ConfigSource() {
                @Override
                public Map&lt;String, String&gt; getProperties() {
                    return null;
                }

                @Override
                public String getValue(String s) {
                    if ("mp.custom-source-ordinal".equals(s)) {
                        return "Hello from custom ConfigSource, generated from ConfigSourceProvider." +
                                " Ordinal: " + finalI;
                    }

                    return null;
                }

                @Override
                public String getName() {
                    return "ExampleConfigSourceFromProvider_" + finalI;
                }

                @Override
                public int getOrdinal() {
                    return finalI;
                }
            });
        }

        return csList;
    }
}
```

Register the implementation in the
`/META-INF/services/org.eclipse.microprofile.config.spi.ConfigSourceProvider` file with the fully qualified class name:

```text
com.kumuluz.ee.samples.configsources.ExampleConfigSourceProvider
```

Inject the value of `mp.custom-source-ordinal` custom configuration source in your Resource implementation:s
```java
@Inject
@ConfigProperty(name = "mp.custom-source-ordinal")
private String customSourceOrdinal;
```


Final version of the resource should look something like:

```java
@RequestScoped
@Produces(MediaType.APPLICATION_JSON)
@Path("config")
public class ConfigResource {

    @Inject
    private Config injectedConfig;

    @Inject
    @ConfigProperty(name = "mp.example-string")
    private String injectedString;

    @Inject
    @ConfigProperty(name = "mp.non-existent-string", defaultValue = "Property does not exist!")
    private String nonExistentString;

    @Inject
    @ConfigProperty(name = "mp.non-existent-string")
    private Optional&lt;String&gt; nonExistentStringOpt;

    @Inject
    @ConfigProperty(name = "mp.example-customer")
    private Customer customer;

    @Inject
    @ConfigProperty(name = "mp.custom-source-value")
    private String customSourceValue;

    @Inject
    @ConfigProperty(name = "mp.custom-source-ordinal")
    private String customSourceOrdinal;
    
    @Inject
    @ConfigProperty(name = "mp.example-customers")
    private Customer[] customers;

    @GET
    public Response testConfig() {

        Config config = ConfigProvider.getConfig();

        String exampleString = config.getValue("mp.example-string", String.class);
        Boolean exampleBoolean = injectedConfig.getValue("mp.example-boolean", boolean.class);

        String response =
                "{" +
                        "\"exampleString\": \"%s\"," +
                        "\"exampleBoolean\": %b," +
                        "\"injectedString\": \"%s\"," +
                        "\"nonExistentString\": \"%s\"," +
                        "\"nonExistentStringOpt\": \"%s\"," +
                        "\"customer\": \"%s\"," +
                        "\"customSourceValue\": \"%s\"," +
                        "\"customSourceOrdinal\": \"%s\"," +
                        "\"customers[1]\": \"%s\"" +
                        "}";

        response = String.format(
                response,
                exampleString,
                exampleBoolean,
                injectedString,
                nonExistentString,
                nonExistentStringOpt.orElse("Empty Optional"),
                customer,
                customSourceValue,
                customSourceOrdinal,
                customers[1]
        );

        return Response.ok(response).build();
    }
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-fault-tolerance/order-api/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-fault-tolerance&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-fault-tolerance-order-api&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Fault Tolerance sample orders service&lt;/name&gt;
    &lt;description&gt;KumuluzEE Fault Tolerance orders service implementation&lt;/description&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-fault-tolerance-common&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: jsp/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jsp&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JSP sample&lt;/name&gt;
    &lt;description&gt;JSP usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jsp-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-el-uel&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/beta/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-opentracing-tutorial&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;beta&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE OpenTracing tutorial - beta&lt;/name&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: jax-rs/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JAX-RS REST service sample

&gt; Develop a REST service using standard JAX-RS 2 API and pack it as a KumuluzEE microservice.

The objective of this sample is to show how to develop a REST service using standard JAX-RS 2 API and pack it as a KumuluzEE microservice. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. To develop the REST service, you will use the standard JAX-RS 2 API. 
Required knowledge: basic familiarity with JAX-RS 2 and basic concepts of REST and JSON.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd jax-rs
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple REST service using standard JAX-RS 2 API and pack it as a KumuluzEE microservice. 
We will develop a simple Customer REST service with the following resources:
* GET http://localhost:8080/v1/customers - list of all customers 
* GET http://localhost:8080/v1/customers/{customerId} – details of customer with ID {customerId}
* POST http://localhost:8080/v1/customers – add a customer
* DELETE http://localhost:8080/v1/customers/{customerId} – delete customer with ID {customerId}

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet and JAX-RS)
* Implement the service using standard JAX-RS 2 API
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Alternatively, we could add the `kumuluzee-microProfile-1.0`, which adds the MicroProfile 1.0 dependencies (JAX-RS, CDI, JSON-P, and Servlet).

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

Add the `kumuluzee-maven-plugin` build plugin to package microservice as exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
```

Implement JAX-RS resource, for example, to implement resource `customers` which will return all customers by default on GET request:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
```

Implement the `Customer` Java class, which is a POJO:
```java
public class Customer {

    private String id;

    private String firstName;

    private String lastName;

    // TODO: implement get and set methods
}
```

In the example above, we use `Database` class to access data. A sample implementation which simulates persistance layer, can be implemented as follows:

```java
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: servlet/src/main/java/com/kumuluz/ee/samples/servlet/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.servlet;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers;
    static {
        customers = new ArrayList&lt;&gt;();
        customers.add(new Customer("1", "John", "Doe"));
        customers.add(new Customer("2", "Alice", "Cooper"));
        customers.add(new Customer("3", "Bob", "Builder"));
    }

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-ethereum-web3j/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Ethereum with Web3j

&gt; Develop and publish smart contract, send funds and interact with ethereum blochain from any client.

The object of of this sample is to demonstrate, how to get up and running with development on ethereum.


## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

Sample can be run without additional setup. Ethereum client in the sample is connecting to rinkeby testnet and is using sample wallet. To customize settings edit config.yaml appropriately. Smart contracts written in solidity that you wish to use should be placed in resources folder.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-ethereum-web3j
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
To test if everything is working correctly try following endpoints:
* To display the version of the ethereum client - http://localhost:8080/v1/execute/client/version
* To get balance on the smart contract - http://localhost:8080/v1/execute/contract/balance/{id}
* To send ether from your wallet to  http://localhost:8080/v1/execute/contract/send/ether/{address}
* To deploy smart contract http://localhost:8080/v1/execute/contract/deploy
* To get owner of contract http://localhost:8080/v1/execute/contract/get/owner
* To send your token to another address if your contract is erc20 token http://localhost:8080/v1/execute/contract/send/token/{to}
* To call method on smart contract with any name without parameters http://localhost:8080/v1/execute/contract/call/method/{name}
* To call method on smart contract with one parameter http://localhost:8080/v1/execute/contract/call/method/{name}/argument/{argument}

## Tutorial
This tutorial will guide you through the steps required to create a simple token on top of the ethereum blockchain.

We will follow these steps:
* Create a wallet
* Add Maven dependencies
* Get access to ethereum client
* Interacting with smart contracts
* Build the microservice
* Run it

### Create a wallet
Most popular options include:
* [MyEtherWallet (Online)](https://www.myetherwallet.com)
* [MetaMask](https://metamask.io)
* [Mist (Desktop)](https://github.com/ethereum/mist/releases)
* [Parity (Desktop)](https://ethcore.io/parity.html)

Path to the wallet should be supplied in config.yaml. 
### Add Maven dependencies

Add the `kumuluzee-ethereum-web3j` dependency, if you haven't used the sample:
```xml
 &lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.ethereum&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-ethereum-web3j&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
```

`web3j-maven-plugin` is used for generating smart contract wrappers and should already be added to your project from sample. Otherwise you can include it by adding following section to your pom.xml.
```xml
    &lt;plugin&gt;
        &lt;groupId&gt;org.web3j&lt;/groupId&gt;
        &lt;artifactId&gt;web3j-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;0.1.4&lt;/version&gt;
        &lt;configuration&gt;
            &lt;soliditySourceFiles/&gt;
            &lt;packageName&gt;contracts&lt;/packageName&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;id&gt;package&lt;/id&gt;
                &lt;goals&gt;
                    &lt;goal&gt;generate-sources&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
```
### Get access to ethereum client

To connect to ethereum network you need to use the client. You can client yourself (geth, parity) or use one provided for you in the cloud such as [Infura](https://infura.io/signup).
For testing purposes we recommend client to connect to testnet such as rinkeby (geth client only). To get free ether use [rinkeby faucet](https://faucet.rinkeby.io/)

### Generating smart contract wrappers
Put your solidity files in resources folder in maven project. Then run following lifecycle:
```bash
$ mvn web3j:generate-sources
```
and java wrapper classes should be generated in /src/main/java/contracts folder. Then you can interact with autogenerated classes that represent smart contract methods in your project.
### Interacting with smart contracts
We are going to build [Rest](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) interface using JAX-RS to demonstrate operations on smart contracts. 

To get version of the client used to connect to ethereum network we can use following endpoint.
```java
@GET
    @Path("client/version")
    public String getClientVerstion() {
        try {
            Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
            String clientVersion = web3ClientVersion.getWeb3ClientVersion();
            return clientVersion;
        } catch (Exception e) {
            String error = e.getMessage();
            log.severe(error);
            return error;
        }
    }
```
To get balance of the account with account address (id) we can use web3j.ethGetBalance method supplying address of the receiving account.
```java
@GET
    @Path("contract/balance/{id}")
    public String getBalance(@PathParam("id") String accountAddress) {
        try {
            BigInteger wei = web3j.ethGetBalance(accountAddress, DefaultBlockParameterName.LATEST).sendAsync().get().getBalance();
            return "You have " + wei + " wei.";
        } catch (Exception e) {
            String error = e.getMessage();
            log.severe(error);
            return error;
        }
    }
```

To send ether (currency on ethereum network) from your account somewhere, we can use folowing endpoint supplying web3j instance, credentials object containing data to access wallet, receiving address and amount we wish to transfer. 
&gt;Due to mechanism with which ethereum processes transactions your speed might vary.
```java
@GET
    @Path("contract/send/ether/{address}")
    public String sendEther(@PathParam("address") String receivingAddress) {
        try {
            TransactionReceipt transactionReceipt = Transfer.sendFunds(web3j, credentials, receivingAddress, BigDecimal.valueOf(0.01), Convert.Unit.ETHER).send();
            return transactionReceipt.getTransactionHash().toString();
        } catch (Exception e) {
            String error = e.getMessage();
            log.severe(error);
            return error;
        }
    }
```

In order to deploy smart contract written call deploy() method on autogenerated smart contract wrapper class, supplying web3j instance, credentials object and GAS_PRICE which is the cost per instruction and GAS_LIMIT which specifies maximum amount of gas transaction can consume.
```java
@GET
    @Path("contract/deploy")
    public String deployContract () {
        try {
            SampleToken sampleToken = SampleToken.deploy(web3j, credentials, Contract.GAS_PRICE, Contract.GAS_LIMIT).send();
            String contractAddress = sampleToken.getContractAddress();
            return "Contract is deployed at address: " + contractAddress;
        } catch (Exception e) {
            String error = "Deploynment failure";;
            log.severe(error);
            return error;
        }
    }
```

In order to call methods smart contract offers, we need to specify where they are located on the network. The example demostrates calling the method owner() to get address of smart contract owner.  
```java
@GET
    @Path("contract/get/owner")
    public String callContract () {
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, Contract.GAS_PRICE, Contract.GAS_LIMIT);
        try {
            String address = sampleToken.owner().send();
            String owner = String.format("Owner is address %s\n", address);
            return owner;
        } catch (Exception e) {
            String error = "Error calling method";;
            log.severe(error);
            return error;
        }
    }
```

If your smart contract is a ERC20 token, you can send it using transfer method.
```java
@GET
    @Path("contract/send/token/{to}")
    public String callContract (@PathParam("to") String transaction) {
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, Contract.GAS_PRICE, Contract.GAS_LIMIT);
        try {
            String logs = sampleToken.transfer(transaction, BigInteger.valueOf(100)).send().getLogsBloom();
            return logs;
        } catch (Exception e) {
            String error = "Error calling method";;
            log.severe(error);
            return error;
        }
    }
```  

To send token to all your customers stored in database use. To check if transfer was successful transaction hash can be checked using [etherscan](https://rinkeby.etherscan.io/).
```java
@GET
    @Path("contract/send/tokens/customers")
    public String sendTokenToCustomers () {
        SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, Contract.GAS_PRICE, Contract.GAS_LIMIT);
        try {
            List&lt;Customer&gt; customerList = customerService.getCustomers();
            String logs = "";
            for (Customer customer : customerList) {
                BigInteger amount = BigInteger.valueOf(100);
                logs += amount + " of SampleToken transfered in transation: " + sampleToken.transfer(customer.getWalletAddress(), amount).send().getTransactionHash() + "\n";
            }
            return logs;
        } catch (Exception e) {
            String error = "Error calling method";;
            log.severe(error);
            return error;
        }
    }
```

If you run your own Ethereum node (Infura is not supported) you can listen to smart contract events and react to them programatically inside methods annotated with EventListen annotation. To get data about the event pass appropriate EventResponse object.
```java
@EventListen(eventName="transfer", smartContractName = SampleToken.class, smartContractAddress = deployedContractAddress)
    public void reactToEvent (SampleToken.TransferEventResponse transferEventResponse) {
        if (transferEventResponse.tokens.compareTo(BigInteger.valueOf(20)) == 1) {
            log.info("Granting service access to user " + transferEventResponse.from + ". " +
                    transferEventResponse.tokens + " tokens received.");
        } else {
            log.info("Access denied. User " + transferEventResponse.from + " has send only " + transferEventResponse.tokens + " tokens.");
        }
    }
```

In order to get your wallet credentials use Web3jUtils
```java
private Credentials credentials = Web3jUtils.getCredentials();
```
To load smart contract with autogenerated wrapper class named SampleToken
```java
SampleToken sampleToken = SampleToken.load(deployedContractAddress, web3j, credentials, Contract.GAS_PRICE, Contract.GAS_LIMIT);
```
Then you call call methods on the instance of that object.
### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-persistence/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-orders&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-security-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

import javax.annotation.security.DeclareRoles;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@DeclareRoles({"user", "admin"})
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-graphql-jpa-security/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-jpa" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/CustomersDS&lt;/jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.graphql_security.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;

    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: jsp/src/main/resources/webapp/input.jsp
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;Please enter customer data below:&lt;/h2&gt;
    &lt;form action="${pageContext.request.contextPath}/customers" method="post"&gt;
        &lt;label for="id"&gt;ID:
            &lt;input type="text" id="id" name="id"/&gt;
        &lt;/label&gt;
        &lt;label for="firstName"&gt;First name:
            &lt;input type="text" id="firstName" name="firstName"/&gt;
        &lt;/label&gt;
        &lt;label for="lastName"&gt;Last name:
            &lt;input type="text" id="lastName" name="lastName"/&gt;
        &lt;/label&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;input type="submit" id="submit" name="submit" value="Add"/&gt;
        &lt;br/&gt;
        &lt;a href="welcome.jsp"&gt;Home&lt;/a&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka-consumer&lt;/artifactId&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
            &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-logs-jul/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="sample-user-jpa" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/UsersDB&lt;/jta-data-source&gt;

        &lt;class&gt;entity.User&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source" value="sql-script/init-db.sql"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/graphql/SubjectResolvers.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.graphql;

import com.kumuluz.ee.graphql.mp.utils.GraphQLUtils;
import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.QueryStringDefaults;
import com.kumuluz.ee.samples.graphql_advanced.beans.SubjectBean;
import com.kumuluz.ee.samples.graphql_advanced.dtos.AssignmentResult;
import com.kumuluz.ee.samples.graphql_advanced.dtos.Subject;
import com.kumuluz.ee.samples.graphql_advanced.entities.connections.SubjectConnection;
import org.eclipse.microprofile.graphql.GraphQLApi;
import org.eclipse.microprofile.graphql.Mutation;
import org.eclipse.microprofile.graphql.NonNull;
import org.eclipse.microprofile.graphql.Query;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

@GraphQLApi
@ApplicationScoped
public class SubjectResolvers {

    @Inject
    private SubjectBean subjectBean;

    @Inject
    private QueryStringDefaults qsd;

    // queries
    @Query
    public SubjectConnection getSubjectsConnection(Long offset, Long limit, String sort, String filter) {

        QueryParameters qp = GraphQLUtils.queryParametersBuilder()
                .withQueryStringDefaults(qsd)
                .withOffset(offset)
                .withLimit(limit)
                .withOrder(sort)
                .withFilter(filter)
                .build();

        return subjectBean.getSubjectConnection(qp);
    }

    // mutations
    @Mutation
    public Subject createSubject(@NonNull Subject subject) {
        return subjectBean.createSubject(subject);
    }

    @Mutation
    public AssignmentResult assignSubject(@NonNull Integer studentNumber, @NonNull Integer subjectId) {

        boolean result = subjectBean.assignSubject(studentNumber, subjectId);

        if (result) {
            return new AssignmentResult("Subject assigned successfully.", 200);
        } else {
            return new AssignmentResult("Could not assign subject.", 400);
        }
    }
}
</pre></body></html>




File path: jsp/src/main/java/com/kumuluz/ee/samples/jsf/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jsf;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return "Customer {\n" +
                "  id='" + id + "',\n" +
                "  firstName='" + firstName + "',\n" +
                "  lastName='" + lastName + "'\n" +
                "}";
    }
}
</pre></body></html>




File path: kumuluzee-swagger/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
  swagger:
    enabled: true
    ui:
      enabled: true</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/src/main/java/com/kumuluz/ee/samples/reactive/vertx/VertxApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
*
* @author Žan Ožbot
*/
@ApplicationPath("v1")
public class VertxApplication extends Application {

}
</pre></body></html>




File path: jsf/src/main/resources/webapp/list.xhtml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"&gt;

&lt;h:head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/h:head&gt;
&lt;h:body&gt;
    &lt;h2&gt;Customers&lt;/h2&gt;
    &lt;ui:repeat value="#{customerBean.customers}" var="customer"&gt;
        &lt;h:outputText value="#{customer.toString()}"/&gt;
        &lt;br/&gt;
    &lt;/ui:repeat&gt;
    &lt;br /&gt;
    &lt;h:form&gt;
        &lt;h:commandButton value="Home" action="welcome"/&gt;
    &lt;/h:form&gt;
&lt;/h:body&gt;
&lt;/html&gt;</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/utils/ApplicationDefaults.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.utils;

import com.kumuluz.ee.rest.utils.QueryStringDefaults;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;

public class ApplicationDefaults {

    @Produces
    @ApplicationScoped
    public QueryStringDefaults getQueryDefaults() {
        return new QueryStringDefaults()
                .defaultOffset(0)
                .defaultLimit(20)
                .maxLimit(100);
    }
}
</pre></body></html>




File path: servlet/src/main/java/com/kumuluz/ee/samples/servlet/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.servlet;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public Customer(String id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return "Customer {\n" +
               "  id='" + id + "',\n" +
               "  firstName='" + firstName + "',\n" +
               "  lastName='" + lastName + "'\n" +
               "}";
    }
}
</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: jax-ws/jax-ws-metro/src/main/java/com/kumuluz/ee/samples/jaxws/metro/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxws.metro;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "Customer",
        propOrder = {
            "id",
            "firstName",
            "lastName"
        }
)
public class Customer implements Serializable {

    @XmlElement(required = true)
    private String id;
    @XmlElement(required = true)
    private String firstName;
    @XmlElement(required = true)
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: jsp/src/main/java/com/kumuluz/ee/samples/jsf/CustomerServlet.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jsf;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@WebServlet("/customers")
public class CustomerServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List&lt;Customer&gt; customers = Database.getCustomers();
        for(Customer customer : customers) {
            response.getWriter().write(customer.toString() + "&lt;br/&gt;");
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String id = request.getParameter("id");
        String firstName = request.getParameter("firstName");
        String lastName = request.getParameter("lastName");

        Customer customer = new Customer();
        customer.setId(id);
        customer.setFirstName(firstName);
        customer.setLastName(lastName);

        Database.addCustomer(customer);

        response.sendRedirect("input.jsp");
    }
}
</pre></body></html>




File path: kumuluzee-metrics/src/main/java/com/kumuluz/ee/samples/kumuluzee_metrics/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_metrics;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-openapi-mp/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    #context-path: /kumuluzee-openapi-mp/v1
  openapi-mp:
    enabled: true
    scan:
      packages: com.kumuluz.ee.samples.openapi,com.kumuluz.ee.samples.openapi.v2
    servlet:
      mapping: /openapi
    servers: https://example-api.com
    ui:
      server-auto-config:
        enabled: true
        original-uri-check: true
      enabled: true
      mapping: /openapi/ui
    scanning:
      debug: true
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;simple-verticles&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;verticle-discovery&lt;/module&gt;
        &lt;module&gt;verticle-listener&lt;/module&gt;
        &lt;module&gt;verticle-publisher&lt;/module&gt;
    &lt;/modules&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config-etcd/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/order-service.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: Service
metadata:
  name: order
  namespace: kumuluzee-blog
  labels:
    app: order
spec:
  type: NodePort
  ports:
  - name: server
    port: 8081
    protocol: TCP
    targetPort: 8081
  selector:
    app: order
</pre></body></html>




File path: kumuluzee-config/src/main/java/com/kumuluz/ee/samples/kumuluz_config/ConfigProperties.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;

import javax.enterprise.context.ApplicationScoped;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    private String stringProperty;

    private Boolean booleanProperty;

    private Integer integerProperty;

    private String encodedProperty;

    public String getStringProperty() {
        return stringProperty;
    }

    public void setStringProperty(String stringProperty) {
        this.stringProperty = stringProperty;
    }

    public Boolean getBooleanProperty() {
        return booleanProperty;
    }

    public void setBooleanProperty(Boolean booleanPropertysomeBoolean) {
        this.booleanProperty = booleanPropertysomeBoolean;
    }

    public Integer getIntegerProperty() {
        return integerProperty;
    }

    public void setIntegerProperty(Integer integerProperty) {
        this.integerProperty = integerProperty;
    }

    public String getEncodedProperty() {
        return encodedProperty;
    }

    public void setEncodedProperty(String encodedProperty) {
        this.encodedProperty = encodedProperty;
    }
}
</pre></body></html>




File path: kumuluzee-ethereum-web3j/wallet-sample-ebe82f9ac91697e8a81f4f3a30fcaf499ef65993.json
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{"address":"ebe82f9ac91697e8a81f4f3a30fcaf499ef65993","id":"3ec25e21-64d0-44ba-9050-b64916faa0bd","version":3,"crypto":{"cipher":"aes-128-ctr","ciphertext":"9e41b007ead554f8a15c642c33358ab24490fd63112fb51914b24e4b695a0058","cipherparams":{"iv":"a3c45ad79b2e5354dbe1d603ed5370e1"},"kdf":"scrypt","kdfparams":{"dklen":32,"n":262144,"p":1,"r":8,"salt":"c4f3d2cf4a2e2872da8dc189bd13d6500693f5b0e5dd3ea488834016768f8cdb"},"mac":"ec92ae0e795c32f8fcad8da7733e12430932e07fd472d1faf96d997b6875588a"}}</pre></body></html>




File path: kumuluzee-openapi/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE OpenAPI sample

&gt; Develop a microservice application with support for OpenAPI specification.

The objective of this sample is to demonstrate how to document API with OpenAPI v3 compliant annotations. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. 
To enable support for OpenAPI annotations you will use kumuluzee-openapi extension. 
Required knowledge: basic familiarity with JAX-RS.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-openapi
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* JAX-RS - http://localhost:8080/v2/customer

### OpenAPI specification

OpenAPI specification for API can be access on the following URL:
* API v2 - http://localhost:8080/api-specs/v2/openapi.json

OpenAPI specification URL always follows the following URL template:
* http://&lt;-hostname-&gt;:&lt;-port-&gt;/api-specs/&lt;jax-rs application-base-path&gt;/openapi.[json|yaml]

## Tutorial

This tutorial will guide you through the steps required to document JAX-RS application using OpenAPI annotations. 

Package contains the following JAX-RS application CustomerAPI.

**CustomerAPI v2**
JAX-RS resource:
* GET http://localhost:8080/v2/customer - list of all customers.

OpenAPI specification:
* GET http://localhost:8080/api-specs/v2/openapi.json


We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (OpenAPI)
* Implement the JAX-RS resource using standard JAX-RS API
* Use OpenAPI annotations to document APIs
* Build the microservice
* Run it


### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-openapi` dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.openapi&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-openapi&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-openapi.varsion}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Tutorial for the implementation of JAX-RS is described in **jax-rs** sample.
 
### Documenting API 

KumuluzEE-OpenAPI extension brings OpenAPI v3 compliant annotations for documenting APIs.

#### Documenting CustomerAPI v2

##### Application class

```java
@ApplicationPath("v2")
@OpenAPIDefinition(info = @Info(title = "CustomerApi", version = "v2.0.0"), servers = @Server(url = "http://localhost:8080/v2"))
public class CustomerApplication extends Application {

    @Override
    public Set&lt;Class&lt;?&gt;&gt; getClasses() {
        Set&lt;Class&lt;?&gt;&gt; classes = new HashSet&lt;&gt;();

        classes.add(CustomerResource.class);

        return classes;
    }
}
```

##### Resources

```java
@Path("customer")
@Produces(MediaType.APPLICATION_JSON)
public class CustomerResource {

    @GET
    @Operation(summary = "Get customers list", tags = {"customers"}, description = "Returns a list of customers.",
            responses = {
                    @ApiResponse(
                            description = "List of customers",
                            responseCode = "200",
                            content = @Content(array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
                    )
            })
    public Response getCustomers() {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");

        customers.add(c);

        return Response.status(Response.Status.OK).entity(customers).build();
    }

    @GET
    @Operation(summary = "Get customers details", tags = {"customers"}, description = "Returns customer details.", responses = {
            @ApiResponse(description = "Customer details", responseCode = "200", content = @Content(schema = @Schema(implementation =
                    Customer.class)))
    })
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {

        Customer c = new Customer("1", "John", "Doe");

        return Response.status(Response.Status.OK).entity(c).build();
    }
}
```
 
### Configure OpenAPI extension
 
By default OpenAPI extension will automatically expose API specification, however this can be disabled by property **kumuluzee.openapi.spec.enabled** in config.

```yaml
kumuluzee:
  openapi:
    spec:
      enabled: false
```

Example with server context and custom path mapping is commented out in `config.yml`.

#### OpenAPI UI

To enable OpenAPI UI add **kumuluzee-openapi-ui** dependency to your project: 

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.openapi&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-openapi-ui&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-openapi.varsion}&lt;/version&gt;
&lt;/dependency&gt;
```

In case you want to disable OpenAPI you can set the following property:

```yaml
kumuluzee:
  openapi:
    ui:
      enabled: false
```

**OpenAPI UI** is available at:
http://localhost:8080/api-specs/ui

If serving of the API specification is disabled, OpenAPI-UI will not be available.

### Runtime configuration
By default api-specs will be generated and exposed on /api-specs url. To disable openapi definirions and Swagger UI in runtime you can use configuration property **kumuluzee.openapi.enabled** and set it to *false* (example in **config.yaml**).


### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: jul/src/main/java/com/kumuluz/ee/samples/jul/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jul;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;discovery-consul-register&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Consul Register JAX-RS sample&lt;/name&gt;
    &lt;description&gt;Register JAX-RS service with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge/src/main/java/com/kumuluz/ee/samples/reactive/vertx/VertxApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
*
* @author Žan Ožbot
*/
@ApplicationPath("v1")
public class VertxApplication extends Application {

}
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  streaming:
    kafka:
      streams:
        bootstrap-servers: localhost:9092
        application-id: sample-word-count
        default-key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default-value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        commit-interval-ms: 500</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/Person.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities;

import javax.persistence.*;

@MappedSuperclass
public class Person {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    @Column
    private String name;
    @Column
    private String surname;

    public Person() {
    }

    public String getName() {
        return name;
    }

    public String getSurname() {
        return surname;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/resources/ManagementResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.resources;

import com.kumuluz.ee.samples.tutorial.orders.api.v1.health.HealthManagementDemo;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@RequestScoped
@Path("/management")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ManagementResource {

    @Inject
    private HealthManagementDemo healthManagementDemo;

    @POST
    @Path("healthy")
    public Response setHealthStatus(Boolean healthy) {

        healthManagementDemo.setHealthy(healthy);

        return Response.ok().build();

    }


}
</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-graphql-jpa-simple&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE GraphQL Basic sample&lt;/name&gt;
    &lt;description&gt;GraphQL example usage with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-graphql.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-graphql.version&gt;
        &lt;kumuluzee-config-mp.version&gt;1.5.0-SNAPSHOT&lt;/kumuluzee-config-mp.version&gt;
        &lt;postgresql.version&gt;42.2.1&lt;/postgresql.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jta-narayana&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-p-jsonp&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-b-yasson&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-graphql-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-graphql-ui&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;${postgresql.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config-etcd/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("/v1")
public class ConfigApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-opentracing/customers/src/main/java/com/kumuluz/ee/samples/opentracing/customers/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.customers;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Domen Jeric
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@ApplicationScoped
@Path("customers")
public class CustomerResource {

    @Inject
    private CustomersBean customersBean;

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }

    @GET
    @Path("{customerId}/orders")
    public Response getCustomerOrders(@PathParam("customerId") String customerId) {
        return customersBean.getOrders();
    }

}

</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1;

import javax.annotation.security.DeclareRoles;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/v1")
@DeclareRoles({"user", "admin"})
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: jsp/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Java Server Pages (JSP) and Servlet sample

&gt; Develop a sample JSP and Servlet and pack it as a KumuluzEE microservice.

The objective of this sample is to demonstrate how to develop JSP and Servlets and pack it as a KumuluzEE microservice. The tutorial guides you through the development of a JSP/Servlet application, including the development of a servlet, three different JPSs, and configuring the web module. It shows how to pack JSPs and Servlets as a microservice. Required knowledge: basic familiarity with JSP and Servlets.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd jsp
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JSP page - http://localhost:8080

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a sample with Java EE JSP technologies and pack it as a KumuluzEE microservice. 
We will develop a simple front-end in JSP and required back-end with the following functionalities:
* User interface and logic to add a customer
* User interface and logic to list all customer
* User interface with welcome page and list of options

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.).
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JSP).
* Implement the front-end using JSP views
* Implement supporting backend beans
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jsp-jetty` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jsp-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement backend beans

First, let us create a `Customer` Java POJO:

```java
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    // TODO: add getters and setters
}
```

Create `Database` class to simulate persistence layer:

```java
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}

```
Implement `CustomerServlet` class. This class will implement a servlet and will handle POST request to add new Customer.

```java
@WebServlet("/customers")
public class CustomerServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List&lt;Customer&gt; customers = Database.getCustomers();
        for(Customer customer : customers) {
            response.getWriter().write(customer.toString() + "&lt;br/&gt;");
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String id = request.getParameter("id");
        String firstName = request.getParameter("firstName");
        String lastName = request.getParameter("lastName");

        Customer customer = new Customer();
        customer.setId(id);
        customer.setFirstName(firstName);
        customer.setLastName(lastName);

        Database.addCustomer(customer);

        response.sendRedirect("input.jsp");
    }
}
```
### Implement the views

Create directory `resources/webapp` and add views `input.jsp`, `list.jsp` and `welcome.jsp`.

**welcome.jsp**
```xhtml
&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;KumuluzEE JSP sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;Choose an action:&lt;/h2&gt;
    &lt;a href="input.jsp"&gt;Add customer&lt;/a&gt;
    &lt;br/&gt;
    &lt;br/&gt;
    &lt;a href="list.jsp"&gt;List customers&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
```

**list.jsp**
```xhtml
&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;Customers&lt;/h2&gt;
    &lt;jsp:include page="${pageContext.request.contextPath}/customers"/&gt;
&lt;/body&gt;
&lt;/html&gt;
```

**input.jsp**
```xhtml
&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;Please enter customer data below:&lt;/h2&gt;
    &lt;form action="${pageContext.request.contextPath}/customers" method="post"&gt;
        &lt;label for="id"&gt;ID:
            &lt;input type="text" id="id" name="id"/&gt;
        &lt;/label&gt;
        &lt;label for="firstName"&gt;First name:
            &lt;input type="text" id="firstName" name="firstName"/&gt;
        &lt;/label&gt;
        &lt;label for="lastName"&gt;Last name:
            &lt;input type="text" id="lastName" name="lastName"/&gt;
        &lt;/label&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;input type="submit" id="submit" name="submit" value="Add"/&gt;
        &lt;br/&gt;
        &lt;a href="welcome.jsp"&gt;Home&lt;/a&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
```

### Configure web module
In directory `resources/webapp/WEB-INF` add file `web.xml`:

```xml
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;

    &lt;display-name&gt;KumuluzEE JSP sample&lt;/display-name&gt;

    &lt;!-- Welcome page --&gt;
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;welcome.jsp&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;
&lt;/web-app&gt;
```

### Build the sample and run it

To build the sample and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/java/grpc/interceptors/HeaderInterceptor.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package grpc.interceptors;

import io.grpc.*;

import java.util.logging.Logger;

public class HeaderInterceptor implements ServerInterceptor {

    private static final Logger logger = Logger.getLogger(HeaderInterceptor.class.getName());

    static final Metadata.Key&lt;String&gt; HEADER_KEY = Metadata.Key.of("server_header_key", Metadata.ASCII_STRING_MARSHALLER);

    @Override
    public &lt;ReqT, RespT&gt; ServerCall.Listener&lt;ReqT&gt; interceptCall(ServerCall&lt;ReqT, RespT&gt; serverCall, Metadata metadata,
                                                                 ServerCallHandler&lt;ReqT, RespT&gt; serverCallHandler) {

        logger.info("Header received from client " + metadata);
        return serverCallHandler.startCall(new ForwardingServerCall.SimpleForwardingServerCall&lt;ReqT, RespT&gt;(serverCall) {
            @Override
            public void sendHeaders(Metadata headers) {
                headers.put(HEADER_KEY, "respondValue");
                super.sendHeaders(headers);
            }
        }, metadata);
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-tutorial&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;kumuluzee-tutorial-customers&lt;/artifactId&gt;

    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;customers-api&lt;/module&gt;
        &lt;module&gt;customers-business-logic&lt;/module&gt;
        &lt;module&gt;customers-persistence&lt;/module&gt;
    &lt;/modules&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-cors/src/main/java/com/kumuluz/ee/samples/cors/CustomerServlet.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.cors;

import com.kumuluz.ee.cors.annotations.CrossOrigin;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by zvoneg on 01/08/17.
 */
@WebServlet("CustomerServlet")
@CrossOrigin(name = "customer-servlet")
public class CustomerServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");

        customers.add(c);

        resp.getWriter().println(customers.toString());

    }
}
</pre></body></html>




File path: kumuluzee-jcache/postman/kumuluzee-jcache%20sample.postman_collection.json
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{
	"info": {
		"_postman_id": "58e899df-ccf3-404d-9bdc-c3a34a63aaae",
		"name": "kumuluzee-jcache sample",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Put data - CachePut 15 seconds",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": \"123456\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/invoices/123456",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"123456"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data - CacheResult 15 seconds",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/invoices/123456",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"123456"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data - CacheResult (different key)",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/invoices/654321",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"654321"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data - prog default 10 seconds",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/invoices/654321/default",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"654321",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data - prog my 5 seconds",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/invoices/654325/my",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"654325",
						"my"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data - CacheResult - max entries 1",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/invoices/654321",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"654321"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data - CacheResult - max entries 2",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/invoices/654322",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"654322"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data - CacheResult - max entries 3",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/invoices/654323",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoices",
						"654323"
					]
				}
			},
			"response": []
		}
	]
}</pre></body></html>




File path: kumuluzee-opentracing-tutorial/delta/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/delta/Application.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.delta;

import javax.ws.rs.ApplicationPath;

@ApplicationPath("v1")
public class Application extends javax.ws.rs.core.Application {
}
</pre></body></html>




File path: kumuluzee-cors/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-openapi/src/main/java/com/kumuluz/ee/samples/openapi/v2/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.openapi.v2;

import com.kumuluz.ee.samples.openapi.Customer;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.ArrayList;
import java.util.List;

/**
 * CustomerResource class with openAPI
 *
 * @author Zvone Gazvoda
 * @since 2.5.0
 */
@Path("customers")
@Produces(MediaType.APPLICATION_JSON)
public class CustomerResource {

    @GET
    @Operation(summary = "Get customers list", tags = {"customers"}, description = "Returns a list of customers.",
            responses = {
                    @ApiResponse(
                            description = "List of customers",
                            responseCode = "200",
                            content = @Content(array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
                    )
            })
    public Response getCustomers() {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");

        customers.add(c);

        return Response.status(Response.Status.OK).entity(customers).build();
    }

    @GET
    @Operation(summary = "Get customers details", tags = {"customers"}, description = "Returns customer details.",
            responses = {
                    @ApiResponse(description = "Customer details", responseCode = "200", content = @Content(schema =
                    @Schema(implementation =
                            Customer.class)))
            })
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {

        Customer c = new Customer("1", "John", "Doe");

        return Response.status(Response.Status.OK).entity(c).build();
    }

}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/master/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8080</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Security CDI sample with Keycloak

&gt; Build a CDI enabled REST service which utilizes KumuluzEE Security to secure the resources with Keycloak using 
standard Java annotations and pack it as a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses KumuluzEE Security extension to
secure the CDI enabled REST resources. In this sample we develop a simple REST service, promote it to a CDI bean, 
secure it using Keycloak and pack it as a KumuluzEE microservice. This tutorial will guide you through all the 
necessary steps. You will first add KumuluzEE dependencies into pom.xml. To develop the REST service, you will use the 
standard JAX-RS 2 API. Required knowledge: basic familiarity with JAX-RS 2, CDI, OAuth2, Keycloak and basic concepts of 
REST.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    
## Prerequisites

To run this sample you will need a Keycloak instance. Here is an example on how to quickly run a Keycloak instance with Docker:

```bash
$ docker run \
         -e KEYCLOAK_USER=&lt;USERNAME&gt; \
         -e KEYCLOAK_PASSWORD=&lt;PASSWORD&gt; \
         -p 8082:8080 jboss/keycloak
```

## Usage

The example uses Maven to build and run the microservice.

1. Build the sample using Maven:

    ```bash
    $ cd kumuluzee-security-cdi-keycloak
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to secure a simple REST microservice using Keycloak and pack it 
as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs),
 with CDI and KumuluzEE Security extension implemented by Keycloak. Therefore, first complete the existing JAX-RS sample 
 tutorial, or clone the JAX-RS sample code. 

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) 
or clone the existing sample
* Add Maven dependencies
* Configure Keycloak
* Enable CDI
* Implement security
* Build the microservice
* Run it
* Test security

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the 
dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured 
in `pom.xml`.

Add the `kumuluzee-cdi-weld`, `kumuluzee-security-keycloak` and `keycloak-jetty94-adapter` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.keycloak&lt;/groupId&gt;
    &lt;artifactId&gt;keycloak-jetty94-adapter&lt;/artifactId&gt;
    &lt;version&gt;${keycloak.version}&lt;/version&gt;
&lt;/dependency&gt;
```
 
Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Configure Keycloak

1. Log into the Keycloak (open browser http://localhost:8082) using your admin account and create a new realm named: `customers-realm`.

2. Create two new clients. One will be used to retrieve access tokens and the other one will be used only to verify issued tokens. Create the first client with Client ID `customers-app`. Leave the Protocol option set to openid-connect. After creating the client, verify, that the `Access Type` is set to `public`. Under `Root URL` and `Web origins` enter `http://localhost:8080`, under `Valid Redirect URIs` enter `http://localhost:8080/*`. Port 8080 points to your sample application port.

3. Create the second client with Client ID `customers-api`. Change the `Access Type` to `bearer-only`.


4. Create a user. Make sure to set `User Enabled` to `ON`. After adding the user, make sure that `Required User Actions` is empty. Go to Credentials and set the new password, and set `Temporary` to `OFF` before confirming.

5. Create a roles `admin` and `user`.

6. Open new user and go to `Role Mappings` and assign the Role `user` to new user.

7. Open client `customers-api` go to `Installation` and select `Installation/Keycloak OIDC JSON` and copy the content.

8. Create file `resources/config.yaml` and use the content from previous step and paste it to json element:

```yaml
kumuluzee:
  security:
      keycloak:
        json: '{"realm": "customers-realm",
                "bearer-only": true,
                "auth-server-url": "http://localhost:8080/auth",
                "ssl-required": "external",
                "resource": "customers-api"}'
```


### Enable CDI

Enable CDI by creating the **beans.xml** file in src/main/resources/META-INF directory.

```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;
```

### Implement security

First we have to enable the security using the `@DeclareRoles` annotation on the main application class of the REST 
service:

```java
@DeclareRoles({"user", "admin"})
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
```

Then take the Keycloak JSON configuration and set it as an environment variable by using the following key:

`KUMULUZEE_SECURITY_KEYCLOAK_JSON`

In this sample, we use environment variables to store the configuration; however the configuration can be also stored 
in a file or a config server. Please refer to KumuluzEE Config for more information. 

Promote the JAX-RS resource to a CDI bean, enable CDI security and add security constraints:

```java
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Secure
public class CustomerResource {

    @GET
    @PermitAll
    public Response getAllCustomers() {
        ...
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        ...
    }

    @POST
    @RolesAllowed("user")
    public Response addNewCustomer(Customer customer) {
        ...
    }

    @DELETE
    @Path("{customerId}")
    @RolesAllowed("user")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        ...
    }
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

### Test security

Try by creating a new customer first:

```bash
$ curl -X POST \
  http://localhost:8080/v1/customers \
  -H 'content-type: application/json' \
  -d '{
	"id": 1,
	"firstName": "John",
	"lastName": "Doe"
  }'
```

If everything was implemented correctly you should receive a 401 HTTP response error.

Now obtain an access token from Keycloak (**NOTE**: To do this, you will first have to retrieve the client ID your 
public client on Keycloak and the username and password of your Keycloak user):

```bash
$ curl -X POST \
  http://localhost:8082/auth/realms/customers-realm/protocol/openid-connect/token \
  -H 'content-type: application/x-www-form-urlencoded' \
  -d 'grant_type=password&amp;client_id=customers-app&amp;username=johndoe&amp;password=abc123'
```

After receiving the access token try again by creating a new customer, now with the access token in the request:
  
```bash
$ curl -X POST \
  http://localhost:8080/v1/customers \
  -H 'authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJUeWlBbFVPMTlKZm82T0N6NWE1T0pVWF94MDV0dndsT3BKVnRqUk4ycExBIn0.eyJqdGkiOiJhMjIxZDc5Yi01ZmY4LTRlMDEtYjVmOS1jODRkMGM1MDRmNjYiLCJleHAiOjE0OTU1MjQ0ODEsIm5iZiI6MCwiaWF0IjoxNDk1NTIzODgxLCJpc3MiOiJodHRwczovL3Rlc3Qtb3JjbC52bS5hcGltYW5hZ2VyLmNsb3VkLnNpL2F1dGgvcmVhbG1zL2t1bXVsdXotYXBpIiwiYXVkIjoia3VtdWx1ei1hcGktZnJvbnRlbmQiLCJzdWIiOiJhNDdkY2Y0Yy1hNTVlLTRjNTktODRkNy02NTkwMjM5NjlmZmUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdW11bHV6LWFwaS1mcm9udGVuZCIsIm5vbmNlIjoiZThiYzIxYmUtY2JiMC00NGYzLTg5NDktNGE5YmY2NDdiYTJiIiwiYXV0aF90aW1lIjoxNDk1NTIzODgwLCJzZXNzaW9uX3N0YXRlIjoiODRkYzkyYTAtZmI2Mi00YTkzLTg0NGItOTkwMzU4NjVjN2FlIiwiYWNyIjoiMSIsImNsaWVudF9zZXNzaW9uIjoiYWY0NzU1MWQtZGVjOS00YjA0LWIxZGItNTc3MTQ0Zjc4YjY5IiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMiIsImh0dHA6Ly9hcGkua3VtdWx1ei5jb20iLCJodHRwczovL3Rlc3Qtb3JjbC52bS5hcGltYW5hZ2VyLmNsb3VkLnNpIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJhcGlwdWJsaXNoZXIiLCJhZG1pbiIsImFwaWFkbWluIiwiYXBpdXNlciIsInVzZXIiXX0sInJlc291cmNlX2FjY2VzcyI6eyJyZWFsbS1tYW5hZ2VtZW50Ijp7InJvbGVzIjpbIm1hbmFnZS11c2VycyIsInZpZXctdXNlcnMiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJuYW1lIjoiQmVuamFtaW5uIEthc3RlbGljYyIsInByZWZlcnJlZF91c2VybmFtZSI6ImJlbmphbWluazIiLCJnaXZlbl9uYW1lIjoiQmVuamFtaW5uIiwiZmFtaWx5X25hbWUiOiJLYXN0ZWxpY2MiLCJlbWFpbCI6ImJlbmphbWluLmthc3RlbGljQGNsb3VkLnNpIn0.DteMq7VPuwrghiHE_f0DSlcznLkkoe2fVpXj6jgXCm2ei-f1TK2AtJ3bni-FndQcVYu6VE_-KDCVx0L4wMLsOLTVmrUKQDBzL04P51-h9bj5Oi7Ri0gAkQLmr0Ftg_Ixr5NGkvGAgmvmngZ0JIRWzue7QZdUU3XwJc8mZJYlRe9kqaSCg-ALvQiwe27I6u5jSyb0U8XM8fIzDj5ubwLqfeU_FopLrQoZ5ZjdFCgN_lR4KtlbkvKim1omyuOaPkJkddX3269KKT6veLkmRNxlOrznXtzVgeDwziSVFNoSTDEhqM7KjsfxE0tU2KqV7MLCzknWnjHW1A93_1_Em1MmRw' \
  -H 'content-type: application/json' \
  -d '{
	"id": 1,
	"firstName": "John",
	"lastName": "Doe"
  }'
```

A customer should now be created successfully and you should receive a 204 HTTP status code.
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/connections/SubjectConnection.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities.connections;

import com.kumuluz.ee.samples.graphql_advanced.dtos.Subject;

import java.util.List;

public class SubjectConnection extends ConnectionBase&lt;Subject&gt; {

    public SubjectConnection(List&lt;Subject&gt; edges, long totalCount) {
        super(edges, totalCount);
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-blog-samples&lt;/artifactId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-kubernetes&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;

    &lt;name&gt;KumuluzEE Kubernetes&lt;/name&gt;

    &lt;modules&gt;
        &lt;module&gt;customers&lt;/module&gt;
        &lt;module&gt;orders&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;

        &lt;kumuluzee.version&gt;2.6.0&lt;/kumuluzee.version&gt;
        &lt;kumuluzee-rest.version&gt;1.1.0&lt;/kumuluzee-rest.version&gt;
        &lt;kumuluzee-logs.version&gt;1.3.0&lt;/kumuluzee-logs.version&gt;
        &lt;kumuluzee-cors.version&gt;1.0.2&lt;/kumuluzee-cors.version&gt;
        &lt;kumuluzee-config.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-config.version&gt;
        &lt;kumuluzee-discovery.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-discovery.version&gt;
        &lt;kumuluzee-fault-tolerance.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-fault-tolerance.version&gt;
        &lt;kumuluzee-metrics.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-metrics.version&gt;
        &lt;kumuluzee-security.version&gt;1.1.0-SNAPSHOT&lt;/kumuluzee-security.version&gt;
        &lt;kumuluzee-health.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-health.version&gt;
        &lt;kumuluzee-config-mp.version&gt;1.1.0-SNAPSHOT&lt;/kumuluzee-config-mp.version&gt;
        &lt;kumuluzee-streaming.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-streaming.version&gt;

        &lt;httpclient.version&gt;4.5.3&lt;/httpclient.version&gt;
        &lt;postgresql.version&gt;42.1.4&lt;/postgresql.version&gt;

    &lt;/properties&gt;

    &lt;dependencyManagement&gt;

        &lt;!-- KumuluzEE dependencies --&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-rest.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.cors&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-cors&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-cors.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-fault-tolerance-hystrix&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-fault-tolerance.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.health&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-health&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-health.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;!-- External dependencies --&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
                &lt;version&gt;${postgresql.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.swagger&lt;/groupId&gt;
                &lt;artifactId&gt;swagger-core&lt;/artifactId&gt;
                &lt;version&gt;${swagger.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.swagger&lt;/groupId&gt;
                &lt;artifactId&gt;swagger-jersey2-jaxrs&lt;/artifactId&gt;
                &lt;version&gt;${swagger.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
                &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
                &lt;version&gt;${httpclient.version}&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;!-- Project modules dependencies --&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
                &lt;artifactId&gt;customers-api&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
                &lt;artifactId&gt;customers-business-logic&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
                &lt;artifactId&gt;customers-persistence&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
                &lt;artifactId&gt;orders-api&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
                &lt;artifactId&gt;orders-business-logic&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
                &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-blog-samples&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Blog Samples&lt;/name&gt;

    &lt;packaging&gt;pom&lt;/packaging&gt;
    &lt;modules&gt;
        &lt;module&gt;kumuluzee-kubernetes&lt;/module&gt;
    &lt;/modules&gt;

&lt;/project&gt;</pre></body></html>




File path: jsf/src/main/java/com/kumuluz/ee/samples/jsf/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jsf;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return "Customer {\n" +
                "  id='" + id + "',\n" +
                "  firstName='" + firstName + "',\n" +
                "  lastName='" + lastName + "'\n" +
                "}";
    }
}
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/java/com/kumuluz/ee/samples/amqp/rabbitmq/messaging/MessageProducer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.amqp.rabbitmq.messaging;

import com.kumuluz.ee.amqp.common.annotations.AMQPChannel;
import com.kumuluz.ee.amqp.common.annotations.AMQPProducer;
import com.kumuluz.ee.amqp.rabbitmq.utils.producer.Message;
import com.kumuluz.ee.samples.amqp.rabbitmq.api.RestMessage;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.MessageProperties;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.io.IOException;

/**
 * @author Blaž Mrak
 * @since 3.2.0
 */

@ApplicationScoped
public class MessageProducer {

    @Inject
    @AMQPChannel("MQtest")
    private Channel channel;

    public void sendRestMessage(RestMessage restMessage) {
        try {
            channel.basicPublish(restMessage.getExchange(), restMessage.getKey(), null,
                    restMessage.getMessage().getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @AMQPProducer(host = "MQtest", exchange = "directExchange", key = "red", properties = "textPlain")
    public String sendRed() {
        return "I'm Red!";
    }

    @AMQPProducer(host = "MQtest", exchange = "directExchange", key = "object")
    public ExampleObject sendObject() {
        ExampleObject exampleObject = new ExampleObject();
        exampleObject.setContent("I'm just an object.");
        return exampleObject;
    }

    @AMQPProducer(host = "MQtest", exchange = "directExchange", key = "message", properties = "testProperty")
    public Message sendObjectMessageCustomProperty() {
        Message message = new Message();
        ExampleObject exampleObject = new ExampleObject();
        exampleObject.setContent("I'm an object in a message with custom properties.");
        return message.body(exampleObject);
    }

    @AMQPProducer(host = "MQtest2", key = "testQueue")
    public Message sendToQueue() {
        Message message = new Message();
        ExampleObject exampleObject = new ExampleObject();
        exampleObject.setContent("I'm an object in a message");
        return message.body(exampleObject).basicProperties(MessageProperties.BASIC);
    }

    @AMQPProducer
    public Message sendFullMessage() {
        Message message = new Message();
        ExampleObject exampleObject = new ExampleObject();
        exampleObject.setContent("I'm an object in a special message");

        if (Math.random() &lt; 0.5) {
            message.host("MQtest")
                    .key(new String[]{"object"})
                    .exchange("directExchange")
                    .basicProperties(MessageProperties.BASIC);
        } else {
            message.host("MQtest2")
                    .key(new String[]{"testQueue"})
                    .basicProperties("testProperty");
        }

        return message.body(exampleObject);
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/dtos/Error.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.dtos;

public class Error {

    private Integer status;
    private String code;
    private String message;

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

}

</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/connections/StudentConnection.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities.connections;

import com.kumuluz.ee.samples.graphql_advanced.entities.Student;

import java.util.List;

public class StudentConnection extends ConnectionBase&lt;Student&gt; {

    public StudentConnection(List&lt;Student&gt; edges, long totalCount) {
        super(edges, totalCount);
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/beta/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/beta/Resource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.beta;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.concurrent.ThreadLocalRandom;

@Path("beta")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class Resource {
    private Client client = ClientBuilder.newClient();

    @GET
    public Response get() {
        try {
            Thread.sleep(ThreadLocalRandom.current().nextInt(1, 1000 + 1));
            Response r1 = client
                    .target("http://localhost:8081/v1") //alpha
                    .path("alpha")
                    .path("beta")
                    .request()
                    .get();
            String response = r1.readEntity(String.class);
            return Response.ok("beta-&gt;" + response).build();
        } catch (Exception e) {
            return Response.serverError().build();
        }
    }
}
</pre></body></html>




File path: https/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-listener/src/main/java/com/kumuluz/ee/samples/reactive/vertx/ListenerVerticle.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import io.vertx.core.AbstractVerticle;

/**
*
* @author Žan Ožbot
*/
public class ListenerVerticle extends AbstractVerticle {

	@Override
	public void start() {
		vertx.eventBus().consumer("tacos", event -&gt; {
			if (event.body() != null) {
				System.out.println("Message received: " + event.body());
			}
		});
	}

}
</pre></body></html>




File path: servlet/src/main/java/com/kumuluz/ee/samples/servlet/CustomerServlet.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.servlet;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@WebServlet("CustomerServlet")
public class CustomerServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List&lt;Customer&gt; customers = Database.getCustomers();
        if (customers == null || customers.isEmpty())
            response.getWriter().println("No customers found.");
        else {
            for (Customer customer : customers) {
                response.getWriter().println(customer.toString());
                response.getWriter().println();
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Event Streaming Kafka &amp;mdash; produce Kafka messages

&gt; Develop a REST service that produces Kafka messages to selected topic

The objective of this sample is to show how to produce Kafka messages with a simple Rest service using KumuluzEE Event Streming extension. The tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into pom.xml. You will develop a simple REST service, which uses KumuluzEE Event Streaming Kafka extension for producing messages.
Required knowledge: basic familiarity with JAX-RS and REST; basic familiarity with Apache Kafka.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need an Kafka and Zookeeper instance [Kafka Quickstart](https://kafka.apache.org/quickstart).
There are a lot of Kafka Docker available on the Docker hub, in this tutorial we use  
[ches/kafka](https://hub.docker.com/r/ches/kafka/) and a separate Docker with the Zookeeper instance [jplock/zookeeper](https://hub.docker.com/r/jplock/zookeeper/)
Here is an example on how to quickly run the Zookeeper and Kafka Docker:

```bash
$ docker network create kafka-net
  
$ docker run -d -p 2181:2181 --name zookeeper --network kafka-net zookeeper:3.4
$ docker run -d -p 9092:9092 --name kafka --network kafka-net --env ZOOKEEPER_IP=zookeeper --env KAFKA_ADVERTISED_HOST_NAME={docker_host_ip} ches/kafka
```

Replace `{docker_host_ip}` with you Docker host IP.

## Usage

The example uses Docker to set up the Kafka and Zookeeper instances and maven to build and run the microservice.

1. Start the Zookeeper and Kafka Docker:

    ```bash
    $ docker network create kafka-net
      
    $ docker run -d -p 2181:2181 --name zookeeper --network kafka-net zookeeper:3.4
    $ docker run -d -p 9092:9092 --name kafka --network kafka-net --env ZOOKEEPER_IP=zookeeper --env KAFKA_ADVERTISED_HOST_NAME={docker_host_ip} ches/kafka
    ```
    
    Replace `{docker_host_ip}` with you Docker host IP.
    
    To consume messages in the terminal, you can use the Kafka CLI command:
    
    ```bash
    $ docker run --rm --network kafka-net ches/kafka \
      kafka-console-consumer.sh --topic test --from-beginning --bootstrap-server kafka:9092
    ```
    

2. Build the sample using maven:
   
   ```bash
   $ cd kumuluzee-streaming-kafka/kumuluzee-kafka-producer
   $ mvn clean package
   ```

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
4. The mesage producing service can be accessed on the following URL:
    * JAX-RS REST resource, for producing messages - http://localhost:8080/v1/produce
    with a POST request with a json object, for example:
    
    ```javascript
      {
        "content":"Hello World",
        "key":"1",
        "topic":"test"
      }
    ```

To shut down the example simply stop the processes in the foreground and all Docker containers started for this example.

## Tutorial

This tutorial will guide you through the steps required to create a service, which uses KumuluzEE Event Streaming Kafka extension.
We will develop a simple REST service for producing Kafka messages:
* POST http://localhost:8080/v1/produce

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components with the microProfile-1.0 dependency
* Add Maven dependency to KumuluzEE Event Streaming Kafka extension
* Implement the service
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-microProfile-1.0` and `kumuluzee-streaming-kafka` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```
We will use `kumuluzee-logs` for logging in this sample, so you need to include kumuluzee logs implementation dependency:
```xml
&lt;dependency&gt;
    &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
    &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
    &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
&lt;/dependency&gt;
```
For more information about the KumuluzEE Logs visit the [KumuluzEE Logs Github page](https://github.com/kumuluz/kumuluzee-logs).
Currently, Log4j2 is supported implementation of `kumuluzee-logs`, so you need to include a sample Log4j2 configuration, 
which should be in a file named `log4j2.xml` and located in `src/main/resources`:
```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
```
If you would like to collect Kafka related logs through the KumuluzEE Logs, you have to include the following `slf4j` implementation as dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
    &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the servlet

We use a Message POJO in this example for receiving the message data from the POST request:

```java
public class Message {
    private String key;
    private String content;
    private String topic;

    public String getTopic() {
        return topic;
    }

    public void setTopic(String topic) {
        this.topic = topic;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }
}
```

Register your module as JAX-RS service and define the application path. You could do that in web.xml or
for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class ProducerApplication extends Application {
}
```

Implement JAX-RS resource, with a POST method for producing messages. Inject the Kafka Producer with the `@StreamProducer` 
annotation and implement the producing of Kafka messages:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/produce")
@RequestScoped
public class ProducerResource {

    @Inject
    @StreamProducer
    private KafkaStreamProducer producer;

    @POST
    public Response produceMessage(Message msg){

        ProducerRecord&lt;String,String&gt; record = new ProducerRecord&lt;String,String&gt;( msg.getTopic(), msg.getKey(), msg.getContent());

        producer.send(record,
                (metadata, e) -&gt; {
                    if(e != null) {
                        e.printStackTrace();
                    } else {
                        System.out.println("The offset of the produced message record is: " + metadata.offset());
                    }
                });

        return Response.ok().build();

    }
}
```

In the example above, we inject the Kafka Producer with the `@Inject` and `@StreamProducer` annotation. From the message data we create 
a ProducerRecord `new ProducerRecord&lt;String,String&gt;(topic, key, msg)` and call the method send on the producer with the ProducerRecord 
and the Callback parameters. In the Callback we receive the sent message metadata `RecordMetadata` or the Exception if an error occurred.

### Add required configuration for the Kafka Producer

You have to add the Kafka Producer configuration using any KumuluzEE configuration source.

For example, you can use config.yaml file, placed in resources folder:

```yaml
kumuluzee:
  streaming:
    kafka:
      producer:
        bootstrap-servers: localhost:9092
        acks: all
        retries: 0
        batch-size: 16384
        linger-ms: 1
        buffer-memory: 33554432
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

</pre></body></html>




File path: kumuluzee-logs-fluentd/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-logs-fluentd/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/java/com/kumuluz/ee/samples/kumuluzee_database_schema_migrations_liquibase/BookResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_database_schema_migrations_liquibase;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Din Music
 * @since 3.13.0
 */
@Path("books")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@RequestScoped
public class BookResource {

    @Inject
    private BookService bookService;

    @GET
    @Path("{bookId}")
    public Response getBook(@PathParam("bookId") String bookId) {
        Book book = bookService.getBook(bookId);
        return (book != null)
                ? Response.ok(book).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @GET
    public Response getBooks() {
        List&lt;Book&gt; books = bookService.getBooks();
        return Response.ok(books).build();
    }

    @POST
    public Response addBook(Book book) {
        Book addedBook = bookService.addBook(book);
        return Response.ok(addedBook).build();
    }

    @DELETE
    @Path("{bookId}")
    public Response deleteBook(@PathParam("bookId") String bookId) {
        bookService.deleteBook(bookId);
        return Response.noContent().build();
    }

}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/producers/JacksonProducer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.producers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Provider;
import java.text.SimpleDateFormat;
import java.util.TimeZone;

@Provider
public class JacksonProducer implements ContextResolver&lt;ObjectMapper&gt; {

    private final ObjectMapper mapper;

    public JacksonProducer() {

        mapper = new ObjectMapper();

        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        mapper.setDateFormat(dateFormat);
    }

    @Override
    public ObjectMapper getContext(Class&lt;?&gt; aClass) {
        return mapper;
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-publisher/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Verticle Publisher &amp;mdash; publish on Vert.x event bus

&gt; Publish events on Vert.x event bus using a Verticle

The objective of this sample is to publish events on Vert.x event bus which will be captured with a microservice using KumuluzEE Reactive Vert.x extension. The tutorial will guide you through all the necessary steps. You will add dependencies into `pom.xml`. You will develop a simple Verticle that will publish on Vert.x event bus. Required knowledge: basic familiarity with Vert.x.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build a fat jar.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-reactive-vertx/simple-verticles/verticle-publisher
    $ mvn clean package
    ```

2. Run the sample:

    ```batch
    java -jar target\${project.build.finalName}-fat.jar -cluster
    ```
 
3. Message will be printed out in the terminal when the Verticle receives it.

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a Vert.x event bus publisher Verticle.

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies
* Implement publisher Verticle
* Build and run

### Add Maven dependencies

Add `vertx-core` and `vertx-hazelcast` for clustering.

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.vertx&lt;/groupId&gt;
        &lt;artifactId&gt;vertx-core&lt;/artifactId&gt;
        &lt;version&gt;${vertx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.vertx&lt;/groupId&gt;
        &lt;artifactId&gt;vertx-hazelcast&lt;/artifactId&gt;
        &lt;version&gt;${vertx.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `maven-compiler-plugin` build plugin to compile, `maven-shade-plugin` to package and `exec-maven-plugin` to run the project.

### Implement publisher Verticle

Implement a class e.g. PublisherVerticle that extends `AbstractVerticle`.

In the example below we get a reference to the Vert.x event bus and start publishing messages on the given address `tacos` every 1000ms (1 second).

```java
import io.vertx.core.AbstractVerticle;

public class PublisherVerticle extends AbstractVerticle {

	@Override
	public void start() {
		vertx.setPeriodic(1000, id -&gt; {
			vertx.eventBus().send("tacos", "Hello from Vert.x.");
		});
	}

}
```

### Build and run it

To build and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/docker-compose.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">version: '3'

services:
  sample-zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: sample-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN-COUNT: 5
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    volumes:
      - ./tmp/etc/data/sample-zookeeper/data:/var/lib/zookeeper/data
      - ./tmp/etc/data/sample-zookeeper/txn-logs:/var/lib/zookeeper/log
      - ./tmp/etc/logs/sample-zookeeper:/var/log/zookeeper

  sample-kafka:
    image: confluentinc/cp-kafka:5.5.0
    container_name: sample-kafka
    depends_on:
      - sample-zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'sample-zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: "true"
      KAFKA_LISTENERS: PLAINTEXT://sample-kafka:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://sample-kafka:9092,EXTERNAL://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      CONFLUENT_SUPPORT_METRICS_TOPIC: ""
    volumes:
      - ./tmp/etc/data/sample-kafka/data:/var/lib/kafka/data
      - ./tmp/etc/logs/sample-kafka:/var/log/kafka

  sample-schema-registry:
    image: confluentinc/cp-schema-registry:5.5.0
    container_name: sample-schema-registry
    depends_on:
      - sample-kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "sample-zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: sample-schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    ports:
      - 8081:8081

  sample-schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    container_name: sample-schema-registry-ui
    depends_on:
      - sample-schema-registry
    environment:
      PROXY: "true"
      SCHEMAREGISTRY_URL: "http://sample-schema-registry:8081"
    ports:
      - 8000:8000

  sample-kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: sample-kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "sample-kafka:9092"
      SCHEMAREGISTRY_CONNECT: http://localhost:8081
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "sample-kafka"</pre></body></html>




File path: kumuluzee-discovery-consul/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery with Consul

&gt; Samples for KumuluzEE Discovery extension

This module contains four samples that will introduce you to KumuluzEE Discovery extension using Consul:

- [`discovery-consul-register`](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-register) JAX-RS microservice that registers itself to etcd
- [`discovery-consul-discover-servlet`](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-discover-servlet) servlet microservice that discovers
and calls `discovery-register` microservice
- [`discovery-consul-discover-jaxrs`](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-discover-jaxrs) JAX-RS microservice that discovers
and calls `discovery-consul-register` microservice 

More information about the samples can be found in the README of each sample.
</pre></body></html>




File path: bean-validation/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-graphql-jpa-security/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk

ObjectStore


</pre></body></html>




File path: kumuluzee-opentracing-tutorial/delta/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/delta/Resource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.delta;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("delta")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class Resource {

    @GET
    public Response get() {
        return Response.ok("delta").build();
    }
}
</pre></body></html>




File path: jpa/src/main/java/com/kumuluz/ee/samples/jpa/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jpa;

import javax.persistence.*;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Entity
@Table(name = "customer")
@NamedQueries({
        @NamedQuery(
                name = "Customer.findCustomers",
                query = "SELECT c " +
                        "FROM Customer c"
        )
})
public class Customer implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    @Column(name = "first_name")
    private String firstName;
    @Column(name = "last_name")
    private String lastName;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/generated/java/com/kumuluz/ee/samples/kafka/registry/avro/lib/Sum.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kumuluz.ee.samples.kafka.registry.avro.lib;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Sum extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5839116206984520767L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sum\",\"namespace\":\"com.kumuluz.ee.samples.kafka.registry.avro.lib\",\"fields\":[{\"name\":\"sum\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder&lt;Sum&gt; ENCODER =
      new BinaryMessageEncoder&lt;Sum&gt;(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder&lt;Sum&gt; DECODER =
      new BinaryMessageDecoder&lt;Sum&gt;(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder&lt;Sum&gt; getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder&lt;Sum&gt; getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder&lt;Sum&gt; createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder&lt;Sum&gt;(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Sum to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Sum from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Sum instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Sum fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence sum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use &lt;code&gt;newBuilder()&lt;/code&gt;.
   */
  public Sum() {}

  /**
   * All-args constructor.
   * @param sum The new value for sum
   */
  public Sum(java.lang.CharSequence sum) {
    this.sum = sum;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sum;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sum = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sum' field.
   * @return The value of the 'sum' field.
   */
  public java.lang.CharSequence getSum() {
    return sum;
  }


  /**
   * Sets the value of the 'sum' field.
   * @param value the value to set.
   */
  public void setSum(java.lang.CharSequence value) {
    this.sum = value;
  }

  /**
   * Creates a new Sum RecordBuilder.
   * @return A new Sum RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder newBuilder() {
    return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder();
  }

  /**
   * Creates a new Sum RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sum RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder(other);
    }
  }

  /**
   * Creates a new Sum RecordBuilder by copying an existing Sum instance.
   * @param other The existing instance to copy.
   * @return A new Sum RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder(other);
    }
  }

  /**
   * RecordBuilder for Sum instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase&lt;Sum&gt;
    implements org.apache.avro.data.RecordBuilder&lt;Sum&gt; {

    private java.lang.CharSequence sum;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sum)) {
        this.sum = data().deepCopy(fields()[0].schema(), other.sum);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing Sum instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sum)) {
        this.sum = data().deepCopy(fields()[0].schema(), other.sum);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'sum' field.
      * @return The value.
      */
    public java.lang.CharSequence getSum() {
      return sum;
    }


    /**
      * Sets the value of the 'sum' field.
      * @param value The value of 'sum'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder setSum(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sum = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sum' field has been set.
      * @return True if the 'sum' field has been set, false otherwise.
      */
    public boolean hasSum() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sum' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Sum.Builder clearSum() {
      sum = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sum build() {
      try {
        Sum record = new Sum();
        record.sum = fieldSetFlags()[0] ? this.sum : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter&lt;Sum&gt;
    WRITER$ = (org.apache.avro.io.DatumWriter&lt;Sum&gt;)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader&lt;Sum&gt;
    READER$ = (org.apache.avro.io.DatumReader&lt;Sum&gt;)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.sum);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sum = in.readString(this.sum instanceof Utf8 ? (Utf8)this.sum : null);

    } else {
      for (int i = 0; i &lt; 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sum = in.readString(this.sum instanceof Utf8 ? (Utf8)this.sum : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/com/kumuluz/ee/samples/ethereum/services/CustomerService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.ethereum.services;

import com.kumuluz.ee.samples.ethereum.entities.Customer;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Domen Gašperlin
 * @since 1.0.0
 */
@ApplicationScoped
public class CustomerService {

    public List&lt;Customer&gt; getCustomers() {

        // To get access customers from database use entity manager

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

        Customer cst = new Customer();

        cst.setFirstName("John");

        cst.setLastName("Brown");

        cst.setWalletAddress("0x1978bfaabc3ccdd7fe9583a41d7fcc574be3f82d");

        customers.add(cst);

        return customers;
    }

    // Logic for CRUD operations on customers.
}
</pre></body></html>




File path: https/src/main/java/jaxrs/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package jaxrs;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/delta/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk


</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/java/com/kumuluz/ee/samples/jaxws/cxf/service/CustomersService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxws.cxf.service;

import com.kumuluz.samples.jax_ws.cxf.customers._1.Customer;

import java.util.List;

/**
 * @author gpor89
 * @since 3.0.0
 */
public interface CustomersService {

    List&lt;Customer&gt; getCustomers();

}
</pre></body></html>




File path: kumuluzee-jcache/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JCache sample

This sample shows basic usage of JCache static and dynamic configuration, usage of JCache annotations, programmatic API, CDI producers for Cache object and JCache listener registration.

A simple postman collection is included for testing.

# Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

# Tutorial

First create a basic rest application, you can refer to `kumuluzee-rest` sample for that.

## Add JCache dependency

Add `kumuluzee-jcache-caffeine` dependency to your `pom.xml`.

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.jcache&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-jcache-caffeine&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
```

## REST API

We create 3 different API endpoints for different test cases.

```java
//This endpoint will invoke @CachePut to simulate storing to cache
@POST
@Path("/{id}")
public Response addData(@PathParam("id") String id, InvoiceData in) {
    InvoiceData data = invoiceService.putInvoice(id, in);
    return Response.ok(data).build();
}

//This endpoint will invoke @CacheResult to return cached result from the first method 
//return and cache result from "database" for ids 654321-654325 or return HTTP 404 if id does not exist.
@GET
@Path("/{id}")
public Response getData(@PathParam("id") String id) {
    InvoiceData data = invoiceService.getInvoice(id);
    return Response.ok(data).build();
}

//This endpoint will invoke cache named "default" and simulate @CacheResult programmatically
@GET
@Path("/{id}/default")
public Response getInvoicesDefault(@PathParam("id") String id) {
    InvoiceData data = invoiceService.getInvoiceDefault(id);
    return Response.ok(data).build();
}
```

Our business logic will implement the following interface:
```java
public interface InvoiceService {

    //@CachePut
    InvoiceData putInvoice(String key, InvoiceData data);

    //@CacheResult
    InvoiceData getInvoice(String key);

    //Programatic API
    InvoiceData getInvoiceDefault(String key);
}
```

## JCache annotations

For our JCache annotations we will use a cache named `invoices`. The first step is to configure it in `config.yaml`:
```yaml
kumuluzee:
  jcache:
    enabled: true
    caffeine:
      caffeine.jcache:
        invoices:
          key-type: java.lang.String
          value-type: com.kumuluz.ee.samples.jcache.rest.lib.InvoiceData
          policy:
            eager-expiration:
              after-write: "15s"
            maximum:
              size: 2
```
Cache will take `String` as a key and `InvoiceData` object as value. Entries eagerly expire after 15 seconds and maximum number of entries in cache is 2.

Let's implement `InvoiceService`. The put method only stores data to db and cache and returns the same data. We want to use the path ID parameter as the cache key, so we annotate it with `@CacheKey`. We want to store the POST body as value, so we annotate it with `@CacheValue`.
```java
@CachePut(cacheName = "invoices")
@Override
public InvoiceData putInvoice(@CacheKey String key, @CacheValue InvoiceData data) {
    return data;
}
```

If we call this endpoint now:
```
POST http://localhost:8080/invoices/123
{
	"id": "123456"
}
```
We can't really see anything yet since data is only stored to cache and immediately returned.

Implementing the getter:
```java
@CacheResult(cacheName = "invoices")
    public InvoiceData getInvoice(@CacheKey String key) {

        LOG.info("getInvoice() Returning non-cached data");

        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        if (db.containsKey(key)) {
            return db.get(key);
        }
        else {
            throw new NotFoundException();
        }
    }
```

We use the same path ID parameter as cache key. If the key is already present, `@CacheResult` will return the cached value, otherwise it will try to find it in database and ultimately fail with 404 if no key is found. A sleep of 3 seconds is added to simulate slow business logic.
Also note that we use the same named cache called `invoices` so both annotations operate on the same cache.

To test it, run the application and load the included postman collection.

1. CachePut+CacheResult test
```
POST http://localhost:8080/invoices/123456
{
	"id": "123456"
}
```
```
GET http://localhost:8080/invoices/123456
```
Executing both calls one after the other, we get a very fast response (t&lt;3s) from the GET method due to value already existing in cache.
Waiting 15 seconds and executing GET again results in t&gt;3s due to cache entry eagerly expiring and result is returned from database. However, calling the GET method again will be fast due to CacheResult storing the previous result for us.

2. CacheResult test
```
GET http://localhost:8080/invoices/123456
```
Simply executing the call repeatedly will cause a slow call every 15 seconds.

3. CacheResult max entries test
```
GET http://localhost:8080/invoices/654321
GET http://localhost:8080/invoices/654322
GET http://localhost:8080/invoices/654323
```
Execute each GET request twice. First call is slow, second is fast. After executing #3, one of the calls to #2 or #1 will be slow, depending on which entry got evicted from the cache. Caffeine does not use straight up LRU strategy. Exactly which entry will be evicted depends on [https://github.com/ben-manes/caffeine/wiki/Efficiency](eviction strategy) used by Caffeine.

## JCache programmatic API

Finally, let's implement an equivalent to `@CacheResult` with programmatic API. First, configure a cache named `default`.

```yaml
kumuluzee:
  jcache:
    enabled: true
    caffeine:
      caffeine.jcache:
        default:
          policy:
            eager-expiration:
              after-write: "10s"
            maximum:
              size: 10000
```

Programmatic API revolves around the `Cache` object which is thread safe and a single instance per named cache should exist for our application. Therefore we need an application scoped producer.

```java
public class CacheProducer {

    @Inject
    private CacheManager cacheManager;

    @DefaultCache
    @Produces
    @ApplicationScoped
    public Cache&lt;String, InvoiceData&gt; getDefaultCache() {
        return cacheManager.getCache("default");
    }
}
```
Since `default` is already configured in `config.yaml` we can simply get the cache from the manager. If we have multiple Cache producers we also add a producer qualifier to differentiate the injects:
```java
@Qualifier
@Retention(RUNTIME)
public @interface DefaultCache {
}
```

Implement the business logic method:

```java
@ApplicationScoped
public class InvoiceServiceImpl implements InvoiceService {

    @DefaultCache
    @Inject
    private Cache&lt;String, InvoiceData&gt; defaultCache;

    @Override
    public InvoiceData getInvoiceDefault(String key) {

        if (defaultCache.containsKey(key)) {
            return defaultCache.get(key);
        }
        else {
            LOG.info("getInvoiceDefault() Returning non-cached data");

            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (db.containsKey(key)) {
                defaultCache.put(key, db.get(key));
                return db.get(key);
            }
            else {
                throw new NotFoundException();
            }
        }
}
```

You can also find a `my` named cache in the sample code which demonstrates how to dynamically configure a `Cache` instead of using a config file.</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

/**
 * @author Urban Malc
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-fault-tolerance/customer-api/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Event Streaming samples using Kafka

&gt; Samples for KumuluzEE Event Streaming Kafka project with Schema Registry

This module contains three samples that will introduce you to KumuluzEE
Event Streaming project using Kafka and Schema Registry:

- [`kumuluzee-streaming-kafka-registry-producer`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer) Kafka message producer microservice that produces messages using Avro schema and Confluent Schema Registry
- [`kumuluzee-streaming-kafka-registry-consumer`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer) Kafka message consumer microservice that consumes messages using Avro schema and Confluent Schema Registry
- [`kumuluzee-streaming-kafka-streams`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams) Kafka Streams microservice for stream processing using Avro schema and Confluent Schema Registry

More information about the samples can be found in the README of each sample.

You can use the docker-compose.yaml in root of this project to start all the necessary Kafka containers. Start with `docker-compose up -d`.

You should start with the producer README, followed by the consumer README and finally the streams README.

## What is Kafka Schema Registry and why should I use it?
Schema Registry allows us to keep record data consistent and compatible between updates and reduces the possibility of breaking consumers when producers start producing modified data. Without schema registry, if developer wants to remove, add or modify the record fields in any way, he or she must carefully consider how the change will effect the downstream consumers and whether or not the change is breaking for the consumers.

With Schema Registry, we can set a compatibility level for each topic and registry will prevent us from registering any new schema that breaks that compatibility.

## Additional Notes
Confluent dependencies are only available through the Confluent Maven Repository which is configured in root pom of this project.
</pre></body></html>




File path: microservices-simple/catalogue/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  datasources:
    - jndi-name: jdbc/BooksDS
      connection-url: jdbc:postgresql://localhost:5432/postgres
      username: postgres
      password: postgres
      pool:
        max-size: 20</pre></body></html>




File path: kumuluzee-reactive-vertx/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE Reactive samples using Vert.x&lt;/name&gt;
    &lt;description&gt;Samples for KumuluzEE Reactive Vert.x extension&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;kumuluzee-reactive-vertx-bridge&lt;/module&gt;
        &lt;module&gt;kumuluzee-reactive-vertx-listener&lt;/module&gt;
        &lt;module&gt;kumuluzee-reactive-vertx-publisher&lt;/module&gt;
        &lt;module&gt;simple-verticles&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;maven.compiler.version&gt;3.7.0&lt;/maven.compiler.version&gt;

        &lt;maven.shade.version&gt;3.1.0&lt;/maven.shade.version&gt;
        &lt;maven.exec.version&gt;1.6.0&lt;/maven.exec.version&gt;

        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;

        &lt;kumuluzee.version&gt;2.5.0-SNAPSHOT&lt;/kumuluzee.version&gt;
        &lt;kumuluzee-reactive-vertx.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-reactive-vertx.version&gt;
        &lt;kumuluzee-discovery.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-discovery.version&gt;

        &lt;vertx.version&gt;3.5.0&lt;/vertx.version&gt;
    &lt;/properties&gt;

&lt;/project&gt;</pre></body></html>




File path: jpa/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jpa&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JPA and CDI sample&lt;/name&gt;
    &lt;description&gt;JPA and CDI usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-hibernate&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jta-narayana&lt;/artifactId&gt;
        &lt;/dependency&gt;


        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;42.2.10&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://192.168.99.100:5432/customer
      username: dbuser
      password: postgres
      pool:
        max-size: 20
  config:
    etcd:
      hosts: http://192.168.99.100:2379
  discovery:
    etcd:
      hosts: http://192.168.99.100:2379
  metrics:
    web-instrumentation:
      - name: customers-endpoint
        url-pattern: /v1/customers/*
        registry-name: customersRegistry
  logs:
    config-file:
      '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
       &lt;Configuration name="tutorial-logging"&gt;
           &lt;Appenders&gt;
               &lt;Console name="console" target="SYSTEM_OUT"&gt;
                   &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
               &lt;/Console&gt;

               &lt;!-- A socket definition for sending logs into Logstash using TCP and JSON format.--&gt;
               &lt;!--&lt;Socket name="logstash" host="192.168.99.100" port="5043" protocol="tcp"&gt;
                   &lt;JSONLayout complete="false" compact="true" eventEol="true" charset="UTF-8" properties="true"/&gt;
               &lt;/Socket&gt;--&gt;

           &lt;/Appenders&gt;
           &lt;Loggers&gt;
               &lt;!-- Default logger --&gt;
               &lt;Root level="info"&gt;
                   &lt;AppenderRef ref="console"/&gt;
                   &lt;AppenderRef ref="logstash"/&gt;
               &lt;/Root&gt;
           &lt;/Loggers&gt;
       &lt;/Configuration&gt;'
  security:
    keycloak:
      json: '{
               "realm": "customers-realm",
               "bearer-only": true,
               "auth-server-url": "http://192.168.99.100:8082/auth",
               "ssl-required": "external",
               "resource": "customers-api"
             }'
  health:
    checks:
      data-source-health-check:
        connection-url: jdbc:postgresql://postgres-customers:5432/customer
        username: dbuser
        password: postgres
      disk-space-health-check:
        threshold: 100000000
  cors-filter:
        servlet:
          allow-origin: "*"
rest-properties:
  external-dependencies:
    order-service:
      enabled: true</pre></body></html>




File path: kumuluzee-graphql-jpa-security/src/main/java/com/kumuluz/ee/samples/graphql_security/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.graphql_security;

import com.kumuluz.ee.security.annotations.Secure;
import org.eclipse.microprofile.graphql.GraphQLApi;
import org.eclipse.microprofile.graphql.Mutation;
import org.eclipse.microprofile.graphql.Name;
import org.eclipse.microprofile.graphql.Query;

import javax.annotation.security.DenyAll;
import javax.annotation.security.PermitAll;
import javax.annotation.security.RolesAllowed;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@GraphQLApi
@Secure
public class CustomerResource {

    @Inject
    private CustomerService customerBean;

    @Query
    @PermitAll
    public List&lt;Customer&gt; getAllCustomers() {
       return customerBean.getCustomers();
    }

    @Query
    @RolesAllowed({"user", "admin"})
    public Customer getCustomer(@Name("customerId") String customerId) {
        return customerBean.getCustomer(customerId);
    }

    @Mutation
    @RolesAllowed("admin")
    public Customer addNewCustomer(@Name("customer") Customer customer) {
        customerBean.saveCustomer(customer);
        return customer;
    }

    @Mutation
    @DenyAll
    public Customer deleteCustomer(@Name("customerId") String customerId) {
        return customerBean.deleteCustomer(customerId);
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka-registry&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka-registry-producer&lt;/artifactId&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
            &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
            &lt;artifactId&gt;avro&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.confluent&lt;/groupId&gt;
            &lt;artifactId&gt;kafka-avro-serializer&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
                &lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;generate-sources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;schema&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;sourceDirectory&gt;src/main/resources/schemas/avro/v1.0.0&lt;/sourceDirectory&gt;
                            &lt;outputDirectory&gt;${project.basedir}/src/generated/java/&lt;/outputDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;io.confluent&lt;/groupId&gt;
                &lt;artifactId&gt;kafka-schema-registry-maven-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;schemaTypes&gt;
                        &lt;pricing-avro-value&gt;AVRO&lt;/pricing-avro-value&gt;
                    &lt;/schemaTypes&gt;
                    &lt;subjects&gt;
                        &lt;pricing-avro-value&gt;src/main/resources/schemas/avro/v1.0.0/pricing.avsc&lt;/pricing-avro-value&gt;
                    &lt;/subjects&gt;
                    &lt;outputDirectory&gt;${project.basedir}/src/main/resources/schemas/avro/v1.0.0&lt;/outputDirectory&gt;
                &lt;/configuration&gt;
                &lt;goals&gt;
                    &lt;goal&gt;test-compatibility&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-config&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Config sample&lt;/name&gt;
    &lt;description&gt;Kumuluz EE Config usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-fault-tolerance/customer-api/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/customer/producers/HttpClientProducer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.producers;

import org.apache.http.client.HttpClient;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.ssl.SSLContexts;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.net.ssl.SSLContext;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
public class HttpClientProducer {

    private static final int DEFAULT_POOL_MAX_CONNECTIONS = 5;

    @Produces
    @ApplicationScoped
    public HttpClient httpClient() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {

        SSLContext sslContext = SSLContexts.custom()
                .loadTrustMaterial(null, (certificate, authType) -&gt; true)
                .build();

        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);
        Registry socketFactorRegistry = RegistryBuilder.create()
                .register("http", PlainConnectionSocketFactory.getSocketFactory())
                .register("https", socketFactory)
                .build();

        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(socketFactorRegistry);
        connectionManager.setMaxTotal(DEFAULT_POOL_MAX_CONNECTIONS);

        return HttpClients.custom()
                .setSSLContext(sslContext)
                .setConnectionManager(connectionManager)
                .build();
    }

}
</pre></body></html>




File path: jsp/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;

    &lt;display-name&gt;KumuluzEE JSP sample&lt;/display-name&gt;

    &lt;!-- Welcome page --&gt;
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;welcome.jsp&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/src/main/java/com/kumuluz/ee/samples/reactive/vertx/VertxEventListener.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import com.kumuluz.ee.reactive.common.annotations.ReactiveEventListener;
import io.vertx.core.eventbus.Message;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
*
* @author Žan Ožbot
*/
@ApplicationScoped
public class VertxEventListener {
	
	private static final Logger log = Logger.getLogger(VertxEventListener.class.getName());
	
	private List&lt;String&gt; messages = new ArrayList&lt;&gt;();
	
	@ReactiveEventListener(address = "tacos")
	public void onMessage(Message&lt;Object&gt; event) {
		if(event.body() != null) {
			messages.add((String) event.body());
			log.info("New message received: " + event.body());
		} else {
			log.warning("Error when receiving messages.");
		}
	}
	
	public List&lt;String&gt; getFiveLastMessages() {
		if(messages.size() &lt;= 5) {
			return messages;
		}
		return messages.subList(messages.size() - 5, messages.size());
	}

}
</pre></body></html>




File path: kumuluzee-config-etcd/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigProperties.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;
import com.kumuluz.ee.configuration.cdi.ConfigValue;

import javax.enterprise.context.ApplicationScoped;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    @ConfigValue(watch = true)
    private String stringProperty;

    private Boolean booleanProperty;

    private Integer integerProperty;

    @ConfigValue(watch = true)
    private String encodedProperty;

    public String getStringProperty() {
        return stringProperty;
    }

    public void setStringProperty(String stringProperty) {
        this.stringProperty = stringProperty;
    }

    public Boolean getBooleanProperty() {
        return booleanProperty;
    }

    public void setBooleanProperty(Boolean booleanPropertysomeBoolean) {
        this.booleanProperty = booleanPropertysomeBoolean;
    }

    public Integer getIntegerProperty() {
        return integerProperty;
    }

    public void setIntegerProperty(Integer integerProperty) {
        this.integerProperty = integerProperty;
    }

    public String getEncodedProperty() {
        return encodedProperty;
    }

    public void setEncodedProperty(String encodedProperty) {
        this.encodedProperty = encodedProperty;
    }
}
</pre></body></html>




File path: kumuluzee-security-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: jpa/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
	   bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/beta/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: order-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8081
    http:
      port: 8081
  datasources:
    - jndi-name: jdbc/OrdersDS
      connection-url: jdbc:postgresql://192.168.99.100:5433/order
      username: postgres
      password: postgres
      pool:
        max-size: 20
  discovery:
    etcd:
      hosts: http://192.168.99.100:2379</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  env:
    name: production
  graphql:
    mapping: graphql
    ui:
      enabled: true
    defaults:
      offset: 0
      limit: 20
  datasources:
    - jndi-name: jdbc/Faculty
      connection-url: jdbc:postgresql://localhost:5432/faculty
      username: postgres
      password: postgres
      pool:
        max-size: 20
</pre></body></html>




File path: kumuluzee-openapi-mp/src/main/java/com/kumuluz/ee/samples/openapi/v2/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.openapi.v2;

import com.kumuluz.ee.samples.openapi.Customer;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;


import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.ArrayList;
import java.util.List;

/**
 * CustomerResource class with openAPI
 *
 * @author Zvone Gazvoda
 * @since 3.2.0
 */
@Path("customer")
@Produces(MediaType.APPLICATION_JSON)
public class CustomerResource {

    @GET
    @Operation(summary = "Get customers list", description = "Returns a list of customers.")
    @APIResponses({
            @APIResponse(description = "List of customers", responseCode = "200", content = @Content(schema = @Schema(implementation =
                    Customer.class, type = SchemaType.ARRAY)))
    })
    public Response getCustomers() {
        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");
        customers.add(c);
        return Response.status(Response.Status.OK).entity(customers).build();
    }

    @GET
    @Operation(summary = "Get customers details", description = "Returns customer details.")
    @APIResponses({
            @APIResponse(description = "Customer details", responseCode = "200", content = @Content(schema = @Schema(implementation =
                    Customer.class)))
    })
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer c = new Customer("1", "John", "Doe");
        return Response.status(Response.Status.OK).entity(c).build();
    }

}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/resources/LoadResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.resources;

import javax.enterprise.context.RequestScoped;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * Created by zvoneg on 13/10/2017.
 */
@RequestScoped
@Path("/load")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class LoadResource {

    @POST
    public Response createLoad(Integer n) {

        for (int i = 1; i &lt;= n; i++) {
            fibonacci(i);
        }

        return Response.status(Response.Status.OK).build();
    }

    private long fibonacci(int n) {
        if (n &lt;= 1) return n;
        else return fibonacci(n - 1) + fibonacci(n - 2);
    }
}
</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/java/com/kumuluz/ee/samples/amqp/rabbitmq/api/QueueApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.amqp.rabbitmq.api;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Blaž Mrak
 * @since 3.2.0
 */

@ApplicationPath("v1")
public class QueueApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/src/main/java/com/kumuluz/ee/samples/reactive/vertx/VertxResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import com.kumuluz.ee.reactive.common.annotations.ReactiveEventPublisher;
import io.vertx.core.eventbus.MessageProducer;
import io.vertx.core.json.JsonObject;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
*
* @author Žan Ožbot
*/
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("vertx")
@RequestScoped
public class VertxResource {
	
	@Inject
	@ReactiveEventPublisher(address = "tacos")
	MessageProducer&lt;Object&gt; tacos;
	
	@POST
	@Path("publish")
	public Response sendMessage(Message message) {
		tacos.send(message.getContent());
		
		JsonObject reponse = new JsonObject()
				.put("message", message.getContent())
				.put("status", "sent");
		
		return Response.ok(reponse.encodePrettily()).build();
	}
	
}
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/java/com/kumuluz/ee/samples/amqp/rabbitmq/api/QueueResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.amqp.rabbitmq.api;

import com.kumuluz.ee.samples.amqp.rabbitmq.messaging.MessageProducer;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author Blaž Mrak
 * @since 3.2.0
 */

@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@ApplicationScoped
public class QueueResource {

    @Inject
    private MessageProducer messageProducer;

    @POST
    public Response messageToSend(RestMessage message) {
        messageProducer.sendRestMessage(message);
        return Response.ok("\"RestMessage sent.\"").build();
    }

    @GET
    @Path("/red")
    public Response getRed() {
        messageProducer.sendRed();
        return Response.ok("\"Red message sent.\"").build();
    }

    @GET
    @Path("/object")
    public Response getObject() {
        messageProducer.sendObject();
        return Response.ok("\"Object message sent.\"").build();
    }

    @GET
    @Path("/message")
    public Response getMessageObjectCustomProperty() {
        messageProducer.sendObjectMessageCustomProperty();
        return Response.ok("\"Object message with custom properties sent.\"").build();
    }

    @GET
    @Path("/queue")
    public Response getMessageQueue() {
        messageProducer.sendToQueue();
        return Response.ok("\"Object message with custom properties sent.\"").build();
    }

    @GET
    @Path("/fullMessage")
    public Response getFullMessage() {
        messageProducer.sendFullMessage();
        return Response.ok("\"Object message sent to a random consumer.\"").build();
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-persistence/src/main/resources/sql-scripts/init-orders.sql
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">INSERT INTO orders (id, title, description, submitted, customer_id) VALUES (1, 'Keyboard', 'New mechanical keyboard.', TIMESTAMP '2017-03-01 11:23:38', 1);
INSERT INTO orders (id, title, description, submitted, customer_id) VALUES (2, 'Mouse', 'Black mouse.', TIMESTAMP '2017-04-12 01:12:38', 1);
INSERT INTO orders (id, title, description, submitted, customer_id) VALUES (3, 'Monitor', 'LCD monitor.', TIMESTAMP '2017-06-17 12:00:08', 3);</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-business-logic/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/java/com/kumuluz/ee/samples/kumuluzee_database_schema_migrations_liquibase/BookService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_database_schema_migrations_liquibase;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

/**
 * @author Din Music
 * @since 3.13.0
 */
@RequestScoped
public class BookService {

    @PersistenceContext
    private EntityManager em;

    public Book getBook(String id) {
        return em.find(Book.class, id);
    }

    public List&lt;Book&gt; getBooks() {
        return em.createNamedQuery(Book.FIND_ALL, Book.class).getResultList();
    }

    public Book addBook(Book book) {

        try {
            beginTx();
            em.persist(book);
            commitTx();

        } catch (Exception e) {
            rollbackTx();
        }
        return book;
    }

    public void deleteBook(String id) {

        Book book = getBook(id);

        if (book != null) {

            try {
                beginTx();
                em.remove(book);
                commitTx();

            } catch (Exception e) {
                rollbackTx();
            }
        }
    }

    private void beginTx() {
        if (!em.getTransaction().isActive())
            em.getTransaction().begin();
    }

    private void commitTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().commit();
    }

    private void rollbackTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().rollback();
    }

}
</pre></body></html>




File path: kumuluzee-logs-log4j2/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-metrics/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://xmlns.jcp.org/xml/ns/javaee
		http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;

&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery &amp;mdash; discover services in JAX-RS service 

&gt; Develop a REST service that discovers a microservice registered with etcd.

The objective of this sample is to show how to discover a service, registered with etcd using KumuluzEE Discovery 
extension. The tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into pom
.xml. You will develop a simple REST service, which uses KumuluzEE Discovery extension for service discovery.
Required knowledge: basic familiarity with JAX-RS and REST; basic familiarity with etcd.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need an etcd instance. Note that such setup with only one etcd node is not viable for 
production environments, but only for developing purposes. Here is an example on how to quickly run an etcd instance 
with docker:

   ```bash
    $ docker run -d -p 2379:2379 \
      --name etcd \
      --volume=/tmp/etcd-data:/etcd-data \
      quay.io/coreos/etcd:latest \
      /usr/local/bin/etcd \
      --name my-etcd-1 \
      --data-dir /etcd-data \
      --listen-client-urls http://0.0.0.0:2379 \
      --advertise-client-urls http://0.0.0.0:2379 \
      --listen-peer-urls http://0.0.0.0:2380 \
      --initial-advertise-peer-urls http://0.0.0.0:2380 \
      --initial-cluster my-etcd-1=http://0.0.0.0:2380 \
      --initial-cluster-token my-etcd-token \
      --initial-cluster-state new \
      --auto-compaction-retention 1 \
      -cors="*"
   ```


You will also need a registered service instance. You can use the
 [discovery-etcd-register](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-register) sample.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd discovery-samples/discovery-discover-jaxrs
    $ mvn clean package
    ```

2. Start local etcd instance and another microservice, which registers to etcd:

    You can find instructions in discovery-register sample, mentioned above.

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource, discovery using annotations - http://localhost:8080/v1/discover
* JAX-RS REST resource, programmatic discovery - http://localhost:8080/v1/programmatic

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a service, which uses KumuluzEE Discovery extension.
We will develop a simple REST service with the following resources:
* GET http://localhost:8080/v1/discover/url - discovered service's url
* GET http://localhost:8080/v1/discover - list of all customers from discovered service + discovered service's url
* POST http://localhost:8080/v1/discover - add a customer to discovered service
* GET http://localhost:8080/v1/programmatic/{serviceName}/{serviceVersion}/{environment} - discovered service's url

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS)
* Add Maven dependency to KumuluzEE Discovery extension
* Implement the service
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluz-jax-rs-jersey` and `kumuluzee-discovery` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the servlet


Register your module as JAX-RS service and define the application path. You could do that in web.xml or
for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class DiscoverApplication extends Application {
}
```

Implement JAX-RS resource, which will use annotations for service discovery:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("discover")
@RequestScoped
public class DiscoverResource {

    @Inject
    @DiscoverService(value = "customer-service", version = "1.0.x", environment = "dev")
    private WebTarget target;

    @GET
    @Path("url")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getUrl() {
        return Response.ok(target.getUri().toString()).build();
    }

    @GET
    public Response getProxiedCustomers() {
        WebTarget service = target.path("v1/customers");

        Response response;
        try {
            response = service.request().get();
        } catch (ProcessingException e) {
            return Response.status(408).build();
        }

        ProxiedResponse proxiedResponse = new ProxiedResponse();
        proxiedResponse.setResponse(response.readEntity(String.class));
        proxiedResponse.setProxiedFrom(target.getUri().toString());

        return Response.ok(proxiedResponse).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        WebTarget service = target.path("v1/customers");

        Response response;
        try {
            response = service.request().post(Entity.json(customer));
        } catch (ProcessingException e) {
            return Response.status(408).build();
        }

        return Response.fromResponse(response).build();
    }
}
```

In the example above, we inject a `WebTarget` resource using `@DiscoverService` annotation. KumuluzEE Discovery 
extension uses NPM-like versioning, so by specifying version "1.0.x", we always get the latest patch of 1.0.x version
microservice, registered with etcd.

We use two POJO's in this example: Customer, which is the same as in the discovery-register sample
and ProxiedResponse, which we use for returning discovered service's response and add it's port. They can be implemented
as follows:

```java
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
```

```java
public class ProxiedResponse {

    private String response;
    private String proxiedFrom;

    public String getResponse() {
        return response;
    }

    public void setResponse(String response) {
        this.response = response;
    }

    public String getProxiedFrom() {
        return proxiedFrom;
    }

    public void setProxiedFrom(String proxiedFrom) {
        this.proxiedFrom = proxiedFrom;
    }
}
```

Implement JAX-RS resource, which will use programmatic service discovery:

```java
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Path("programmatic")
@RequestScoped
public class ProgrammaticDiscoveryResource {

    @Inject
    DiscoveryUtil discoveryUtil;

    @GET
    @Path("{serviceName}/{serviceVersion}/{environment}")
    public Response getInstances(@PathParam("serviceName") String serviceName,
                                 @PathParam("serviceVersion") String serviceVersion,
                                 @PathParam("environment") String environment) {
        Optional&lt;List&lt;URL&gt;&gt; instances = discoveryUtil.getServiceInstances(serviceName, serviceVersion, environment);

        if(instances.isPresent()) {
            return Response.ok(instances.get()).build();
        } else {
            return Response.noContent().build();
        }
    }
}
```

In the example above, we use JAX-RS path parameters to discover the desired registered instance.
We inject a `DiscoveryUtil` resource and then call its function `getInstances(serviceName, serviceVersion, environment)`.

### Add required configuration for the service discovery

You can add configuration using any KumuluzEE configuration source.

For example, you can use config.yml file, placed in resources folder:
```yaml
kumuluzee:
  discovery:
    etcd:
      hosts: http://127.0.0.1:2379
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/com/kumuluz/ee/samples/ethereum/entities/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.ethereum.entities;


/**
 * @author Domen Gašperlin
 * @since 1.0.0
 */

public class Customer {

    private Integer id;

    private String firstName;

    private String lastName;

    private String walletAddress;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getWalletAddress() {
        return walletAddress;
    }

    public void setWalletAddress(String walletAddress) {
        this.walletAddress = walletAddress;
    }
}</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/order-cm.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-order-config
  namespace: kumuluzee-blog
data:
  KUMULUZEE_DISCOVERY_CLUSTER: private-coreos
  KUMULUZEE_DISCOVERY_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_CONFIG_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_DATASOURCES0_CONNECTIONURL: jdbc:postgresql://postgres-orders:5432/order
  KUMULUZEE_SERVER_BASEURL: http://192.168.29.246:32583
  KUMULUZEE_HEALTH_CHECKS_DATASOURCEHEALTHCHECK_CONNECTIONURL: jdbc:postgresql://postgres-orders:5432/order
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/src/main/java/com.kumuluz.ee.samples.discovery.register/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Urban Malc
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-health/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-jpa" transaction-type="RESOURCE_LOCAL"&gt;

        &lt;non-jta-data-source&gt;jdbc/CustomersDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.health.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;

    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JPA and CDI with GraphQL

&gt; Convert an existing REST application to GraphQL and pack it as a KumuluzEE microservice.

The objective of this sample is to demonstrate how to convert your existing JPA/CDI application to expose GraphQL
API instead of REST. Before starting this tutorial, please make sure, that you have finished 
[KumuluzEE JPA and CDI with REST](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa) tutorial.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

In order to run this sample you will have to setup a local PostgreSQL database:
- __database host__: localhost:5432
- __database name__: customers
- __user__: postgres
- __password__: postgres

The required tables will be created automatically upon running the sample.
You can run databases inside docker:

```bash
docker run -d --name pg-graphql -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=customers -p 5432:5432 postgres:latest
```

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-graphql-jpa-simple
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* GraphQL endpoint - http://localhost:8080/graphql
* GraphiQL endpoint - http://localhost:8080/graphiql (playground for executing queries)

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to create a simple GraphQL microservice which uses JPA 2.1 and
pack it as a KumuluzEE microservice. We will extend the existing
[KumuluzEE JPA and CDI sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa).
Therefore, first complete the existing sample tutorial, or clone the JPA and CDI sample code. We will use PostgreSQL
in this tutorial.

We will follow these steps:
* Add Maven dependencies
* Remove JAX-RS annotations and replace them with GraphQL annotations
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JPA and CDI sample, you should already have the
dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey`,
`kumuluzee-cdi-weld`, `kumuluzee-jpa-eclipselink` and `postgresql` configured in `pom.xml`.


Add the `kumuluzee-graphql-mp` and `kumuluzz-graphql-ui` dependencies and remove `kumuluzee-jax-rs-jersey` dependency.
GraphQL extension also requires `kumuluzee-json-p-jsonp`, `kumuluzee-json-b-yasson` and `kumuluzee-config-mp`
dependencies, so also add those:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-graphql-mp&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-graphql-ui&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-json-p-jsonp&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-json-b-yasson&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
&lt;/dependency&gt;
```

`kumuluzee-maven-plugin` should already be added to your project from JPA and CDI sample.


### Converting REST service to GraphQL endpoint
Here are the required steps:
- Delete CustomerApplication.java file, because we will no longer be using the REST endpoint
- Replace REST annotations (`@Consumes @Produces and @Path`) with `@GraphQLApi` annotation
- Register API endpoints to become GraphQL queries and mutations: replace `@GET` annotations with `@Query` and `@POST`, `@DELETE` annotations with `@Mutation`
- Remove all `@Path` annotations
- Replace parameters annotations (`@PathParam("name")` with `@Name("name")`)
- Replace output types (we are not returning `Response` anymore but actual types; e.g. `getAllCustomers` should return `List&lt;Customer&gt;` and not `Response`)


The final code should look something like this:
```java
@RequestScoped
@GraphQLApi
public class CustomerResource {
  
    @Inject
    private CustomerService customerBean;
  
    @Query
    public List&lt;Customer&gt; getAllCustomers() {
       return customerBean.getCustomers();
    }
  
    @Query
    public Customer getCustomer(@Name("customerId") String customerId) {
        return customerBean.getCustomer(customerId);
    }
  
    @Mutation
    public Customer addNewCustomer(@Name("customer") Customer customer) {
        customerBean.saveCustomer(customer);
        return customer;
    }
  
    @Mutation
    public void deleteCustomer(@Name("customerId") String customerId) {
        customerBean.deleteCustomer(customerId);
    }
}

```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections. Graph*i*QL
(GraphQL UI) should now be accessible on http://localhost:8080/graphiql.

### Executing queries

You can see the generated schema at: http://localhost:8080/graphql/schema.graphql

You can now try executing queries. You can start with one of these:

```graphql
mutation addCustomer {
  addNewCustomer(customer: {id: "1", firstName: "Gary", lastName: "Bartlett"}) {
    id
    firstName
    lastName
  }
}

query getAllCustomers {
  allCustomers {
    id
    firstName
    lastName
  }
}

query getCustomerById {
  customer(customerId: "1") {
    id
    firstName
    lastName
  }
}

mutation deleteCustomer {
  deleteCustomer(customerId: "1")
}
```
</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  ethereum:
    wallet:
      path: "kumuluzee-ethereum-web3j/wallet-sample-ebe82f9ac91697e8a81f4f3a30fcaf499ef65993.json"
      password: "kumuluz"
    client:
      address: "https://rinkeby.infura.io/RqMYnA77aiFY4oxoxMRD"</pre></body></html>




File path: kumuluzee-fault-tolerance/common/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-fault-tolerance&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-fault-tolerance-common&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Fault Tolerance sample common&lt;/name&gt;
    &lt;description&gt;KumuluzEE Fault Tolerance common for sample implementation&lt;/description&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-health/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Health sample

&gt; Build a REST service which utilizes a built-in health framework to expose a health check and pack it as a KumuluzEE 
microservice

The objective of this sample is to demonstrate how to use the built-in health framework to expose basic health checks.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    


## Prerequisites

In order to run this sample you will have to setup a local PostgreSQL database:
- __database host__: localhost:5432
- __database name__: customers
- __user__: postgres
- __password__: postgres

You can run the database inside docker:
```
docker run -d --name pg-health -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=customers -p 5432:5432 postgres:latest
```

The required tables will be created automatically upon running the sample.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-health
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers
* Health servlet - http://localhost:8080/health/live and http://localhost:8080/health/ready

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to use KumuluzEE Health and pack the application as a KumuluzEE 
microservice. We will extend the existing [KumuluzEE JPA and CDI sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa). 
Therefore, first complete the existing KumuluzEE JPA and CDI sample tutorial, or clone the KumuluzEE JPA and CDI sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JPA and CDI sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa) or clone the existing sample
* Add Maven dependency
* Implement Health Check Bean
* Add Health configuration
* Build the microservice
* Run it

### Add Maven dependency

Since your existing starting point is the existing KumuluzEE JPA and CDI sample, you should already have the dependencies 
for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey`, `kumuluzee-cdi-weld`, 
`kumuluzee-jpa-eclipselink` and `org.postgresql` configured `pom.xml`.

Add the `kumuluzee-health` dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.health&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-health&lt;/artifactId&gt;
    &lt;version&gt;${kumuluz-health.version}&lt;/version&gt;
&lt;/dependency&gt;
```

### Implement Health Check Bean

Implement a class which implements `HealthCheck` and is annotated with `@Readiness` and `@ApplicationScoped`. The bean 
should contain a method call() which executes health check. The bean will be registered to the HealthRegistry 
automatically and called either by accessing health servlet or by periodic health checks which are logged to the logs.

Sample implementation of such a class (which could also be checked by a built in HttpHealthCheck):

```java
import org.eclipse.microprofile.health.Readiness;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;

import javax.enterprise.context.ApplicationScoped;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Logger;

@Readiness
@ApplicationScoped
public class GithubHealthCheckBean implements HealthCheck {

    private static final String url = "https://github.com/kumuluz/kumuluzee";

    private static final Logger LOG = Logger.getLogger(GithubHealthCheckBean.class.getSimpleName());

    @Override
    public HealthCheckResponse call() {
        try {

            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setRequestMethod("HEAD");

            if (connection.getResponseCode() == 200) {
                return HealthCheckResponse.named(GithubHealthCheckBean.class.getSimpleName()).up().build();
            }
        } catch (Exception exception) {
            LOG.severe(exception.getMessage());
        }
        return HealthCheckResponse.named(GithubHealthCheckBean.class.getSimpleName()).down().build();
    }
}
```

You can also use `@Liveness` instead of `@Readiness`. For more information about the difference see the
[KumuluzEE Health README](https://github.com/kumuluz/kumuluzee-health#liveness-and-readiness).

### Add Health configuration

For registering built in disk space and postgres data source health checks replace config.yaml file content with the 
following 
content:

```yaml
kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customers
      username: postgres
      password: postgres
      pool:
        max-size: 20
  health:
    servlet:
      mapping: /health
      enabled: true
    logs:
      enabled: true
      level: INFO
      period-s: 30
    checks:
      data-source-health-check:
        jndi-name: jdbc/CustomersDS
      disk-space-health-check:
        threshold: 100000000
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

The json output (http://localhost:8080/health/ready) should look similar to the one bellow:
```json
{
  "status" : "UP",
  "checks" : [ {
    "name" : "DiskSpaceHealthCheck",
    "status" : "UP"
  }, {
    "name" : "DataSourceHealthCheck",
    "status" : "UP"
  }, {
    "name" : "GithubHealthCheckBean",
    "status" : "UP"
  } ]
}
```
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
	   bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
	   bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-microProfile-1.2/src/main/java/com/kumuluz/ee/samples/kumuluzee_microProfile_12/health/ServiceHealthCheck.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_microProfile_12.health;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.health.Health;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Provider;

@Health
@ApplicationScoped
public class ServiceHealthCheck implements HealthCheck {

    @Inject
    @ConfigProperty(name = "healthy")
    private Provider&lt;Boolean&gt; isHealthy;

    @Override
    public HealthCheckResponse call() {

        if (isHealthy.get()) {
            return HealthCheckResponse.named(ServiceHealthCheck.class.getSimpleName()).up().build();
        } else {
            return HealthCheckResponse.named(ServiceHealthCheck.class.getSimpleName()).down().build();
        }

    }
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/dtos/AssignmentResult.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.dtos;

public class AssignmentResult {

    private String message;
    private Integer code;

    public AssignmentResult(String message, Integer code) {
        this.message = message;
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }
}
</pre></body></html>




File path: servlet/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;servlet&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Servlet sample&lt;/name&gt;
    &lt;description&gt;Servlet usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: microservices-simple/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Microservices simple

&gt; Simple example of splitting an application into microservices using KumuluzEE.

This example demonstrates how to split an application into microservices using KumuluzEE and create a self-sustaining
package that runs independently for each one.

Let's create an online book catalogue that people can browse and place orders for the books they like.
While there would normally be many more functionalities, for brevity we are only going to look at the two of them;
browsing available books and placing orders.

We start by splitting the catalogue and orders functionalities into two separately configured and deployed microservices.
That way we have created microservices that are only concerned with their respected functionalities.
We’ve also reduced the interference with one another and overall form a better modular and bug free application.
Each one of them will communicate with each other through pre-defined REST interfaces.

The example demonstrates the above premise.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
        
3. (Optional, to get a database running) Docker 1.13.0 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
    
        ```
        docker --version
        ```
    
## Prerequisites

Make sure you have PostgreSQL database running in order to start the example. If you don't have one, you can simply start
an instance using docker:

    ```bash
    docker run -e POSTGRES_PASSWORD=postgres --restart=always -p 5432:5432 -d postgres:9.6-alpine
    ```

## Usage

The example uses docker to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd servlet
    $ mvn clean package
    ```

2. Run each individual microservice separately (separate terminal) with a single command with the appropriate environment variables that can override the applications config located in `config.yaml``:
    * `PORT` should containt the port on which the microservice will accept connections
    * `KUMULUZEE_DATASOURCES[0].CONNECTION-URL` should contain the jdbc URL for the datasource (defaults are obtained from the `config.yaml` file)
    * `KUMULUZEE_DATASOURCES[0].USERNAME` should contain the datasource username (defaults are obtained from the `config.yaml` file)
    * `KUMULUZEE_DATASOURCES[0].PASSWORD` should contain the datasource password (defaults are obtained from the `config.yaml` file)
    * `ORDERS.CATALOGUEURL` should contain the catalogue base url for the orders service
    
    Built as exploded:
    
    ```bash
    $ PORT=3000 java -cp "catalogue/target/classes:catalogue/target/dependency/*" com.kumuluz.ee.EeApplication
    
    $ PORT=3001 java -cp "orders/target/classes:orders/target/dependency/*" com.kumuluz.ee.EeApplication
    ```
    
    Build as uber-jar:
    
    ```bash
        $ PORT=3000 java -jar target/${project.build.finalName}.jar
        
        $ PORT=3001 java -jar target/${project.build.finalName}.jar
    ```
    
The application/service can be accessed on the following URLs:
    * Catalogue service - http://localhost:3000/books
    * Orders service - http://localhost:3001/orders

To shut down the example simply stop the processes in the foreground.

##Tutorial

This example demonstrates how to split an application into microservices using KumuluzEE and create a self-sustaining
package that runs independently for each one.

We will follow these steps:
* Create maven project with three modules: catalogue, orders and shared module between the two models.
* Add Maven dependency to individual modules
* Implent microservices
* Build the microservice
* Run it

### Add Maven dependencies

To catalogue and orders add the following dependencies:

```xml
  &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
            &lt;artifactId&gt;microservices-simple-models&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

To models module add the following maven dependencies:

```xml
&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;42.0.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-version/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev
  version-info:
    endpoint: /version
    values:
      docker-image-name: my_docker_image</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-servlet/src/main/java/com/kumuluz/ee/samples/discovery/discover/servlet/DiscoverServlet.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.servlet;

import com.kumuluz.ee.discovery.enums.AccessType;
import com.kumuluz.ee.discovery.utils.DiscoveryUtil;

import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * @author Urban Malc
 */
@WebServlet("DiscoverServlet")
public class DiscoverServlet extends HttpServlet {

    @Inject
    private DiscoveryUtil discoveryUtil;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException,
            IOException {

        URL url = discoveryUtil.getServiceInstance("customer-service", "*", "dev", AccessType.DIRECT).orElse(null);

        if (url != null) {
            response.getWriter().println("Discovered instance on " + url);

            response.getWriter().println("Sending request for customer list ...");
            URL serviceUrl = new URL(url.toString() + "/v1/customers");
            HttpURLConnection conn = (HttpURLConnection) serviceUrl.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder receivedResponse = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                receivedResponse.append(line);
            }
            rd.close();

            response.getWriter().println("Received response: " + receivedResponse.toString());

        } else {
            response.getWriter().println("No service instances were discovered.");
        }
    }
}
</pre></body></html>




File path: jul/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jul&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JUL sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE java.util.logging usage sample&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/resources/CustomersResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.resources;

import com.kumuluz.ee.logs.cdi.Log;
import com.kumuluz.ee.samples.tutorial.customers.Customer;
import com.kumuluz.ee.samples.tutorial.customers.cdi.CustomersBean;
import org.eclipse.microprofile.metrics.annotation.Metered;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.util.List;

@RequestScoped
@Path("/customers")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Log
public class CustomersResource {

    @Context
    protected UriInfo uriInfo;
    @Inject
    private CustomersBean customersBean;

    @GET
    //@RolesAllowed("user")
    public Response getCustomers() {

        List&lt;Customer&gt; customers = customersBean.getCustomers();

        return Response.ok(customers).build();
    }

    @GET
    @Path("/filtered")
    public Response getCustomersFiltered() {

        List&lt;Customer&gt; customers;

        customers = customersBean.getCustomersFilter(uriInfo);

        return Response.status(Response.Status.OK).entity(customers).build();
    }

    @GET
    @Path("/{customerId}")
    //@RolesAllowed("user")
    public Response getCustomer(@PathParam("customerId") String customerId) {

        Customer customer = customersBean.getCustomer(customerId);

        if (customer == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }

        return Response.status(Response.Status.OK).entity(customer).build();
    }

    @POST
    public Response createCustomer(Customer customer) {

        if ((customer.getFirstName() == null || customer.getFirstName().isEmpty()) || (customer.getLastName() == null
                || customer.getLastName().isEmpty())) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        } else {
            customer = customersBean.createCustomer(customer);
        }

        if (customer.getId() != null) {
            return Response.status(Response.Status.CREATED).entity(customer).build();
        } else {
            return Response.status(Response.Status.CONFLICT).entity(customer).build();
        }
    }

    @PUT
    @Path("{customerId}")
    public Response putZavarovanec(@PathParam("customerId") String customerId, Customer customer) {

        customer = customersBean.putCustomer(customerId, customer);

        if (customer == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        } else {
            if (customer.getId() != null)
                return Response.status(Response.Status.OK).entity(customer).build();
            else
                return Response.status(Response.Status.NOT_MODIFIED).build();
        }
    }

    @DELETE
    @Path("{customerId}")
    //@RolesAllowed("admin")
    @Metered(name = "delete-requests")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {

        boolean deleted = customersBean.deleteCustomer(customerId);

        if (deleted) {
            return Response.status(Response.Status.GONE).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-graphql-jpa-security/src/main/java/com/kumuluz/ee/samples/graphql_security/CustomerService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.graphql_security;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
public class CustomerService {

    @PersistenceContext
    private EntityManager em;

    public Customer getCustomer(String customerId) {
        return em.find(Customer.class, customerId);
    }

    public List&lt;Customer&gt; getCustomers() {
        List&lt;Customer&gt; customers = em
                .createNamedQuery("Customer.findCustomers", Customer.class)
                .getResultList();

        return customers;
    }

    @Transactional
    public void saveCustomer(Customer customer) {
        if (customer != null) {
            em.persist(customer);
        }

    }

    @Transactional(Transactional.TxType.REQUIRED)
    public Customer deleteCustomer(String customerId) {
        Customer customer = em.find(Customer.class, customerId);
        if (customer != null) {
            em.remove(customer);
        }

        return customer;
    }
}
</pre></body></html>




File path: jpa/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JPA and CDI sample

&gt; Develop JPA entities and use CDI within a REST service and pack it as a KumuluzEE microservice.

The objective of this sample is to demonstrate how to develop JPA entities and use CDI. The tutorial guides you through the development of JPA entities and CDI within a REST service and shows how to pack it as a KumuluzEE microservice. You will add KumuluzEE dependencies into pom.xml. To develop the JPA entities, you will create @Entity classes. You will implement a CustomerService CDI class. Finally, you will call this class from the REST service class. Required knowledge: basic familiarity with JPA, CDI and basic concepts of REST and JSON.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

In order to run this sample you will have to setup a local PostgreSQL database:
- __database host__: localhost:5432
- __database name__: customers
- __user__: postgres
- __password__: postgres

The required tables will be created automatically upon running the sample.

You can run the database inside docker:
```
docker run -d --name pg-jpa -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=customers -p 5432:5432 postgres:latest
```

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd jpa
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource page - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to create a simple REST microservice which uses JPA 2.1 and pack it as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs),
 with access to the database using JPA 2.1. Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code. We will use PostgreSQL in this tutorial.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Ensure access to PostgreSQL database.
* Add Maven dependencies
* Implement the persistence using standard JPA
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in `pom.xml`.

Add the `kumuluzee-cdi-weld`, `kumuluzee-jpa-eclipselink` and `postgresql` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
    &lt;version&gt;42.0.0&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement database access layer

Enhance existing `Customer` class with JPA annotations:
* Add `@Entity` and `@Table` to make it persistable. 
* Add `Customer.findCustomers` named query for retrieving all customers from database
* Mark attribute `id` as a primary key.
* Change the default database column mapping.

```java
@Entity
@Table(name = "customer")
@NamedQueries({
        @NamedQuery(
                name = "Customer.findCustomers",
                query = "SELECT c " +
                        "FROM Customer c"
        )
})
public class Customer implements Serializable {

    @Id
    private String id;
    @Column(name = "first_name")
    private String firstName;
    @Column(name = "last_name")
    private String lastName;

    // TODO: implement get and set methods
}
```

Implement `CustomerService` class. Implement it as a `@RequestScoped` CDI bean, and inject `EntityManager`. Use `EntityManager` to implement the following methods:

```java
public Customer getCustomer(String customerId);
public List&lt;Customer&gt; getCustomers(); 
public void saveCustomer(Customer customer);
public void deleteCustomer(String customerId); 
```
Sample implementation of `CustomerService` class:

```java
@RequestScoped
public class CustomerService {

    @PersistenceContext
    private EntityManager em;

    public Customer getCustomer(String customerId) {
        return em.find(Customer.class, customerId);
    }

    public List&lt;Customer&gt; getCustomers() {
        List&lt;Customer&gt; customers = em
                .createNamedQuery("Customer.findCustomers", Customer.class)
                .getResultList();

        return customers;
    }

    @Transactional
    public void saveCustomer(Customer customer) {
        if (customer != null) {
            em.persist(customer);
        }

    }

    @Transactional(Transactional.TxType.REQUIRED)
    public void deleteCustomer(String customerId) {
        Customer customer = em.find(Customer.class, customerId);
        if (customer != null) {
            em.remove(customer);
        }
    }
}
```

### Implement REST Service

Make `CustomerResource` class a CDI bean by adding `@RequestScoped` annotation. Inject created `CustomerService` to `CustomerResource` using `@Inject` annotation. Replace the invocation of static `Database` class with invocation of injected `CustomerService` implementation. Sample implementation:

```java
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @Inject
    private CustomerService customerBean;

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = customerBean.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = customerBean.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        customerBean.saveCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        customerBean.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
```

### Configure CDI

Create the directory `resources/META-INF`. In this directory create the file `beans.xml` with the following content to enable CDI:

```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;
```

### Configure database and persistence

Make sure, that you have database server prepared, as described in Prerequisites section.

In the directory `resources/META-INF` create the file `persistence.xml`: 

```xml
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-jpa" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/CustomersDS&lt;/jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.jpa.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
```

Modify the element `class` in the above example, to reflect the package and class name of entity `Customer` in your source code structure.

In the directory `resources` add the file `config.yaml` with the following database connectivity properties:

```yaml
kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customers
      username: postgres
      password: postgres
      pool:
        max-size: 20
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

## Continue framework startup on database connection failure

By default, if any persistence unit fails to establish a database connection, the startup of the framework will fail and your REST API will return error 503.
If you have a database connection not deemed critical for the system and want to continue a regular startup of the service, you can override the behaviour in `persistence-units` config:
```
kumuluzee:
  persistence-units:
    - name: "kumuluzee-samples-jpa"
      continue-on-error: false
    - name: "kumuluzee-samples-jpa-failed"
      continue-on-error: true
```
Note that this configuration takes persistence-unit name (not data source jndi name) and is a separate section in KumuluzEE config.

Even though the service will complete the startup successfully with one database connection inoperable, you need to expect the failed EntityManager to be null and expect NullPointerException-s if not handled properly.</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Event Streaming with Kafka &amp;mdash; consume Kafka messages

&gt; Develop a REST service that consumes Kafka messages of selected topic

The objective of this sample is to show how to consume Kafka messages using KumuluzEE Event Streaming extension.
The tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into pom.xml. You will develop a simple annotated method, which uses the KumuluzEE Event Streaming Kafka extension for consuming messages.
Required knowledge: basic familiarity with Apache Kafka.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need a Kafka and Zookeeper instance [Kafka Quickstart](https://kafka.apache.org/quickstart). 
There are a lot of Kafka Docker available on the Docker hub, in this tutorial we use [ches/kafka](https://hub.docker.com/r/ches/kafka/) 
and a separate Docker with the Zookeeper instance [jplock/zookeeper](https://hub.docker.com/r/jplock/zookeeper/)
Here is an example on how to quickly run the Zookeeper and Kafka Docker:

```bash
$ docker network create kafka-net
          
$ docker run -d -p 2181:2181 --name zookeeper --network kafka-net zookeeper:3.4
$ docker run -d -p 9092:9092 --name kafka --network kafka-net --env ZOOKEEPER_IP=zookeeper --env KAFKA_ADVERTISED_HOST_NAME={docker_host_ip} ches/kafka
```

Replace `{docker_host_ip}` with you Docker host IP.

## Usage

The example uses Docker to set up the Kafka and Zookeeper instances and maven to build and run the microservice.

1. Start the Zookeeper and Kafka Docker:

    ```bash
    $ docker network create kafka-net
          
    $ docker run -d -p 2181:2181 --name zookeeper --network kafka-net zookeeper:3.4
    $ docker run -d -p 9092:9092 --name kafka --network kafka-net --env ZOOKEEPER_IP=zookeeper --env KAFKA_ADVERTISED_HOST_NAME={docker_host_ip} ches/kafka
    ```
    
    Replace `{docker_host_ip}` with you Docker host IP.
    
    To produce messages in the terminal, you can use the Kafka CLI command:
    
    ```bash
    $ docker run --rm --interactive --network kafka-net ches/kafka \
      kafka-console-producer.sh --topic test --broker-list kafka:9092
    &lt;type some messages followed by newline&gt;
    ```
    

2. Build the sample using maven:
   
   ```bash
   $ cd kumuluzee-streaming-kafka/kumuluzee-kafka-consumer
   $ mvn clean package
   ```

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
4. The consumed messages will be printed in the terminal.

   The sample also exposes the following endpoints:
   * GET http://localhost:8080/v1/consume - Last five messages consumed

To shut down the example simply stop the processes in the foreground and all Docker containers started for this example.

## Tutorial

This tutorial will guide you through the steps required to create a Kafka Consumer with the help of the KumuluzEE Event Streaming Kafka extension.
We will develop a simple annotated method which will be invoked when the message is consumed. We will also build a Rest service that will display the last 5 received messages:
* GET http://localhost:8080/v1/consume

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components with the microProfile-1.0 dependency
* Add Maven dependency to KumuluzEE Event Streaming Kafka extension
* Implement the annotated method and Rest service
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-microProfile-1.0` and `kumuluzee-streaming-kafka` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

We will use `kumuluzee-logs` for logging in this sample, so you need to include kumuluzee logs implementation dependency:
```xml
&lt;dependency&gt;
    &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
    &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
    &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
&lt;/dependency&gt;
```

For more information about the KumuluzEE Logs visit the [KumuluzEE Logs Github page](https://github.com/kumuluz/kumuluzee-logs).
Currently, Log4j2 is supported implementation of `kumuluzee-logs`, so you need to include a sample Log4j2 configuration, 
which should be in a file named `log4j2.xml` and located in `src/main/resources`:
```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
```

If you would like to collect Kafka related logs through the KumuluzEE Logs, you have to include the following `slf4j` implementation as dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
    &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the onMessage method and Rest service

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class ConsumerApplication extends Application {
}
```

Implement class for example TestConsumer with a method annotated with `@StreamListener(topics = {"test"})`. 
The method takes for a parameter the `ConsumerRecord` that contains the data of the received message.
We will store the received messages in a List. We also implemented a method `getLast5Messages` for getting the last 5 messages from the List.

```java
@ApplicationScoped
public class TestConsumer {

    private static final Logger log = Logger.getLogger(TestConsumer.class.getName());

    private List&lt;String&gt; messages = new ArrayList&lt;&gt;();
    
    @StreamListener(topics = {"test"})
    public void onMessage(ConsumerRecord&lt;String, String&gt; record) {

        log.info(String.format("Consumed message: offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value()));

        messages.add(record.value());
    }
    
    public List&lt;String&gt; getLast5Messages() {
        return messages.subList(messages.size()-5, messages.size());
    }
}
```

In the example above, we defined the topics names with the parameter of the `@StreamListener` annotation, 
but we could also rename the onMessage method to the desired topic name.

If you would like to consume a batch fo messages change the onMessage method like this:

```java
@StreamListener(topics = {"test"})
public void onMessage(List&lt;ConsumerRecord&lt;String, String&gt;&gt; records) {
    
    for (ConsumerRecord&lt;String, String&gt; record : records) {
        log.info(String.format("Consumed message: offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value()));
        messages.add(record.value());
    }
    
}
```

Implement JAX-RS resource, with a GET method for displaying the last 5 received  messages. Inject the `TestConsumer` 
and retrieve the Kafka messages:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/consume")
@RequestScoped
public class ConsumerResource {

    @Inject
    TestConsumer consumer;

    @GET
    public Response getLast5Messages(){

        return Response.status(200).entity(consumer.getLast5Messages()).build();
    }
}
```

To display the use of Kafka manual message offset committing we will implement another method in the `TestConsumer` class, 
with an additional method parameter `Acknowledgement`, this consumer needs to have different configuration of 
`enable-auto-commit: false`: 

```java
@StreamListener(topics = {"test"}, config = "consumer2")
public void manualCommitMessage(ConsumerRecord&lt;String, String&gt; record, Acknowledgement ack) {

    log.info(String.format("Manual committed message: offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value()));
    ack.acknowledge(); // acknowledges the consumed messages

}
```

### Add required configuration for the Kafka Consumer

You have to add the Kafka Consumer configuration using any KumuluzEE configuration source.

For example, you can use config.yaml file, placed in resources folder:

```yaml
kumuluzee:
  streaming:
    kafka:
      consumer:
        bootstrap-servers: localhost:9092
        group-id: group1
        enable-auto-commit: true
        auto-commit-interval-ms: 1000
        auto-offset-reset: earliest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

</pre></body></html>




File path: kumuluzee-grpc/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;artifactId&gt;kumuluzee-grpc&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE gRPC Sample&lt;/name&gt;
    &lt;description&gt;Sample for KumuluzEE microservice with gRPC communication.&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;grpc-server&lt;/module&gt;
        &lt;module&gt;grpc-client&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;kumuluzee.grpc.version&gt;1.1.0&lt;/kumuluzee.grpc.version&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;grpc.version&gt;1.18.0&lt;/grpc.version&gt;
    &lt;/properties&gt;


&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing/orders/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;parent&gt;
    &lt;artifactId&gt;kumuluzee-opentracing&lt;/artifactId&gt;
    &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
    &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;artifactId&gt;opentracing-orders&lt;/artifactId&gt;

  &lt;name&gt;opentracing-orders&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
      &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
      &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
      &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
      &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.kumuluz.ee.opentracing&lt;/groupId&gt;
      &lt;artifactId&gt;kumuluzee-opentracing-jaeger&lt;/artifactId&gt;
      &lt;version&gt;${kumuluzee-opentracing.version}&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;package&lt;/id&gt;
            &lt;goals&gt;
              &lt;goal&gt;repackage&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/resources/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"&gt;

&lt;/web-app&gt;</pre></body></html>




File path: jsf/src/main/resources/webapp/input.xhtml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"&gt;

&lt;h:head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/h:head&gt;
&lt;h:body&gt;
    &lt;h2&gt;Please enter customer data below:&lt;/h2&gt;
    &lt;h:form&gt;
        &lt;h:outputLabel for="id"&gt;
            ID:
            &lt;h:inputText id="id" value="#{customerBean.id}"/&gt;
        &lt;/h:outputLabel&gt;
        &lt;br/&gt;
        &lt;h:outputLabel for="firstName"&gt;
            First name:
            &lt;h:inputText id="firstName" value="#{customerBean.firstName}"/&gt;
        &lt;/h:outputLabel&gt;
        &lt;br/&gt;
        &lt;h:outputLabel for="lastName"&gt;
            Last name:
            &lt;h:inputText id="lastName" value="#{customerBean.lastName}"/&gt;
        &lt;/h:outputLabel&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;h:commandButton value="Add" action="#{customerBean.addCustomer()}"/&gt;
        &lt;br/&gt;
        &lt;h:commandButton value="Home" action="welcome"/&gt;
    &lt;/h:form&gt;
&lt;/h:body&gt;
&lt;/html&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/order-deployment.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: order-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: order
    spec:
      containers:
      - image: zvoneg/kubernetes-orders:v1.0.5
        name: kubernetes-orders
        envFrom:
          - configMapRef:
              name: kubernetes-order-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 5
        resources:
          limits:
            cpu: 1
        ports:
        - containerPort: 8081
          name: server
          protocol: TCP</pre></body></html>




File path: kumuluzee-jcache/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: kumuluzee-jcache
  version: 1.0.0
  env:
    name: dev
  jcache:
    enabled: true
    caffeine:
      caffeine.jcache:
        default:
          policy:
            eager-expiration:
              after-write: "10s"
            maximum:
              size: 10000
        invoices:
          key-type: java.lang.String
          value-type: com.kumuluz.ee.samples.jcache.rest.lib.InvoiceData
          policy:
            eager-expiration:
              after-write: "15s"
            maximum:
              size: 2</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/src/main/resources/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: microservices-simple/models/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;

&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="books" transaction-type="RESOURCE_LOCAL"&gt;

        &lt;non-jta-data-source&gt;jdbc/BooksDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.microservices.simple.models.Book&lt;/class&gt;
        &lt;class&gt;com.kumuluz.ee.samples.microservices.simple.models.Order&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;

    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: kumuluzee-rest-client/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Rest Client sample

&gt; Build a REST service, which consumes another REST service using the KumuluzEE Rest Client

The objective of this sample is to demonstrate the usage of the KumuluzEE Rest Client library to invoke RESTful services
in a type-safe way. Required knowledge: basic familiarity with JAX-RS and basic concepts of REST and JSON.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:

        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:

        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:

        ```
        git --version
        ```


## Prerequisites

This sample requires a running instance of the
[KumuluzEE REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-rest).

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-rest-client
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```

    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```

    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```


The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8081/v1/operations

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to use KumuluzEE Rest Client and pack the application as a
KumuluzEE microservice.

We will follow these steps:
* Add Maven dependencies
* Implement entities
* Implement API interface
* Implement REST interface which will consume created API
* Add configuration
* Add ResponseExceptionMapper
* Register ResponseExceptionMapper
* Make asynchronous calls
* Build the microservice and run it

### Add Maven dependencies

We will need the following dependencies in our microservice:

- `kumuluzee-core`
- `kumuluzee-servlet-jetty`
- `kumuluzee-jax-rs-jersey`
- `kumuluzee-cdi-weld`
- `kumuluzee-rest`
- `kumuluzee-rest-client`

To add them, add the following snippet to the pom.xml:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-rest.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.rest-client&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-rest-client&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-rest-client.version}&lt;/version&gt;
&lt;/dependency&gt;
```
Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement entities

The JAX-RS microservice exposes customers in its RESTful API. In order to consume them in a type-safe way, we need to
define a `Customer` entity in our own microservice. The entity will be a simple POJO:

```java
public class Customer implements Serializable {

    private String id;
    private String firstName;
    private String lastName;

    // getters and setters
}
```

### Implement API interface

The API interface is the core of this sample, since it describes the API our microservice will consume. The interface
uses existing JAX-RS annotations, which you should already be familiar with. The methods declared in the interface are
one-to-one mapping to the methods in
[JAX-RS resource](https://github.com/kumuluz/kumuluzee-samples/blob/master/kumuluzee-rest/src/main/java/com/kumuluz/ee/samples/rest/CustomerResource.java)
of the microservice, exposing the API.

```java
@Path("/customers")
@RegisterRestClient
@Dependent
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public interface CustomerApi {

    @GET
    List&lt;Customer&gt; getAllCustomers(@BeanParam KeeRestParameters parameters);

    @GET
    @Path("{customerId}")
    Customer getCustomer(@PathParam("customerId") String id);

    @POST
    void createCustomer(Customer customer);

    @DELETE
    @Path("{customerId}")
    void deleteCustomer(@PathParam("customerId") String id);
}
```

The only new annotation is the `@RegisterRestClient` annotation. As we will see, you can retrieve a rest client
programmatically or with CDI. The `@RegisterRestClient` simply registers the interface as a bean and enables
the use of CDI lookup.

Notice how we are using KeeRestParameters as a function parameter in getAllCustomers. They are used for filtering and pagination
and will be explained more in-depth later.

### Implement REST interface which will consume created API

In order to consume the created API, we will expose our own RESTful API.

First, create the application class:

```java
@ApplicationPath("v1")
public class RestApplication extends Application {

    @Override
    public Set&lt;Class&lt;?&gt;&gt; getClasses() {
        return Collections.singleton(RestResource.class);
    }
}
```

__NOTE:__ We'll use the `getClasses()` method to specify the resources manually, in order to avoid Jersey validating our
API interfaces.

And then, the resource:

```java
@RequestScoped
@Path("operations")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class RestResource {

    // TODO add methods
}
```

Now, let's add a simple method, that will proxy all customers from the JAX-RS microservice. We will use CDI lookup to
get an instance of the rest client and then proceed to use it in a method. Note that when using CDI lookup the
`@RestClient` qualifier must be used and we use `null` as the function parameter, as we won't be doing any filtering.

```java
@Inject
@RestClient
private CustomerApi customerApi;

@GET
public Response getAllCustomers() {
    return Response.ok(customerApi.getAllCustomers(null)).build();
}
```

We can also create more complex methods and use rest client in them. This one creates a batch of sample Customers:

```java
@GET
@Path("batch")
public Response createBatchCustomers() {
    String[] ids = {"1", "2", "3"};
    String[] firstNames = {"Jonh", "Mary", "Joe"};
    String[] lastNames = {"Doe", "McCallister", "Green"};

    for (int i = 0; i &lt; ids.length; i++) {
        Customer c = new Customer();
        c.setId(ids[i]);
        c.setFirstName(firstNames[i]);
        c.setLastName(lastNames[i]);

        customerApi.createCustomer(c);
    }

    return Response.noContent().build();
}
```

Both methods use the CDI lookup to get an instance of the rest client. An alternative is the rest client builder, which
can be used in non-CDI environments and when a more complex configuration is required. Let's create another method to
showcase the builder usage:

```java
@GET
@Path("{cId}")
public Response getSingleMasked(@PathParam("cId") String customerId) throws MalformedURLException {

    CustomerApi programmaticLookupApi = RestClientBuilder.newBuilder()
            .baseUrl(new URL("http://localhost:8080/v1"))
            .build(CustomerApi.class);

    Customer c = programmaticLookupApi.getCustomer(customerId);
    c.setFirstName(c.getFirstName().substring(0, 1) + getStars(c.getFirstName().length() - 1));
    c.setLastName(c.getLastName().substring(0, 1) + getStars(c.getLastName().length() - 1));

    return Response.ok(c).build();
}

private String getStars(int len) {
    StringBuilder s = new StringBuilder();
    for (int i = 0; i &lt; len; i++) {
        s.append("*");
    }

    return s.toString();
}
```

This method retrieves a single customer and masks his first and last name, replacing all but first letter with `*`.

### Add configuration

Notice that we specified the URL of the API we will consume only when using programmatic lookup. For CDI lookup, we
need to specify the URL through configuration. We will also change the port of our microservice to `8081` since the API
we will consume is already running on port `8080`.

```yaml
kumuluzee:
  server:
    http:
      port: 8081

  rest-client:
    registrations:
      - class: com.kumuluz.ee.samples.kumuluzee_rest_client.api.CustomerApi
        url: http://localhost:8080/v1
```

The microservice is now ready to run. We will however showcase an additional feature in the next step.

### Add ResponseExceptionMapper

The `ResponseExceptionMapper` maps responses to exceptions, if applicable. For example, a default mapper is already
provided, which maps all statuses &gt;=400 to a `WebApplicationException`. We will showcase a more advanced case: if a user
with id=1 is requested, we will throw an exception since the data is sensitive. First, let's create an exception:

```java
public class SensitiveDataException extends RuntimeException {
}
```

Now create the `ResponseExceptionMapper`:

```java
public class SensitiveDataResponseMapper implements ResponseExceptionMapper&lt;SensitiveDataException&gt; {

    @Override
    public SensitiveDataException toThrowable(Response response) {

        response.bufferEntity();

        try {
            Customer c = response.readEntity(Customer.class);

            if (c.getId().equals("1")) {
                return new SensitiveDataException();
            }
        } catch (Exception ignored) {
        }

        return null;
    }

    @Override
    public boolean handles(int status, MultivaluedMap&lt;String, Object&gt; headers) {
        return status == HttpServletResponse.SC_OK;
    }
}
```

In the `handles()` method, we check if the response return status is `200`. In the `toThrowable()` method, we try to
read the response body and check, if customer id equals to `1`. If true, we throw an instance of the
`SensitiveDataException`, otherwise we return `null` and invocation will proceed as expected.

### Register ResponseExceptionMapper

In order to register the created `ResponseExceptionMapper` (and any other providers, you create) to the rest clients
acquired with the CDI lookup, annotate the `CustomerApi` interface with the
`@RegisterProvider(SensitiveDataResponseMapper.class)` annotation.

The provider must also be registered when performing the programmatic lookup like so:

```java
CustomerApi programmaticLookupApi = RestClientBuilder.newBuilder()
        .baseUrl(new URL("http://localhost:8080/v1"))
        .register(SensitiveDataResponseMapper.class)
        .build(CustomerApi.class);
```

Notice the added `register(...)` call.

### Make asynchronous calls

KumuluzEE Rest Client supports asynchronous request execution. To make a call asynchronous, simply change the return
type of the interface method to `CompletionStage`. We will make an additional method in our existing interface
`CustomerApi`, which will create a customer asynchronously.

```java
@POST
CompletionStage&lt;Void&gt; createCustomerAsynch(Customer customer);
```

Now, let's create an additional operation in our resource class that will use the newly created API call.

```java
@GET
@Path("batchAsynch")
public Response createBatchCustomersAsynch() {
    String[] ids = {"1", "2", "3"};
    String[] firstNames = {"Jonh", "Mary", "Joe"};
    String[] lastNames = {"Doe", "McCallister", "Green"};

    List&lt;CompletionStage&lt;Void&gt;&gt; requests = new LinkedList&lt;&gt;();

    for (int i = 0; i &lt; ids.length; i++) {
        Customer c = new Customer();
        c.setId(ids[i]);
        c.setFirstName(firstNames[i]);
        c.setLastName(lastNames[i]);

        requests.add(customerApi.createCustomerAsynch(c));
    }

    boolean hasError = false;

    for (CompletionStage&lt;Void&gt; cs : requests) {
        try {
            cs.toCompletableFuture().get();
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
            hasError = true;
        }
    }

    if (hasError) {
        return Response.serverError().build();
    }

    return Response.noContent().build();
}
```

This operation creates a batch of customers and is very similar to the `batch` operation. The difference is that the
requests are now created asynchronously, whereas before each request had to be completed before a new one was started.

### Filtering and pagination

KumuluzEE Rest Client supports filtering and pagination, but when using it the dependency `kumuluzee-rest` has be included.

The following code returns a list of all customers whose names start with "J". 

```java
@GET
@Path("filter")
public Response getCustomersWhoseNamesStartWithJ() throws MalformedURLException {
    KeeRestParameters parameters = new KeeRestParameters.KeeRestParametersBuilder()
            .addFilter("firstName", FilterOperation.LIKE,"J%").build();

    CustomerApi customerApi = RestClientBuilder.newBuilder()
            .baseUrl(new URL("http://localhost:8080/v1"))
            .build(CustomerApi.class);

    List&lt;Customer&gt; JCustomers = customerApi.getAllCustomers(parameters);
    return Response.ok(JCustomers).build();
}
```

### Build the microservice and run it

First, make sure the JAX-RS microservice is running on port `8080`.

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/resources/OrdersResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.resources;

import com.kumuluz.ee.samples.tutorial.orders.Order;
import com.kumuluz.ee.samples.tutorial.orders.cdi.OrdersBean;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.util.List;

@RequestScoped
@Path("/orders")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class OrdersResource {

    @Context
    private UriInfo uriInfo;

    @Inject
    private OrdersBean ordersBean;

    @GET
    public Response getOrders() {

        List&lt;Order&gt; orders = ordersBean.getOrders(uriInfo);

        return Response.ok(orders).build();
    }

    @GET
    @Path("/{orderId}")
    public Response getOrder(@PathParam("orderId") String orderId) {

        Order order = ordersBean.getOrder(orderId);

        if (order == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }

        return Response.status(Response.Status.OK).entity(order).build();
    }

    @POST
    public Response createOrder(Order order) {

        if (order.getTitle() == null || order.getTitle().isEmpty()) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        } else {
            order = ordersBean.createOrder(order);
        }

        if (order.getId() != null) {
            return Response.status(Response.Status.CREATED).entity(order).build();
        } else {
            return Response.status(Response.Status.CONFLICT).entity(order).build();
        }
    }

    @PUT
    @Path("{orderId}")
    public Response putZavarovanec(@PathParam("orderId") String orderId, Order order) {

        order = ordersBean.putOrder(orderId, order);

        if (order == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        } else {
            if (order.getId() != null)
                return Response.status(Response.Status.OK).entity(order).build();
            else
                return Response.status(Response.Status.NOT_MODIFIED).build();
        }
    }

    @DELETE
    @Path("{orderId}")
    public Response deleteCustomer(@PathParam("orderId") String orderId) {

        boolean deleted = ordersBean.deleteOrder(orderId);

        if (deleted) {
            return Response.status(Response.Status.GONE).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-servlet/src/main/java/com/kumuluz/ee/samples/discovery/discover/servlet/DiscoverServlet.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.servlet;

import com.kumuluz.ee.discovery.enums.AccessType;
import com.kumuluz.ee.discovery.utils.DiscoveryUtil;

import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * @author Urban Malc
 */
@WebServlet("DiscoverServlet")
public class DiscoverServlet extends HttpServlet {

    @Inject
    private DiscoveryUtil discoveryUtil;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException,
            IOException {

        URL url = discoveryUtil.getServiceInstance("customer-service", "*", "dev", AccessType.DIRECT).orElse(null);

        if (url != null) {
            response.getWriter().println("Discovered instance on " + url);

            response.getWriter().println("Sending request for customer list ...");
            URL serviceUrl = new URL(url.toString() + "/v1/customers");
            HttpURLConnection conn = (HttpURLConnection) serviceUrl.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder receivedResponse = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                receivedResponse.append(line);
            }
            rd.close();

            response.getWriter().println("Received response: " + receivedResponse.toString());

        } else {
            response.getWriter().println("No service instances were discovered.");
        }
    }
}
</pre></body></html>




File path: kumuluzee-config-mp/src/main/resources/META-INF/microprofile-config.properties
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">mp.example-string=Hello MicroProfile Config!
mp.example-boolean=true
mp.example-customer=John:Doe
mp.example-customers=James:White,Robert:Simpson,Ronald:Smith</pre></body></html>




File path: kumuluzee-graphql-jpa-security/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/customer-deployment.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: customer-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: customer
    spec:
      containers:
      - image: zvoneg/kubernetes-customers:v1.0.5
        name: kubernetes-customer
        envFrom:
          - configMapRef:
              name: kubernetes-customer-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 40
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: server
          protocol: TCP
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-kubernetes/discover-service.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: Service
metadata:
  name: discover
spec:
  type: NodePort
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: discover
</pre></body></html>




File path: kumuluzee-graphql-jpa-security/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-graphql-jpa-security&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE GraphQL Basic sample&lt;/name&gt;
    &lt;description&gt;GraphQL example usage with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-graphql.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-graphql.version&gt;
        &lt;kumuluzee-config-mp.version&gt;1.5.0-SNAPSHOT&lt;/kumuluzee-config-mp.version&gt;
        &lt;kumuluzee-security.version&gt;1.3.0-SNAPSHOT&lt;/kumuluzee-security.version&gt;
        &lt;keycloak.version&gt;11.0.2&lt;/keycloak.version&gt;
        &lt;postgresql.version&gt;42.2.1&lt;/postgresql.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jta-narayana&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-p-jsonp&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-b-yasson&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-graphql-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-graphql-ui&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;${postgresql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.keycloak&lt;/groupId&gt;
            &lt;artifactId&gt;keycloak-jetty94-adapter&lt;/artifactId&gt;
            &lt;version&gt;${keycloak.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-health/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-microProfile-1.2/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-microProfile-1.2&lt;/artifactId&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.2&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-fault-tolerance/common/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/models/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.models;

import java.util.List;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;
    private List&lt;Order&gt; orders;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public List&lt;Order&gt; getOrders() {
        return orders;
    }

    public void setOrders(List&lt;Order&gt; orders) {
        this.orders = orders;
    }
}
</pre></body></html>




File path: kumuluzee-rest/src/main/java/com/kumuluz/ee/samples/rest/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.rest;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: jsf/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jsf&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JSF sample&lt;/name&gt;
    &lt;description&gt;JSF usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jsp-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jsf-mojarra&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-el-uel&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  discovery:
    etcd:
      hosts: http://localhost:2379
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/gamma/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/gamma/Application.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.gamma;

import javax.ws.rs.ApplicationPath;

@ApplicationPath("v1")
public class Application extends javax.ws.rs.core.Application {
}
</pre></body></html>




File path: kumuluzee-config/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-database-schema-migrations-liquibase&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Liquibase database schema migrations sample&lt;/name&gt;
    &lt;description&gt;Liquibase database schema migrations usage with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-database-schema-migrations.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-database-schema-migrations.version&gt;
        &lt;kumuluzee-logs-jul.version&gt;1.4.6&lt;/kumuluzee-logs-jul.version&gt;
        &lt;postgresql.version&gt;42.2.19&lt;/postgresql.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-logs-jul&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-logs-jul.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.database-schema-migrations&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-database-schema-migrations-liquibase&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-database-schema-migrations.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;${postgresql.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-persistence/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-customers&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;customers-persistence&lt;/artifactId&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
            &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config-mp/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE MicroProfile Config sample&lt;/name&gt;
    &lt;description&gt;MicroProfile Config usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
            &lt;version&gt;1.5.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-publisher/src/main/java/com/kumuluz/ee/samples/reactive/vertx/PublisherVerticle.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import io.vertx.core.AbstractVerticle;

/**
*
* @author Žan Ožbot
*/
public class PublisherVerticle extends AbstractVerticle {

	@Override
	public void start() {
		vertx.setPeriodic(1000, id -&gt; {
			vertx.eventBus().send("tacos", "Hello from Vert.x.");
		});
	}

}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/customer-service.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: Service
metadata:
  name: customer
  namespace: kumuluzee-blog
spec:
  type: NodePort
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: customer
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge/src/main/java/com/kumuluz/ee/samples/reactive/vertx/VertxResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import javax.enterprise.context.RequestScoped;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
*
* @author Žan Ožbot
*/
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("vertx")
@RequestScoped
public class VertxResource {
	
	@GET
	@Path("/status")
	public Response getStatus() {
		return Response.ok().build();
	}
	
}
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/src/main/java/com/kumuluz/ee/samples/kafka/consumer/TestConsumer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.consumer;


import com.kumuluz.ee.streaming.common.annotations.StreamListener;
import org.apache.kafka.clients.consumer.ConsumerRecord;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * @author Matija Kljun
 */
@ApplicationScoped
public class TestConsumer {

    private static final Logger log = Logger.getLogger(TestConsumer.class.getName());

    private List&lt;String&gt; messages = new ArrayList&lt;&gt;();

    @StreamListener(topics = {"test"})
    public void onMessage(ConsumerRecord&lt;String, String&gt; record) {

        log.info(String.format("Consumed message: offset = %d, key = %s, value = %s%n", record.offset(), record.key()
                , record.value()));

        messages.add(record.value());
    }

    public List&lt;String&gt; getLastFiveMessages() {
        if (messages.size() &lt; 5)
            return messages;
        return messages.subList(messages.size() - 5, messages.size());
    }
}
</pre></body></html>




File path: kumuluzee-logs-log4j2/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-opentracing/customers/src/main/java/com/kumuluz/ee/samples/opentracing/customers/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.customers;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Domen Jeric
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;Customer&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/health/OrderServiceHealthCheck.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.health;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.health.Health;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Provider;

@Health
@ApplicationScoped
public class OrderServiceHealthCheck implements HealthCheck {

    @Inject
    @ConfigProperty(name = "rest-properties.external-dependencies.order-service.enabled")
    private Provider&lt;Boolean&gt; orderServiceEnabledProvider;

    @Override
    public HealthCheckResponse call() {

        if (orderServiceEnabledProvider.get().booleanValue()) {
            return HealthCheckResponse.named(OrderServiceHealthCheck.class.getSimpleName()).up().build();
        } else {
            return HealthCheckResponse.named(OrderServiceHealthCheck.class.getSimpleName()).down().build();
        }

    }
}
</pre></body></html>




File path: kumuluzee-openapi-mp/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE OpenAPI MicroProfile sample

&gt; Develop a microservice application with support for MicroProfile OpenAPI specification.

The objective of this sample is to demonstrate how to document API with OpenAPI MicroProfile compliant annotations. The
tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. 
To enable support for OpenAPI annotations you will use __kumuluzee-openapi-mp__ extension. 
Required knowledge: basic familiarity with JAX-RS.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-openapi-mp
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* JAX-RS - http://localhost:8080/v2/customer

### OpenAPI specification

OpenAPI specification for API can be accessed on the following URL:
* API v2 - http://localhost:8080/openapi

Swagger UI can be accessed on the following URL:
* http://localhost:8080/openapi/ui

If you change the server context path you need to prepend the context path to default or custom mapping 
path of the specification and/or ui. 

## Tutorial

This tutorial will guide you through the steps required to document JAX-RS application using MicroProfile OpenAPI
annotations. 

Package contains the following JAX-RS application CustomerAPI.

**CustomerAPI v2**
JAX-RS resource:
* GET http://localhost:8080/v2/customer - list of all customers.

OpenAPI specification:
* GET http://localhost:8080/openapi or GET http://localhost:8080/openapi?format=json

By default api-specs will be generated and exposed on /openapi. The default format is YAML. You can change the format to
JSON by adding `?format=json` to the request.

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Microprofile OpenAPI)
* Implement the JAX-RS resource using standard JAX-RS API
* Use OpenAPI annotations to document APIs
* Build the microservice
* Configure OpenAPI extension behaviour
* Run it


### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-openapi-mp` dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.openapi&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-openapi-mp&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-openapi-mp.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Tutorial for the implementation of JAX-RS is described in **jax-rs** sample.
 
### Documenting API 

KumuluzEE OpenAPI MicroProfile extension brings MicroProfile compliant annotations for documenting APIs.

#### Documenting CustomerAPI v2

##### Application class

```java
@SecurityScheme(securitySchemeName = "openid-connect", type = SecuritySchemeType.OPENIDCONNECT,
        openIdConnectUrl = "http://auth-server-url/.well-known/openid-configuration")
@ApplicationPath("v2")
@OpenAPIDefinition(info = @Info(title = "CustomerApi", version = "v2.0.0", contact = @Contact(), license = @License(name="something")), servers = @Server(url = "http://localhost:8080/v2"), security
        = @SecurityRequirement(name = "openid-connect"))
public class CustomerApplication extends Application {
}
```

##### Resources

```java
@Path("customer")
@Produces(MediaType.APPLICATION_JSON)
public class CustomerResource {

    @GET
    @Operation(summary = "Get customers list", description = "Returns a list of customers.")
    @APIResponses({
            @APIResponse(description = "List of customers", responseCode = "200", content = @Content(schema = @Schema(implementation =
                    Customer.class, type = SchemaType.ARRAY)))
    })
    public Response getCustomers() {
        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");
        customers.add(c);
        return Response.status(Response.Status.OK).entity(customers).build();
    }

    @GET
    @Operation(summary = "Get customers details", description = "Returns customer details.")
    @APIResponses({
            @APIResponse(description = "Customer details", responseCode = "200", content = @Content(schema = @Schema(implementation =
                    Customer.class)))
    })
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer c = new Customer("1", "John", "Doe");
        return Response.status(Response.Status.OK).entity(c).build();
    }

}
```

### OpenAPI configuration

Behaviour of the extension can be modified by using the KumuluzEE configuration framework. For example to limit package
scanning to only `com.kumuluz.ee.samples.openapi` you can use the following _config.yml_ file:

```yaml
kumuluzee:
  openapi-mp:
    scan:
      packages: com.kumuluz.ee.samples.openapi,com.kumuluz.ee.samples.openapi.v2
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-health/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customers
      username: postgres
      password: postgres
      pool:
        max-size: 20
  health:
    servlet:
      mapping: /health
      enabled: true
    logs:
      enabled: true
      level: INFO
      period-s: 30
    checks:
      data-source-health-check:
        jndi-name: jdbc/CustomersDS
      disk-space-health-check:
        threshold: 100000000</pre></body></html>




File path: jsf/src/main/resources/webapp/welcome.xhtml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"&gt;

&lt;h:head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/h:head&gt;
&lt;h:body&gt;
    &lt;h2&gt;Choose an action:&lt;/h2&gt;
    &lt;h:form&gt;
        &lt;h:commandButton value="Add customer" action="input"/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;h:commandButton value="List customers" action="list"/&gt;
    &lt;/h:form&gt;
&lt;/h:body&gt;
&lt;/html&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/alpha/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/alpha/Resource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.alpha;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("alpha")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class Resource {
    private Client client = ClientBuilder.newClient();

    @GET
    public Response get() {
        return Response.ok("alpha").build();
    }

    @GET
    @Path("beta")
    public Response get2() {
        Response r = client
                .target("http://localhost:8083/v1")
                .path("gamma")
                .request()
                .get();
        String response = r.readEntity(String.class);
        return Response.ok("alpha-&gt;" + response).build();
    }
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-client/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Kumuluzee gRPC client sample

## Requirements

In order to run this example you will need the following:
1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the
    following in command line:
    ```bash
   java -version   
    ```
2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the
    following in a command line:
    ```bash
    mvn -version
    ```
3. Git:
    * If you have installed Git, you can check the version by typing the
    following in a command line:
    ```bash
    git --version
    ```

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:
    ```bash
    cd kumuluzee-grpc-sample/grpc-client
    mvn clean package
    ```
    
2. Run the sample:
    * Uber-jar:
    ```bash
    java -jar target/${project.build.finalName}.jar
    ```
    
    * Exploded:
    ```bash
    java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```

The grpc [server](../grpc-server) should be running on port and address specified in
the config.yml (`grpc.client.port` and `grpc.client.address`)file. On success the following line
should appear in log output:

```bash
2018-02-26 09:42:26.774 INFO -- client.UserServiceClient$1 -- Primoz Hrovat
2018-02-26 09:42:26.777 INFO -- client.UserServiceClient$1 -- Completed
```

## Tutorial

This tutorial will guide you through the steps required to initialize gRPC client
in KumuluzEE microservice.

### Add Maven dependencies

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-cdi-weld`,
and `kumuluzee-grpc` dependency to the sample:

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.grpc&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-grpc&lt;/artifactId&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;

&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar,
`protobuf-maven-plugin` plugin to generate java classes from `.proto` files and 
`os-maven-plugin` extension to let maven discover your OS so it can download the appropriate
compiler for Protobuf files.

```xml
&lt;build&gt;
    &lt;extensions&gt;
        &lt;extension&gt;
            &lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;
            &lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.5.0.Final&lt;/version&gt;
        &lt;/extension&gt;
    &lt;/extensions&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;0.5.1&lt;/version&gt;
            &lt;configuration&gt;
                &lt;protocArtifact&gt;com.google.protobuf:protoc:3.5.1-1:exe:${os.detected.classifier}&lt;/protocArtifact&gt;
                &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;
                &lt;pluginArtifact&gt;io.grpc:protoc-gen-grpc-java:1.14.0:exe:${os.detected.classifier}&lt;/pluginArtifact&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;compile&lt;/goal&gt;
                        &lt;goal&gt;compile-custom&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

If you prefer exploded version change `goal` in `kumuluzee-maven-plugin` to `copy-dependencies`.

### Define proto file

Define `.proto` file with service and messages definition. More about Protobuf files
can be found on [Google Developers](https://developers.google.com/protocol-buffers/). Place your proto files
in "proto" directory so the maven plugin can detect it and compile correspondent Java classes.

```proto
syntax = "proto3";
option java_package = "client";

service User {
    rpc getUser(UserRequest) returns (UserResponse) {};
}

message UserRequest {
    int32 id = 1;
}

message UserResponse {
    int32 id = 1;
    string name = 2;
    string surname = 3;
}
```

### Implement client

Implement stub (client) that establishes channel with provided configuration. To simplify code you can use GrpcClientConf
helper class provided in `kumuluzee-grpc`. Then you can create new request and call it just like any other java method.

```java
@ApplicationScoped
public class UserServiceClient {

    private final static Logger logger = Logger.getLogger(UserServiceClient.class.getName());
    private final String JWT_TOKEN = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9." +
            "eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0IiwiaWF0IjoxNTE2MjM5MDIyfQ." +
            "VhfWc4uNtTNicztGHvnXyRMhnmIrXZ947EjO9ECV3G6pzPCYqjzwkdTgykW-" +
            "FWbQsSJH6aVnryK0DoLrO8f4XEsblj_Ind1CffXYcqjyZxwkPy4r5SxA--QvewsUsWfC1_I55J-Z6kh7oHm5Z_7vasudOFAXukmY5uBg_adDJN4";
    private UserGrpc.UserStub stub;

    @PostConstruct
    public void init() {
        try {
            GrpcChannels clientPool = GrpcChannels.getInstance();
            GrpcChannelConfig config = clientPool.getGrpcClientConfig("client1");
            GrpcClient client = new GrpcClient(config);
            stub = UserGrpc.newStub(client.getChannel()).withCallCredentials(new JWTClientCredentials(JWT_TOKEN));
        } catch (SSLException e) {
            logger.warning(e.getMessage());
        }
    }

    public void getUser(Integer id) {
        UserService.UserRequest request = UserService.UserRequest.newBuilder()
                .setId(id)
                .build();

        stub.getUser(request, new StreamObserver&lt;UserService.UserResponse&gt;() {
            @Override
            public void onNext(UserService.UserResponse userResponse) {
                logger.info(userResponse.getName() + " " + userResponse.getSurname());
            }

            @Override
            public void onError(Throwable throwable) {
                logger.warning("Error retrieving user");
                throwable.printStackTrace();
            }

            @Override
            public void onCompleted() {
                logger.info("Completed");
            }
        });
    }
}
```

### Startup class

Just for demonstration purposes an Example bean is created at startup that calls `UserServiceClient` and it's method.

```java
@ApplicationScoped
public class Example {

    private final static Logger logger = Logger.getLogger(Example.class.getName());

    @Inject
    UserServiceClient userClient;

    public void init(@Observes @Initialized(ApplicationScoped.class) Object o){
        logger.info("Example initialized");
        userClient.getUser(1);
    }
}
```

### Add configuration

Add required configuration:
```yaml
kumuluzee:
  name: "grpc client test"
  server:
    http:
      port: 8081
  grpc:
    clients:
    - name: client1
      port: 8443
      address: localhost
```

### Build the microservice and run it

To build the microservice and run the example use the commands as described in previous section.


</pre></body></html>




File path: kumuluzee-opentracing-tutorial/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE OpenTracing tutorial

This is a starting point for the tutorial, published on the [KumuluzEE blog](https://blog.kumuluz.com/developers/community/2019/02/11/kumuluzee-opentracing-jaeger). Finished project is available on branch _opentracing_tutorial_finished_. It is designed purely for purposes of demonstrating OpenTracing, which is why the only thing these microservices do is communicate with each other using HTTP requests. It is also beginner friendly due to the code being really simple.

## Structure
Project consists of 5 microservices:
1. __master__ - This is the entry point of the application. It is served on `http://localhost:8080` (actual endpoint on `v1/master`). When queried, it makes two requests: to _alpha_ endpoint  `v1/alpha` and to _beta_ endpoint `v1/beta`.
2. __alpha__ - This is the first of 4 "slave" microservices. It is served on `http://localhost:8081` and has two endpoints: `/v1/alpha` (just returns value) and `/v1/alpha/beta`, which queries _gamma_ endpoint `v1/gamma`.
3. __beta__ - This is the second of 4 "slave" microservices. It is served on `http://localhost:8082` and has one endpoint: `/v1/beta`, which queries _alpha_ endpoint `/v1/alpha/beta`. Simulated lag is added to this request (random delay).
4. __gamma__ - This is the third of 4 "slave" microservices. It is served on `http://localhost:8083` and has one endpoint: `/v1/gamma`, which queries _delta_ endpoint `/v1/delta`. This microservice is different, because it uses a simulated database with CDI.
5. __delta__ - This is the last of 4 "slave" microservices. It is served on `http://localhost:8084` and has one endpoint: `/v1/delta`, which just return a value.

![alt text](diagram.png "Diagram explaining microservice connections")

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-opentracing-tutorial
    $ mvn clean package
    ```

2. Run the sample (all five microservices):
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The microservices can be accessed on the following URLs:
* Master microservice main endpoint - http://localhost:8080/v1/master
* Alpha microservice endpoint 1 - http://localhost:8081/v1/alpha
* Alpha microservice endpoint 2 - http://localhost:8081/v1/alpha/beta
* Beta microservice endpoint - http://localhost:8082/v1/beta
* Gamma microservice endpoint - http://localhost:8083/v1/gamma
* Delta microservice endpoint - http://localhost:8084/v1/delta

To shut down the example simply stop the processes in the foreground.




</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/src/main/java/com/kumuluz/ee/samples/reactive/vertx/VertxApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
*
* @author Žan Ožbot
*/
@ApplicationPath("v1")
public class VertxApplication extends Application {

}
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-discovery/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Verticle Discovery &amp;mdash; sample for bridge discovery

&gt; Register a Vert.x service and request a service registered with e.g. KumuluzEE Discovery

The objective of this sample is to get familiar with publishing services on Vert.x Service Discovery and
requesting a service from a microservice using KumuluzEE Reactive Vert.x and KumuluzEE Discovery extensions.
The tutorial will guide you through all the necessary steps.
You will add dependencies into `pom.xml`.
You will develop a simple server Verticle that will publish a service on Vert.x Service Discovery and 
request service url via REST.
Required knowledge: basic familiarity with Vert.x.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

This sample depends on the following sample:
* [`kumuluzee-reactive-vertx-bridge`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge)
Microservice that acts as a bridge between KumuluzEE Discovery and Vert.x Service Discovery

## Usage

The example uses maven to build a fat jar.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-reactive-vertx/simple-verticles/verticle-discovery
    $ mvn clean package
    ```

2. Run the sample:

    ```batch
    java -jar target\${project.build.finalName}-fat.jar -cluster
    ```
 
The application/service can be accessed on the following URL:
* REST resource - http://localhost:8082/

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a Vert.x discovery Verticle.
* GET http://localhost:8082/ - status of this service
* GET http://localhost:8082/discover - discovered service's url

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies
* Implement discovery Verticle
* Build and run

### Add Maven dependencies

Add `vertx-web` and `vertx-hazelcast` for clustering.

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.vertx&lt;/groupId&gt;
        &lt;artifactId&gt;vertx-web&lt;/artifactId&gt;
        &lt;version&gt;${vertx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.vertx&lt;/groupId&gt;
        &lt;artifactId&gt;vertx-hazelcast&lt;/artifactId&gt;
        &lt;version&gt;${vertx.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `maven-compiler-plugin` build plugin to compile, `maven-shade-plugin` to package and `exec-maven-plugin` to run the project.

### Implement discovery Verticle

Implement a class e.g. DiscoveryVerticle that extends `AbstractVerticle`.

In the example below we will first create a simple server, which will respond to our requests.

```java
HttpServer server = vertx.createHttpServer();
Router router = Router.router(vertx);

router.get("/").handler(routingContext -&gt; {
    routingContext.response()
            .end((new JsonObject().put("status", "UP")).toString());
});

router.get("/discover").handler(routingContext -&gt; {
    getService(routingContext.response());
});

server.requestHandler(router::accept).listen(8082);
```

Then we will publish the created endpoint on Vert.x Service Discovery.

```java
discovery = ServiceDiscovery.create(vertx);

record = HttpEndpoint.createRecord("some-rest-api", "localhost", 8080, "");

discovery.publish(record, ar -&gt; {
    if (ar.succeeded()) {
        record.setRegistration(ar.result().getRegistration());
        log.info("Service was successfully registered.");
    } else {
        log.info("Vert.x service registration failed.");
    }
});
```

Finally we will create a method for requesting a service which will be called once we hit `http://localhost:8082/discover` endpoint.
In this sample we will request for a service `customers-service` with version `1.0.0` located in `dev`
environment.

```java
JsonObject service = new JsonObject().put("name", "customer-service")
    .put("version", "1.0.0")
    .put("env", "dev");
 
vertx.eventBus().send("vertx.discovery.request", service, ar -&gt; {
    if (ar.succeeded()) {
        JsonObject reply = (JsonObject) ar.result().body();
        response.end(reply.toString());
    } else {
        response.end((new JsonObject().put("message", "Failed to retrieve service url.")).toString());
    }
});
```

Don't forget to deregister the service when shutting down the service.

```java
discovery.unpublish(record.getRegistration(), ar -&gt; {
    if(ar.succeeded()) {
        log.info("Service was successfully deregistered.");
    } else {
        log.info("Error deregistering service.");
    }
});
```

### Build and run it

To build and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-feature-flags-unleash/src/main/java/com/kumuluz/ee/samples/unleash/connection/UnleashConnection.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.unleash.connection;

/**
 * This annotated class is only used if there is a more complex UnleashConfig object needed.
 * If there is no need for such object, put the service name and unleash api URL in the config.yml
 *
 * @author Blaž Mrak
 * @since 1.0.0
 */
/*
import com.kumuluz.ee.feature.flags.common.annotations.FFConnection;
import no.finn.unleash.util.UnleashConfig;

import javax.enterprise.context.ApplicationScoped;

@FFConnection
@ApplicationScoped
public class UnleashConnection {
    UnleashConfig config = UnleashConfig
            .builder()
            .unleashAPI("http://localhost:4242/api")
            .appName("feature-flags-sample-service")
            .build();
}
*/
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Simple Verticle samples

&gt; Simple verticle samples for KumuluzEE Reactive Vert.x extension 

This module contains two samples that can be used with microservices which contain the KumuluzEE Reactive Vert.x extension:

- [`verticle-publisher`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx//simple-verticles/verticle-publisher) Verticle that publishes messages to Vert.x event bus

- [`verticle-listener`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/simple-verticles/verticle-listener) Verticle that listens to messages on Vert.x event bus

- [`verticle-discovery`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/simple-verticles/verticle-discovery) Verticle that registers and discovers a service</pre></body></html>




File path: https/src/main/java/jaxrs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package jaxrs;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: jsp/src/main/resources/webapp/welcome.jsp
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;KumuluzEE JSP sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;Choose an action:&lt;/h2&gt;
    &lt;a href="input.jsp"&gt;Add customer&lt;/a&gt;
    &lt;br/&gt;
    &lt;br/&gt;
    &lt;a href="list.jsp"&gt;List customers&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></body></html>




File path: kumuluzee-logs-jul/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-logs-jul&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Logs JUL sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Logs JUL usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-logs-jul&lt;/artifactId&gt;
            &lt;version&gt;1.5.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE microservices on Kubernetes

This example contains two cloud-native Java EE microservice applications, implemented using KumuluzEE 
microservice framework, and demonstrates how to deploy them to Kubernetes cluster.

Implemented microservices:
* **customers** - managing customer entities, and
* **orders** - managing order entities

Both microservices are implemented following cloud-native concepts and functionalities that are essential in microservice architecture, such as configuration management with MicroProfile API and service discovery. 

This example was used in the blog posts [Running KumuluzEE microservices on Kubernetes](https://blog.kumuluz.com/kumuluzee/kubernetes/2017/12/03/kumuluzee-microservices-on-kubernetes_part1).
</pre></body></html>




File path: kumuluzee-cors/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE CORS sample

&gt; Develop a microservice application with support for Cross Origin.

The objective of this sample is to show how to develop a servlet or JAX-RS application with support for Cross Origin Access. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. To enable support for CORS you will use kumuluzee-cors extension. 
Required knowledge: basic familiarity with servlets and JAX-RS.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-cors
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* Servlet - http://localhost:8080/CustomerServlet
* JAX-RS - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple microservice with support for Cross Origin access and pack it as Uber-jar. 

We will develope a simple microservice with JAX-RS resource and servlet.

JAX-RS resource:
* GET http://localhost:8080/v1/customer - list of all customers

Servlet:
* GET http://localhost:8080/CustomerServlet - list of all customers

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, Cors)
* Implement the JAX-RS resource using standard JAX-RS API
* Implement the servlet using standard Servlet 3.1 API
* Use CORS annotations and provide CORS configuration to enable Cross origin support
* Build the microservice
* Run it


### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core` and `kumuluzee-servlet-jetty` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-cors` dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.cors&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cors&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-cors.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
```

Implement JAX-RS resource, for example, to implement resource `customers` which will return all customers by default on GET request:

```java
@Path("customer")
@Produces(MediaType.APPLICATION_JSON)
@CrossOrigin(allowOrigin = "http://resource-origin.com")
public class CustomerResource {

    @GET
    public Response getCustomers() {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");

        customers.add(c);

        return Response.status(Response.Status.OK).entity(customers).build();
    }
}
```

Implement the `Customer` Java class, which is a POJO:
```java
public class Customer {

    private String id;

    private String firstName;

    private String lastName;

    // TODO: implement get and set methods
}
```

### Implement the servlet

Implement the servlet, for example, which will return all customers by default on GET request:

```java
@WebServlet("CustomerServlet")
public class CustomerServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
                Customer c = new Customer("1", "John", "Doe");
        
                customers.add(c);
        
                resp.getWriter().println(customers.toString());
    }
}
```

### Enable Cross Origin support on JAX-RS application

To enable Cross Origin support on JAX-RS application we use `@CrossOrigin` annotation. Annotation can be used on the level of:
* JAX-RS Application - annotation is provided on JAX-RS Application class. Configuration of annotation is inherited by all resources and methods.
* Resource - annotation is provided on JAX-RS Resource annotated with `@Path`. Configuration is inherited by all methods of resource.
* Method - annotation is provided on `HTTP method`.

In our sample we will enable Cross Origin on the level of resource:
```java
@Path("customer")
@Produces(MediaType.APPLICATION_JSON)
@CrossOrigin(allowOrigin = "http://resource-origin.com")
public class CustomerResource { ... }
```

Annotation contains default configuration which can be overwritten by setting properties of annotation or by providing config.yaml and naming the annotation as shown in the example of servlet.
 
### Enable Cross Origin support on Servlet

Cross Origin support is enabled by defining `@CrossOrigin` annotation on Servlet annotated with `@WebServlet`:
 ```java
@WebServlet("CustomerServlet")
@CrossOrigin(name = "customer-servlet")
public class CustomerServlet extends HttpServlet { ... }
```

In this case Cross Origin configuration is not provided by annotation but it is defined in confg.yaml:
 ```yaml
kumuluzee:
  cors-filter:
    annotations:
      customer-servlet:
        allow-origin: "http://origin2.kumuluz.com"
        allow-subdomains: false
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/DiscoverResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

import com.kumuluz.ee.discovery.annotations.DiscoverService;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Optional;

/**
 * @author Urban Malc
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("discover")
@RequestScoped
public class DiscoverResource {

    @Inject
    @DiscoverService(value = "customer-service", version = "1.0.x", environment = "dev")
    private Optional&lt;WebTarget&gt; target;

    @GET
    @Path("url")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getUrl() {
        if (target.isPresent()) {
            return Response.ok(target.get().getUri().toString()).build();
        } else {
            return Response.status(Response.Status.NO_CONTENT).build();
        }
    }

    @GET
    public Response getProxiedCustomers() {
        if (target.isPresent()) {
            WebTarget service = target.get().path("v1/customers");

            Response response;
            try {
                response = service.request().get();
            } catch (ProcessingException e) {
                return Response.status(408).build();
            }

            ProxiedResponse proxiedResponse = new ProxiedResponse();
            proxiedResponse.setResponse(response.readEntity(String.class));
            proxiedResponse.setProxiedFrom(target.get().getUri().toString());

            return Response.ok(proxiedResponse).build();
        } else {
            return Response.status(Response.Status.NO_CONTENT).build();
        }
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        if (target.isPresent()) {
            WebTarget service = target.get().path("v1/customers");

            Response response;
            try {
                response = service.request().post(Entity.json(customer));
            } catch (ProcessingException e) {
                return Response.status(408).build();
            }

            return Response.fromResponse(response).build();
        } else {
            return Response.status(Response.Status.NO_CONTENT).build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/gamma/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/gamma/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.gamma;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import java.util.HashMap;

@ApplicationScoped
public class Database {
    private HashMap&lt;Integer, String&gt; data;

    @PostConstruct
    private void init() {
        data = new HashMap&lt;Integer, String&gt;();
        data.put(1, "gamma");
    }

    public String get(Integer id) {
        return data.get(id);
    }

}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/alpha/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-health/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-logs-log4j2/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: vertx-listener
  version: 1.0.0
  env:
    name: dev
  server:
    http:
      port: 8081
    ttl: 20
    ping-interval: 15
  reactive:
    vertx:
      clustered: true
      cluster-host: localhost
      cluster-port: 0</pre></body></html>




File path: kumuluzee-metrics/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Metrics sample

&gt; Build a REST service, pack it as a KumuluzEE microservice, and monitor its performance with KumuluzEE Metrics

The objective of this sample is to demonstrate how to use the built-in monitoring framework to expose basic 
runtime metrics.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-metrics
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers
* Metrics JSON &amp; Prometheus - http://localhost:8080/metrics

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to use KumuluzEE Metrics and pack the application as a KumuluzEE
microservice. We will extend the existing
[KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for
[KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing
sample
* Add Maven dependencies
* Add metrics collectors (counters, meters, timers,...)
* Add configuration
* Add Web Application Instrumentation
* Configure the servlet
* Configure the Logstash reporter
* Configure the Logs reporter
* Build the microservice and run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the
dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured
in `pom.xml`.

Add the `kumuluzee-cdi-weld`, `kumuluzee-config-mp` and `kumuluzee-metrics-core` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
&lt;/dependency&gt;
```

### Add metrics colectors (counters, meters, timers,...)

Let's first define some monitoring tools to collect a few of the metrics in our `CustomerResource` class. We'll add two
meters, that monitor the rate at which the customers are being added and removed. We define them either by annotating
the method with `@Metered`, or by creating a `Meter` object and then calling the `mark()` method every time the add or
remove methods are being called. Let's also measure the time it takes for the method to execute. We can do that by
adding the `@Timed` annotation to the method. We'll also add two more tools in this example, a counter and a histogram.
Here is a code snippet of the example resource bean, which illustrates the usage of mentioned tools:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@RequestScoped
public class CustomerResource {

    @Inject
    @Metric(name = "customer_counter")
    private ConcurrentGauge customerCounter;

    @Inject
    @Metric(name = "first_name_length_histogram")
    private Histogram nameLength;

    @Inject
    @Metric(name = "customer_adding_meter")
    private Meter addMeter;

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        getCustomerCount();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") int customerId) {
        Customer customer = Database.getCustomer(customerId);
        if(customer != null) {
            return Response.ok(customer).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @GET
    @Path("add-sample-names")
    @Timed(name = "add-sample-names-timer")
    public Response addSampleNames() {
        addNewCustomer(new Customer(Database.getCustomers().size(), "Daniel", "Ornelas"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Dennis", "McBride"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Walter", "Wright"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Mitchell", "Kish"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Tracy", "Edwards"));

        return Response.noContent().build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        addMeter.mark();
        customerCounter.inc();
        nameLength.update(customer.getFirstName().length());
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    @Metered(name = "customer_deleting_meter")
    public Response deleteCustomer(@PathParam("customerId") int customerId) {
        customerCounter.dec();
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }

    @Gauge(name = "customer_count_gauge", unit = MetricUnits.NONE)
    private int getCustomerCount() {
        return Database.getCustomers().size();
    }
}
```

### Add configuration

Most of the metrics components can be configured though configuration. 
Here is a sample config that sets a few service parameters:

```yaml
kumuluzee:
  name: metrics-sample
  version: 1.0.0
  environment:
    name: dev
```

### Add web application instrumentation

Let's add web instrumentation, that monitors requests and responses at a certain url. We will define two endpoints;
one monitoring `/metrics` endpoint and one monitoring `/v1/customers` endpoint. We can do that by simply adding the 
following lines to the config file:

```yaml
kumuluzee:
    metrics:
        web-instrumentation:
          - name: metricsEndpoint
            url-pattern: /metrics/*
          - name: customersEndpoint
            url-pattern: /v1/customers/*
```

### Configure the servlet

It's time to look at the metrics we collected. The servlet for exporting metrics is already built in and enabled by 
default in development environment or in debug mode. The metrics can be seen at http://localhost:8080/metrics. The 
servlet can also be disabled or remapped in the config by setting the `kumuluzee.metrics.servlet.enabled` and 
`kumuluzee.metrics.servlet.mapping` respectively.

Servlet exposes the following endpoints:
- GET /metrics - All collected metrics. If the `Accept` header is set to `application/json`, servlet returns metrics in
  JSON format. Otherwise, servlet returns metrics in Prometheus format.
- OPTIONS /metrics - Metadata about the collected metrics.

Here is an example output of GET request on the `/metrics` endpoint with the `Accept` header set to `application/json`:
```json
{
    "application": {
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.add-sample-names-timer": {
            "count": 3,
            "meanRate": 0.01609796426559552,
            "oneMinRate": 0.029872241020718428,
            "fiveMinRate": 0.32928698165641596,
            "fifteenMinRate": 0.4912384518467888,
            "min": 156867,
            "max": 3457480,
            "mean": 1271679,
            "stddev": 1545698.2505290825,
            "p50": 200690,
            "p75": 3457480,
            "p95": 3457480,
            "p98": 3457480,
            "p99": 3457480,
            "p999": 3457480
        },
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.customer_deleting_meter": {
            "count": 1,
            "meanRate": 0.05720811542737377,
            "oneMinRate": 0.16929634497812282,
            "fiveMinRate": 0.1934432200964012,
            "fifteenMinRate": 0.19779007785878447
        },
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.customer_count_gauge": 14,
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.customer_adding_meter": {
            "count": 15,
            "meanRate": 0.08048839766795181,
            "oneMinRate": 0.1493612051035921,
            "fiveMinRate": 1.6464349082820788,
            "fifteenMinRate": 2.456192259233944
        },
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.customer_counter": 14,
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.first_name_length_histogram": {
            "count": 15,
            "min": 5,
            "max": 8,
            "mean": 6.199999999999999,
            "stddev": 0.9797958971132713,
            "p50": 6,
            "p75": 6,
            "p95": 8,
            "p98": 8,
            "p99": 8,
            "p999": 8
        }
    },
    "base": {
        "memory.committedHeap": 304611328,
        "thread.daemon.count": 12,
        "gc.PS-MarkSweep.count": 1,
        "classloader.totalLoadedClass.count": 4402,
        "thread.count": 18,
        "gc.PS-Scavenge.count": 3,
        "classloader.totalUnloadedClass.count": 0,
        "memory.maxHeap": 3713531904,
        "gc.PS-Scavenge.time": 42,
        "gc.PS-MarkSweep.time": 44,
        "memory.usedHeap": 34963072,
        "jvm.uptime": 200420
    }
}
```

As you can see, our custom defined metrics are reported in the `application` registry. Metrics about the JVM, memory
usage and other system metrics are automatically collected and reported in the `base` registry.

More information about the metrics can be acquired by making an OPTIONS request on the `/metrics` endpoint with the
`Accept` header set to `application/json`. Here is an example output:

```json
{
    "application": {
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.add-sample-names-timer": {
            "unit": "nanoseconds",
            "type": "counter",
            "description": "",
            "displayName": "",
            "tags": ""
        },
        "com.kumuluz.ee.samples.kumuluzee_metrics.CustomerResource.customer_deleting_meter": {
            "unit": "per_second",
            "type": "counter",
            "description": "",
            "displayName": "",
            "tags": ""
        },
        ...
    },
    "base": {
        "memory.committedHeap": {
            "unit": "bytes",
            "type": "gauge",
            "description": "Displays the amount of memory in bytes that is committed for the Java virtual machine to use. This amount of memory is guaranteed for the Java virtual machine to use.",
            "displayName": "Committed Heap Memory",
            "tags": ""
        },
        "thread.count": {
            "unit": "none",
            "type": "counter",
            "description": "Displays the current number of live threads including both daemon and non-daemon threads",
            "displayName": "Thread Count",
            "tags": ""
        },
        "jvm.uptime": {
            "unit": "milliseconds",
            "type": "gauge",
            "description": "Displays the start time of the Java virtual machine in milliseconds. This attribute displays the approximate time when the Java virtual machine started.",
            "displayName": "JVM Uptime",
            "tags": ""
        },
        ...
    }
}
```

### Configure the Logs reporter

A reporter that automatically reports metrics to the available logging framework can be configured.
Lets first add a dependency:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-metrics-logs&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
&lt;/dependency&gt;
```

You can set it up in the configuration by enabling it (`kumuluzee.metrics.logs.enabled`) and defining the logging
level (`kumuluzee.metrics.logstash.level`) and the time period (`kumuluzee.metrics.logstash.period-s`).

### Configure the Logstash reporter

A reporter for automatically reporting metrics to Logstash can be configured. Lets first add a dependency:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-metrics-logstash&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
&lt;/dependency&gt;
```

You can set it up in the configuration by enabling it (`kumuluzee.metrics.logstash.enabled`) and defining the address 
(`kumuluzee.metrics.logstash.address`), the port (`kumuluzee.metrics.logstash.port`) and the time period 
(`kumuluzee.metrics.logstash.period-s`).

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  discovery:
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/resources/schemas/avro/v1.0.0/pricing.avsc
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{
  "namespace": "com.kumuluz.ee.samples.kafka.registry.avro.lib",
  "type": "record",
  "name": "Pricing",
  "fields": [
    {"name": "price", "type": "string"},
    {"name": "priceExTax", "type": "string"},
    {"name": "basePrice", "type": "string"},
    {"name": "taxAmount", "type": "string"},
    {"name": "description", "type": "string"}
  ]
}</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
        bean-discovery-mode="all"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-config-mp/src/main/resources/META-INF/services/org.eclipse.microprofile.config.spi.ConfigSource
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">com.kumuluz.ee.samples.configsources.ExampleConfigSource</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/health/OrderServiceHealthCheck.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.health;

import org.eclipse.microprofile.health.Health;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

@Health
@ApplicationScoped
public class OrderServiceHealthCheck implements HealthCheck {

    @Inject
    private HealthManagementDemo healthManagementDemo;

    @Override
    public HealthCheckResponse call() {

        if (healthManagementDemo.isHealthy()) {
            return HealthCheckResponse.named(OrderServiceHealthCheck.class.getSimpleName()).up().build();
        } else {
            return HealthCheckResponse.named(OrderServiceHealthCheck.class.getSimpleName()).down().build();
        }

    }
}
</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk

ObjectStore


</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/OrdersApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1;

import com.kumuluz.ee.discovery.annotations.RegisterService;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/v1")
@RegisterService
public class OrdersApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/com/kumuluz/ee/samples/ethereum/entities/Transaction.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.ethereum.entities;

import java.math.BigDecimal;

/**
 * @author Domen Gašperlin
 * @since 1.0.0
 */
public class Transaction {

    private String id;

    private BigDecimal amount;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
}
</pre></body></html>




File path: jsf/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Java Server Faces (JSF) sample

&gt; Develop a sample JSF application and pack it as a KumuluzEE microservice.

The objective of this sample is to demonstrate how to develop a JSF application and pack it as a KumuluzEE microservice. The tutorial guides you through the development of a JSF application, including the development of a managed bean, JSF views, and configuring the web module. It shows how to pack a JSF application as a microservice. Required knowledge: basic familiarity with JSF.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd jsf
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JSF page - http://localhost:8080

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a servlet web module (with JSF 2.2) and pack it as a KumuluzEE microservice. 
We will develop a simple front-end in JSF and required back-end with the following functionalities:
* User interface and logic to add a customer
* User interface and logic to list all customer
* User interface with welcome page and list of options

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.).
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JSP, JSF).
* Implement the front-end using JSF views
* Implement supporting backend beans
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jsp-jetty` and `kumuluzee-jsf-mojarra` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jsp-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jsf-mojarra&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement backend beans

First, let us create a `Customer` POJO:

```java
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    // TODO: add getters and setters
}
```

Create `Database` class to simulate persistence layer:

```java
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
```
Implement the `CustomerBean` class. This class will serve as a bean supporting functionalities of the user interface. Note that `@SessionScoped` and `@ManagedBean` are both imported from the package `javax.faces.bean`. If needed, you can modify the code to use CDI beans and CDI scopes. In that case, you need to add the file `beans.xml` to the directory `resources/META-INF` file and add the `kumuluzee-cdi-weld` dependency to pom.xml. Sample for CDI configuration can be found in [KumuluzEE JPA sample documentation](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa).

Implementation of `CustomerBean` class:

```java
@ManagedBean
@SessionScoped
public class CustomerBean implements Serializable {

    private String id;
    private String firstName;
    private String lastName;

    public CustomerBean() {
    }

    public CustomerBean(String id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    // TODO: implement getters and setters

    public void addCustomer() {
        Customer customer = new Customer();
        customer.setId(this.getId());
        customer.setFirstName(this.getFirstName());
        customer.setLastName(this.getLastName());

        Database.addCustomer(customer);

        this.setId(null);
        this.setFirstName(null);
        this.setLastName(null);
    }

    public List&lt;Customer&gt; getCustomers()
    {
        return Database.getCustomers();
    }

    @Override
    public String toString() {
        return "Customer {\n" +
                "  id='" + id + "',\n" +
                "  firstName='" + firstName + "',\n" +
                "  lastName='" + lastName + "'\n" +
                "}";
    }
}
```
### Implement the views

Create the directory `resources/webapp` and add the views `input.xhtml`, `list.xhtml` and `welcome.xhtml`.

**welcome.xhtml**
```xhtml
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"&gt;

&lt;h:head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/h:head&gt;
&lt;h:body&gt;
    &lt;h2&gt;Choose an action:&lt;/h2&gt;
    &lt;h:form&gt;
        &lt;h:commandButton value="Add customer" action="input"/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;h:commandButton value="List customers" action="list"/&gt;
    &lt;/h:form&gt;
&lt;/h:body&gt;
&lt;/html&gt;
```

**list.xhtml**
```xhtml
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"&gt;

&lt;h:head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/h:head&gt;
&lt;h:body&gt;
    &lt;h2&gt;Customers&lt;/h2&gt;
    &lt;ui:repeat value="#{customerBean.customers}" var="customer"&gt;
        &lt;h:outputText value="#{customer.toString()}"/&gt;
        &lt;br/&gt;
    &lt;/ui:repeat&gt;
    &lt;br /&gt;
    &lt;h:form&gt;
        &lt;h:commandButton value="Home" action="welcome"/&gt;
    &lt;/h:form&gt;
&lt;/h:body&gt;
&lt;/html&gt;
```

**input.xhtml**
```xhtml
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"&gt;

&lt;h:head&gt;
    &lt;title&gt;KumuluzEE JSF sample&lt;/title&gt;
&lt;/h:head&gt;
&lt;h:body&gt;
    &lt;h2&gt;Please enter customer data below:&lt;/h2&gt;
    &lt;h:form&gt;
        &lt;h:outputLabel for="id"&gt;
            ID:
            &lt;h:inputText id="id" value="#{customerBean.id}"/&gt;
        &lt;/h:outputLabel&gt;
        &lt;br/&gt;
        &lt;h:outputLabel for="firstName"&gt;
            First name:
            &lt;h:inputText id="firstName" value="#{customerBean.firstName}"/&gt;
        &lt;/h:outputLabel&gt;
        &lt;br/&gt;
        &lt;h:outputLabel for="lastName"&gt;
            Last name:
            &lt;h:inputText id="lastName" value="#{customerBean.lastName}"/&gt;
        &lt;/h:outputLabel&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;h:commandButton value="Add" action="#{customerBean.addCustomer()}"/&gt;
        &lt;br/&gt;
        &lt;h:commandButton value="Home" action="welcome"/&gt;
    &lt;/h:form&gt;
&lt;/h:body&gt;
&lt;/html&gt;
```

### Configure web module
In the directory `resources/webapp/WEB-INF` add the file `web.xml`:

```xml
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;

    &lt;display-name&gt;KumuluzEE JSF sample&lt;/display-name&gt;

    &lt;!-- Welcome page --&gt;
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;welcome.xhtml&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;

    &lt;!-- JSF mapping --&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;javax.faces.webapp.FacesServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;!-- Map these files with JSF --&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.jsf&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.faces&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.xhtml&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;com.sun.faces.config.ConfigureListener&lt;/listener-class&gt;
    &lt;/listener&gt;
&lt;/web-app&gt;
```

### Build the sample and run it

To build the sample and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: jul/src/main/java/com/kumuluz/ee/samples/jul/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jul;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery &amp;mdash; discover services in JAX-RS service 

&gt; Develop a REST service that discovers a microservice registered with Consul.

The objective of this sample is to show how to discover a service, registered with Consul using KumuluzEE Discovery 
extension. The tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into pom
.xml. You will develop a simple REST service, which uses KumuluzEE Discovery extension for service discovery.
Required knowledge: basic familiarity with JAX-RS and REST; basic familiarity with Consul.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need a Consul instance. Note that such setup with only one node is not viable for 
production environments, but only for developing purposes. Download Consul and run it in development mode with the 
following command:

   ```bash
    $ consul agent -dev
   ```


You will also need a registered service instance. You can use the
[discovery-consul-register](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-register) sample.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd discovery-samples/discovery-discover-jaxrs
    $ mvn clean package
    ```

2. Start local Consul instance and another microservice, which registers to Consul:

    You can find instructions in discovery-register sample, mentioned above.

3. Run the sample:
* Uber-jar:

   ```bash
   $ java -jar target/${project.build.finalName}.jar
   ```
   
   in Windows environemnt use the command
   ```batch
   java -jar target/${project.build.finalName}.jar
   ```

* Exploded:

   ```bash
   $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
   ```
   
   in Windows environment use the command
   ```batch
   java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
   ```
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource, discovery using annotations - http://localhost:8080/v1/discover
* JAX-RS REST resource, programmatic discovery - http://localhost:8080/v1/programmatic

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a service, which uses KumuluzEE Discovery extension.
We will develop a simple REST service with the following resources:
* GET http://localhost:8080/v1/discover/url - discovered service's url
* GET http://localhost:8080/v1/discover - list of all customers from discovered service + discovered service's url
* POST http://localhost:8080/v1/discover - add a customer to discovered service
* GET http://localhost:8080/v1/programmatic/{serviceName}/{serviceVersion}/{environment} - discovered service's url

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS)
* Add Maven dependency to KumuluzEE Discovery extension
* Implement the service
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluz-jax-rs-jersey` and `kumuluzee-discovery` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the servlet


Register your module as JAX-RS service and define the application path. You could do that in web.xml or
for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class DiscoverApplication extends Application {
}
```

Implement JAX-RS resource, which will use annotations for service discovery:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("discover")
@RequestScoped
public class DiscoverResource {

    @Inject
    @DiscoverService(value = "customer-service", version = "1.0.x", environment = "dev")
    private WebTarget target;

    @GET
    @Path("url")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getUrl() {
        return Response.ok(target.getUri().toString()).build();
    }

    @GET
    public Response getProxiedCustomers() {
        WebTarget service = target.path("v1/customers");

        Response response;
        try {
            response = service.request().get();
        } catch (ProcessingException e) {
            return Response.status(408).build();
        }

        ProxiedResponse proxiedResponse = new ProxiedResponse();
        proxiedResponse.setResponse(response.readEntity(String.class));
        proxiedResponse.setProxiedFrom(target.getUri().toString());

        return Response.ok(proxiedResponse).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        WebTarget service = target.path("v1/customers");

        Response response;
        try {
            response = service.request().post(Entity.json(customer));
        } catch (ProcessingException e) {
            return Response.status(408).build();
        }

        return Response.fromResponse(response).build();
    }
}
```

In the example above, we inject a `WebTarget` resource using `@DiscoverService` annotation. KumuluzEE Discovery 
extension uses NPM-like versioning, so by specifying version "1.0.x", we always get the latest patch of 1.0.x version
microservice, registered with Consul.

We use two POJO's in this example: Customer, which is the same as in the discovery-register sample
and ProxiedResponse, which we use for returning discovered service's response and add it's port. They can be implemented
as follows:

```java
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
```

```java
public class ProxiedResponse {

    private String response;
    private String proxiedFrom;

    public String getResponse() {
        return response;
    }

    public void setResponse(String response) {
        this.response = response;
    }

    public String getProxiedFrom() {
        return proxiedFrom;
    }

    public void setProxiedFrom(String proxiedFrom) {
        this.proxiedFrom = proxiedFrom;
    }
}
```

Implement JAX-RS resource, which will use programmatic service discovery:

```java
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Path("programmatic")
@RequestScoped
public class ProgrammaticDiscoveryResource {

    @Inject
    DiscoveryUtil discoveryUtil;

    @GET
    @Path("{serviceName}/{serviceVersion}/{environment}")
    public Response getInstances(@PathParam("serviceName") String serviceName,
                                 @PathParam("serviceVersion") String serviceVersion,
                                 @PathParam("environment") String environment) {
        Optional&lt;List&lt;URL&gt;&gt; instances = discoveryUtil.getServiceInstances(serviceName, serviceVersion, environment);

        if(instances.isPresent()) {
            return Response.ok(instances.get()).build();
        } else {
            return Response.noContent().build();
        }
    }
}
```

In the example above, we use JAX-RS path parameters to discover the desired registered instance.
We inject a `DiscoveryUtil` resource and then call its function `getInstances(serviceName, serviceVersion, environment)`.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8u131-jre-alpine


COPY target /usr/src/myapp
WORKDIR /usr/src/myapp

EXPOSE 8080

CMD ["java", "-server", "-cp", "classes:dependency/*", "com.kumuluz.ee.EeApplication"]</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/java/com/kumuluz/ee/samples/kafka/registry/streams/BigDecimalDeserializer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.streams;

import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.serialization.Deserializer;

import java.math.BigDecimal;

/**
 * @author cen1
 */
public class BigDecimalDeserializer implements Deserializer&lt;BigDecimal&gt; {

    @Override
    public BigDecimal deserialize(String s, byte[] bytes) {
        return new BigDecimal(new String(bytes));
    }

    @Override
    public BigDecimal deserialize(String topic, Headers headers, byte[] data) {
        return new BigDecimal(new String(data));
    }
}
</pre></body></html>




File path: jax-rs/src/main/java/com/kumuluz/ee/samples/jaxrs/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxrs;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/DiscoverApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Urban Malc
 */
@ApplicationPath("v1")
public class DiscoverApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-config-etcd/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Config sample with etcd 

&gt; Build a REST service which utilizes KumuluzEE Config to access configuration properties stored in etcd and pack it 
as a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses KumuluzEE Config extension to
access configuration properties stored in etcd. In this sample we develop a simple REST service that returns
a list of configuration properties from all available configuration sources and pack it as KumuluzEE microservice. This 
tutorial will guide you through all the necessary steps. You will first add KumuluzEE dependencies into pom.xml. To 
develop the REST service, you will use the standard JAX-RS 2 API. Required knowledge: basic familiarity with JAX-RS 2
and basic concepts of REST, JSON, yaml and etcd.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

To run this sample you will need an etcd instance. Note that such setup with only one etcd node is not viable for 
production environments, but only for developing purposes. Here is an example on how to quickly run an etcd instance 
with docker:

   ```bash
    $ docker run -d -p 2379:2379 \
        --name etcd \
        --volume=/tmp/etcd-data:/etcd-data \
        quay.io/coreos/etcd:latest \
        /usr/local/bin/etcd \
        --name my-etcd-1 \
        --data-dir /etcd-data \
        --listen-client-urls http://0.0.0.0:2379 \
        --advertise-client-urls http://0.0.0.0:2379 \
        --listen-peer-urls http://0.0.0.0:2380 \
        --initial-advertise-peer-urls http://0.0.0.0:2380 \
        --initial-cluster my-etcd-1=http://0.0.0.0:2380 \
        --initial-cluster-token my-etcd-token \
        --initial-cluster-state new \
        --auto-compaction-retention 1 \
        -cors="*"
   ```


## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-config-etcd
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/config

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple REST service that exposes configuration 
properties retrieved with a built-in configuration framework and KumuluEE config extension. We will develop a 
simple REST service with just one resource:
* GET http://localhost:8080/v1/config - list of all configuration properties from configuration file 

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS and CDI)
* Add Maven dependency to KumuluzEE Config
* Define our configuration properties in configuration file
* Implement the service using standard JAX-RS 2
* Build the microservice
* Run it
* Dynamically change configuration properties in etcd

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey` and `kumuluzee-cdi-weld` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Alternatively, we could add the `kumuluzee-microProfile-1.0`, which adds the MicroProfile 1.0 dependencies (JAX-RS, CDI,
JSON-P, and Servlet).

Add dependency to KumuluzEE Config extension:

```xml
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
    &lt;/dependency&gt;
```
 
Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Define KumuluzEE configuration as well as your custom configuration properties in a `config.yaml` configuration 
file:

```yaml
kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev
  config:
    start-retry-delay-ms: 500
    max-retry-delay-ms: 900000
    etcd:
      hosts: http://192.168.99.100:2379

rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
```

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example 
with the `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class ConfigApplication extends Application {
}
```

Implement an application scoped CDI bean that will automatically load and hold our configuration properties. It shall
be annotated with `@ConfigBundle` annotation whose value represents the prefix for the configuration properties keys.
Add a `@ConfigValue(watch = true)` to enable watch on the key. This will monitor the changes of this key in etcd and 
automatically update the value in the configuration bean. 
 
```java
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    @ConfigValue(watch = true)
    private String stringProperty;
    private Boolean booleanProperty;
    private Integer integerProperty;
    
    // get and set methods
    
}
```

Implement a JAX-RS resource that will expose retrieved configuration properties on GET request:

```java
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                        "\"stringProperty\": \"%s\"," +
                        "\"booleanProperty\": %b," +
                        "\"integerProperty\": %d" +
                        "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty());

        return Response.ok(response).build();
    }
}
```

To build the microservice and run the example, use the commands as described in previous sections.

Since we have not defined any configuration properties in etcd, GET http://localhost:8080/v1/config will return 
configuration properties from configuration file. We can now try and add some values in etcd. Since we enabled watch on 
the field `stringProperty`, it will be dynamically updated on any change in etcd. We can add a value to etcd with the
following command:

   ```bash
    $ docker exec etcd etcdctl --endpoints //192.168.99.100:2379 set /environments/dev/services/customer-service/1.0.0/config/rest-config/string-property test_string
   ```

Access the config endpoint again and you will get an updated value from etcd.
</pre></body></html>




File path: jsf/src/main/java/com/kumuluz/ee/samples/jsf/CustomerBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jsf;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import java.io.Serializable;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ManagedBean
@SessionScoped
public class CustomerBean implements Serializable {

    private String id;
    private String firstName;
    private String lastName;

    public CustomerBean() {
    }

    public CustomerBean(String id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void addCustomer() {
        Customer customer = new Customer();
        customer.setId(this.getId());
        customer.setFirstName(this.getFirstName());
        customer.setLastName(this.getLastName());

        Database.addCustomer(customer);

        this.setId(null);
        this.setFirstName(null);
        this.setLastName(null);
    }

    public List&lt;Customer&gt; getCustomers()
    {
        return Database.getCustomers();
    }

    @Override
    public String toString() {
        return "Customer {\n" +
                "  id='" + id + "',\n" +
                "  firstName='" + firstName + "',\n" +
                "  lastName='" + lastName + "'\n" +
                "}";
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/exceptionmappers/NotFoundExceptionMapper.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.exceptionmappers;


import com.kumuluz.ee.samples.tutorial.orders.api.v1.dtos.Error;

import javax.enterprise.context.ApplicationScoped;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

@Provider
@ApplicationScoped
public class NotFoundExceptionMapper implements ExceptionMapper&lt;NotFoundException&gt; {

    @Override
    public Response toResponse(NotFoundException e) {

        Error error = new Error();
        error.setStatus(404);
        error.setCode("resource.not.found");
        error.setMessage(e.getMessage());

        return Response
                .status(Response.Status.NOT_FOUND)
                .entity(error)
                .build();
    }
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/beans/AssistantBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.beans;

import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;
import com.kumuluz.ee.samples.graphql_advanced.entities.Assistant;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

@RequestScoped
public class AssistantBean {

    @PersistenceContext
    private EntityManager em;

    public List&lt;Assistant&gt; getAssistants(QueryParameters qp) {

        return JPAUtils.queryEntities(em, Assistant.class, qp);
    }
}
</pre></body></html>




File path: kumuluzee-feature-flags-unleash/src/main/java/com/kumuluz/ee/samples/api/RestResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.api;

import com.kumuluz.ee.feature.flags.common.utils.FeatureFlags;
import com.kumuluz.ee.feature.flags.unleash.utils.UnleashFeatureFlags;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Blaž Mrak
 * @since 1.0.0
 */
@Path("/features")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@ApplicationScoped
public class RestResource {

    @Inject
    private FeatureFlags featureFlags;

//    inject if you want to use Unleash-specific features
//    @Inject
//    private UnleashFeatureFlags featureFlags;

    @GET
    public Map&lt;String, String&gt; featureEnabled() {
        Map&lt;String, String&gt; result = new HashMap();

        if (featureFlags.isEnabled("test-feature")) {
            result.put("message", "test-feature is enabled");
        } else {
            result.put("message", "test-feature is disabled");
        }

        return result;
    }
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE GraphQL advanced sample
&gt; Unleash the full power of GraphQL extension.

This is an advanced tutorial, which demonstrates advanced extension usage. Please finish the
[basic tutorial](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-graphql-jpa-simple) first.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```


## Prerequisites
In order to run this example you will have to setup a local PostgreSQL database:
- __database host__: localhost:5432
- __database name__: faculty
- __user__: postgres
- __password__: postgres

The required tables will be created automatically upon running the sample.
You can run database inside docker:

```bash
docker run -d --name pg-graphql -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=faculty -p 5432:5432 postgres:latest
```

## Usage
The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-graphql-advanced
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environment use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* GraphQL endpoint - http://localhost:8080/graphql
* __Graph*i*QL endpoint__ - http://localhost:8080/graphiql (playground for executing queries)

To shut down the example simply stop the processes in the foreground.

## Detailed code explanation

In this section, we will cover some use cases in this example and explain how they work.

### Using pagination, sorting and filtering

The pagination, sorting and filtering are all commonly used patterns in software development, and the plumbing required
to implement these patterns is often repeated between the projects or even within the project itself. To solve this
problem the KumuluzEE GraphQL includes integration with [KumuluzEE REST](https://github.com/kumuluz/kumuluzee-rest) project.

This is demonstrated in the sample with method getStudentsConnection in StudentResolvers.class.
This method uses the Connection pattern, which wraps result list (`edges`) with the pagination metadata (`totalCount`).
You will see this pattern used in multiple places.

```java
@Query
public StudentConnection getStudentsConnection(Long limit, Long offset, String sort, String filter) {

    QueryParameters qp = GraphQLUtils.queryParametersBuilder()
        .withQueryStringDefaults(qsd)
        .withLimit(limit)
        .withOffset(offset)
        .withOrder(sort)
        .withFilter(filter)
        .build();
    
    return studentBean.getStudentConnection(qp);
}
```

There are a few things to note in this method. The first one is the method parameters (`limit`, `offset`, `sort` and `filter`).
They are translated to GraphQL query parameters and are used to construct the `QueryParameters` object. This object is
later used to query the JPA source.

The `QueryStringDefaults` object provides the defaults for the query.
Let's see the producer (defined in the `ApplicationDefaults` class):

```java
@Produces
@ApplicationScoped
public QueryStringDefaults getQueryDefaults() {
    return new QueryStringDefaults()
            .defaultOffset(0)
            .defaultLimit(20)
            .maxLimit(100);
}
```

The `StudentBean` then uses constructed `QueryParameters` to query the JPA source:

```java
public StudentConnection getStudentConnection(QueryParameters qp) {

    return new StudentConnection(JPAUtils.queryEntities(em, Student.class, qp),
            JPAUtils.queryEntitiesCount(em, Student.class, qp));
}
```

One call is needed to query the actual results and one call is needed to query the count. The method then wraps these
two values in the `Connection` object.

To demonstrate the use of this method, let's think of an use-case. Let's say we want all students whose names start
with the letter J. We want to paginate them, so we specify `offset` and `limit` and we want to sort them by
`studentNumber`. In the `filter` parameter we specify our condition, which should be self-explanatory if you used SQL
before. The final query looks like this:

```graphql
query StudentsStartingWithJ {
  studentsConnection(
    offset: "0"
    limit: "10"
    sort: "studentNumber"
    filter: "name:LIKE:J%"
  ) {
    totalCount
    edges {
      studentNumber
      name
      surname
    }
  }
}
```

And the result:

```json
{
  "data": {
    "studentsConnection": {
      "totalCount": 2,
      "edges": [
        {
          "studentNumber": 63170000,
          "name": "James",
          "surname": "Smith"
        },
        {
          "studentNumber": 63170001,
          "name": "John",
          "surname": "Johnson"
        }
      ]
    }
  }
}
```

### Defining queries on types

Another powerful feature of GraphQL is defining queries directly on types. For example a student can have multiple
subjects and the `student -&gt; subject` mapping may not be defined in the same datasource as the students. In our example
they are defined in-memory for simplicity’s sake but in real world, they could be stored in an external cache or
retrieved through external service.

Let's define the query:

```java
@Name("subjects")
public List&lt;Subject&gt; getStudentSubjects(@Source Student student, String sort) {

    QueryParameters qp = GraphQLUtils.queryParametersBuilder()
            .withQueryStringDefaults(qsd)
            .withOrder(sort)
            .build();

    List&lt;Subject&gt; subjectList = subjectBean.getSubjects(student.getStudentNumber());
    return StreamUtils.queryEntities(subjectList, qp);
}
```

Notice the `@Source` annotation, which marks the type we are defining the query on - in our case `Student`. We will also
enable sorting for this query and since the subjects are defined in-memory, we will use `StreamUtils` instead of
`JPAUtils`.

And how do we use this? Let's extend the query above and ask for student's subjects, ordered by their name descending.
The query:

```graphql
query StudentsStartingWithJ {
  studentsConnection(
    offset: "0"
    limit: "10"
    sort: "studentNumber"
    filter: "name:LIKE:J%"
  ) {
    totalCount
    edges {
      studentNumber
      name
      surname
      subjects(sort: "name DESC") {
        id
        name
      }
    }
  }
}
```

And the result:

```json
{
  "data": {
    "studentsConnection": {
      "totalCount": 2,
      "edges": [
        {
          "studentNumber": 63170000,
          "name": "James",
          "surname": "Smith",
          "subjects": [
            {
              "id": 1,
              "name": "Programming in Java"
            },
            {
              "id": 0,
              "name": "Maths"
            }
          ]
        },
        {
          "studentNumber": 63170001,
          "name": "John",
          "surname": "Johnson",
          "subjects": [
            {
              "id": 2,
              "name": "Programming in Python"
            }
          ]
        }
      ]
    }
  }
}
```

To see the real benefit of defining queries on types instead of root let's look at another query which returns the
`Student` type:

```graphql
query StudentById {
  studentById(id: 1) {
    name
    subjects {
      id
      name
    }
  }
}
```

As you can see we can also retrieve student's subjects through this query.

### Mutating the data

Mutations are also a key part of using APIs (REST equivalents of PUT/POST/DELETE requests).
Let's check out an example:

```java
@Mutation
public Student createStudent(@NonNull Student student) {
    return studentBean.createStudent(student);
}
```
The following Java code will produce a mutation with input type StudentInput (output types can't be used as inputs in graphql).
StudentInput type will contain the same fields as the output, but you can ignore fields.
The field becomes ignored in input, if you put an @Ignore annotation on a setter.
In our example, we don't want to allow adding enrolled date directly when creating a student, because we will set
enrolled date manually.

```java
public class Student extends Person {
    
    // ...
    @Ignore
    public void setEnrolled(LocalDate enrolled) {
        this.enrolled = enrolled;
    }
    
}
```

To use the mutation use the following query:

```graphql
mutation CreateStudent {
  createStudent(
    student: {name: "Mike", surname: "Grady", studentNumber: 63170003}
  ) {
    enrolled
    studentNumber
    name
    surname
  }
}

```

These mutations will produce the following result:

```json
{
  "data": {
    "createStudent": {
      "name": "Mike",
      "surname": "Grady",
      "studentNumber": 63170003,
      "enrolled": "2021-02-09"
    }
  }
}
```

## Conclusion

To explore this sample further use the Graph*i*QL served on http://localhost:8080/graphiql and use the __Explorer__ tab
and the __Docs__ tab to try out the remaining queries.
</pre></body></html>




File path: kumuluzee-jcache/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="customers"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;!-- Default logger --&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: kumuluzee-config-mp/src/main/java/com/kumuluz/ee/samples/configsources/ExampleConfigSourceProvider.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.configsources;

import org.eclipse.microprofile.config.spi.ConfigSource;
import org.eclipse.microprofile.config.spi.ConfigSourceProvider;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * @author Urban Malc
 * @author Jan Meznarič
 * @since 2.5.0
 */
public class ExampleConfigSourceProvider implements ConfigSourceProvider {

    @Override
    public Iterable&lt;ConfigSource&gt; getConfigSources(ClassLoader classLoader) {

        List&lt;ConfigSource&gt; configSources = new LinkedList&lt;&gt;();

        for (int i = 150; i &lt; 160; i++) {
            int finalI = i;
            configSources.add(new ConfigSource() {
                @Override
                public Map&lt;String, String&gt; getProperties() {
                    return null;
                }

                @Override
                public String getValue(String s) {
                    if ("mp.custom-source-ordinal".equals(s)) {
                        return "Hello from custom ConfigSource, generated from ConfigSourceProvider." +
                                " Ordinal: " + finalI;
                    }

                    return null;
                }

                @Override
                public String getName() {
                    return "ExampleConfigSourceFromProvider_" + finalI;
                }

                @Override
                public int getOrdinal() {
                    return finalI;
                }
            });
        }

        return configSources;
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/generated/java/com/kumuluz/ee/samples/kafka/registry/avro/lib/Pricing.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kumuluz.ee.samples.kafka.registry.avro.lib;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Pricing extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8159164123532769464L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pricing\",\"namespace\":\"com.kumuluz.ee.samples.kafka.registry.avro.lib\",\"fields\":[{\"name\":\"price\",\"type\":\"string\"},{\"name\":\"priceExTax\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"string\"},{\"name\":\"taxAmount\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder&lt;Pricing&gt; ENCODER =
      new BinaryMessageEncoder&lt;Pricing&gt;(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder&lt;Pricing&gt; DECODER =
      new BinaryMessageDecoder&lt;Pricing&gt;(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder&lt;Pricing&gt; getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder&lt;Pricing&gt; getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder&lt;Pricing&gt; createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder&lt;Pricing&gt;(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Pricing to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Pricing from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Pricing instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Pricing fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence price;
  @Deprecated public java.lang.CharSequence priceExTax;
  @Deprecated public java.lang.CharSequence basePrice;
  @Deprecated public java.lang.CharSequence taxAmount;
  @Deprecated public java.lang.CharSequence description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use &lt;code&gt;newBuilder()&lt;/code&gt;.
   */
  public Pricing() {}

  /**
   * All-args constructor.
   * @param price The new value for price
   * @param priceExTax The new value for priceExTax
   * @param basePrice The new value for basePrice
   * @param taxAmount The new value for taxAmount
   * @param description The new value for description
   */
  public Pricing(java.lang.CharSequence price, java.lang.CharSequence priceExTax, java.lang.CharSequence basePrice, java.lang.CharSequence taxAmount, java.lang.CharSequence description) {
    this.price = price;
    this.priceExTax = priceExTax;
    this.basePrice = basePrice;
    this.taxAmount = taxAmount;
    this.description = description;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return price;
    case 1: return priceExTax;
    case 2: return basePrice;
    case 3: return taxAmount;
    case 4: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: price = (java.lang.CharSequence)value$; break;
    case 1: priceExTax = (java.lang.CharSequence)value$; break;
    case 2: basePrice = (java.lang.CharSequence)value$; break;
    case 3: taxAmount = (java.lang.CharSequence)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.CharSequence getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.CharSequence value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'priceExTax' field.
   * @return The value of the 'priceExTax' field.
   */
  public java.lang.CharSequence getPriceExTax() {
    return priceExTax;
  }


  /**
   * Sets the value of the 'priceExTax' field.
   * @param value the value to set.
   */
  public void setPriceExTax(java.lang.CharSequence value) {
    this.priceExTax = value;
  }

  /**
   * Gets the value of the 'basePrice' field.
   * @return The value of the 'basePrice' field.
   */
  public java.lang.CharSequence getBasePrice() {
    return basePrice;
  }


  /**
   * Sets the value of the 'basePrice' field.
   * @param value the value to set.
   */
  public void setBasePrice(java.lang.CharSequence value) {
    this.basePrice = value;
  }

  /**
   * Gets the value of the 'taxAmount' field.
   * @return The value of the 'taxAmount' field.
   */
  public java.lang.CharSequence getTaxAmount() {
    return taxAmount;
  }


  /**
   * Sets the value of the 'taxAmount' field.
   * @param value the value to set.
   */
  public void setTaxAmount(java.lang.CharSequence value) {
    this.taxAmount = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Creates a new Pricing RecordBuilder.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder() {
    return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
  }

  /**
   * Creates a new Pricing RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder(other);
    }
  }

  /**
   * Creates a new Pricing RecordBuilder by copying an existing Pricing instance.
   * @param other The existing instance to copy.
   * @return A new Pricing RecordBuilder
   */
  public static com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder newBuilder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing other) {
    if (other == null) {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder();
    } else {
      return new com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder(other);
    }
  }

  /**
   * RecordBuilder for Pricing instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase&lt;Pricing&gt;
    implements org.apache.avro.data.RecordBuilder&lt;Pricing&gt; {

    private java.lang.CharSequence price;
    private java.lang.CharSequence priceExTax;
    private java.lang.CharSequence basePrice;
    private java.lang.CharSequence taxAmount;
    private java.lang.CharSequence description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.priceExTax)) {
        this.priceExTax = data().deepCopy(fields()[1].schema(), other.priceExTax);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[2].schema(), other.basePrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.taxAmount)) {
        this.taxAmount = data().deepCopy(fields()[3].schema(), other.taxAmount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Pricing instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priceExTax)) {
        this.priceExTax = data().deepCopy(fields()[1].schema(), other.priceExTax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[2].schema(), other.basePrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.taxAmount)) {
        this.taxAmount = data().deepCopy(fields()[3].schema(), other.taxAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setPrice(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearPrice() {
      price = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'priceExTax' field.
      * @return The value.
      */
    public java.lang.CharSequence getPriceExTax() {
      return priceExTax;
    }


    /**
      * Sets the value of the 'priceExTax' field.
      * @param value The value of 'priceExTax'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setPriceExTax(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.priceExTax = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'priceExTax' field has been set.
      * @return True if the 'priceExTax' field has been set, false otherwise.
      */
    public boolean hasPriceExTax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'priceExTax' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearPriceExTax() {
      priceExTax = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'basePrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getBasePrice() {
      return basePrice;
    }


    /**
      * Sets the value of the 'basePrice' field.
      * @param value The value of 'basePrice'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setBasePrice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.basePrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'basePrice' field has been set.
      * @return True if the 'basePrice' field has been set, false otherwise.
      */
    public boolean hasBasePrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'basePrice' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearBasePrice() {
      basePrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxAmount() {
      return taxAmount;
    }


    /**
      * Sets the value of the 'taxAmount' field.
      * @param value The value of 'taxAmount'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setTaxAmount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.taxAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'taxAmount' field has been set.
      * @return True if the 'taxAmount' field has been set, false otherwise.
      */
    public boolean hasTaxAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'taxAmount' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearTaxAmount() {
      taxAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pricing build() {
      try {
        Pricing record = new Pricing();
        record.price = fieldSetFlags()[0] ? this.price : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.priceExTax = fieldSetFlags()[1] ? this.priceExTax : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.basePrice = fieldSetFlags()[2] ? this.basePrice : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.taxAmount = fieldSetFlags()[3] ? this.taxAmount : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter&lt;Pricing&gt;
    WRITER$ = (org.apache.avro.io.DatumWriter&lt;Pricing&gt;)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader&lt;Pricing&gt;
    READER$ = (org.apache.avro.io.DatumReader&lt;Pricing&gt;)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.price);

    out.writeString(this.priceExTax);

    out.writeString(this.basePrice);

    out.writeString(this.taxAmount);

    out.writeString(this.description);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);

      this.priceExTax = in.readString(this.priceExTax instanceof Utf8 ? (Utf8)this.priceExTax : null);

      this.basePrice = in.readString(this.basePrice instanceof Utf8 ? (Utf8)this.basePrice : null);

      this.taxAmount = in.readString(this.taxAmount instanceof Utf8 ? (Utf8)this.taxAmount : null);

      this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);

    } else {
      for (int i = 0; i &lt; 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);
          break;

        case 1:
          this.priceExTax = in.readString(this.priceExTax instanceof Utf8 ? (Utf8)this.priceExTax : null);
          break;

        case 2:
          this.basePrice = in.readString(this.basePrice instanceof Utf8 ? (Utf8)this.basePrice : null);
          break;

        case 3:
          this.taxAmount = in.readString(this.taxAmount instanceof Utf8 ? (Utf8)this.taxAmount : null);
          break;

        case 4:
          this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










</pre></body></html>




File path: kumuluzee-opentracing-tutorial/diagram.png
<html style="height: 100%;"><head><meta name="viewport" content="width=device-width, minimum-scale=0.1"><title>diagram.png (441×141)</title></head><body style="margin: 0px; background: #0e0e0e; height: 100%"><img style="display: block;-webkit-user-select: none;margin: auto;background-color: hsl(0, 0%, 90%);transition: background-color 300ms;" src="https://raw.githubusercontent.com/kumuluz/kumuluzee-samples/master/kumuluzee-opentracing-tutorial/diagram.png"></body></html>




File path: kumuluzee-config-zookeeper/src/main/resources/META-INF/services/com.kumuluz.ee.configuration.ConfigurationDecoder
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">com.kumuluz.ee.samples.kumuluz_config_etcd.CustomConfigurationDecoder</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8078
  streaming:
    kafka:
      streams-avro:
        bootstrap-servers: localhost:29092
        application-id: sample-price-sum
        default-key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default-value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        commit-interval-ms: 500
        schema-registry-url: http://localhost:8081
        specific-avro-reader: true
        auto-register-schemas: false</pre></body></html>




File path: kumuluzee-feature-flags-unleash/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">
# KumuluzEE Feature Flags sample with Unleash

The objective of this sample is to show how to use feature flags in KumuluzEE. You will add KumuluzEE dependencies into pom.xml. You will create configuration and check if the flags are enabled using Unleash client.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
3. Unleash:
    * run Unleash with docker, you can find a guide [here](https://github.com/Unleash/unleash-docker)

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-feature-flags-unleash
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource page - http://localhost:8080/v1/features

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to connect to a feature flag server and use it's flags. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) to test if the flags are enabled or disabled. Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Ensure access to Unleash server
* Add Maven dependencies
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in the `pom.xml`.

Add the `feature-flags-unleash` dependency:
```xml
&lt;dependency&gt;  
 &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;  
 &lt;artifactId&gt;feature-flags-unleash&lt;/artifactId&gt;  
 &lt;version&gt;${feature-flags-unleash.version}&lt;/version&gt;  
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Configure Unleash connection

In the directory `resources` edit the file `config.yaml` by adding the following RabbitMQ properties:

```yaml
kumuluzee:
  name: feature-flags-sample-service
  version: 1.0.0
  env:
    name: dev
  feature-flags:
    unleash:
      unleash-api: "http://localhost:4242/api"
```

Optionally, you can create UnleashConfig object in a class annotated with `@FFConnection`

```java
@FFConnection  
@ApplicationScoped  
public class UnleashConnection {  
    UnleashConfig config = UnleashConfig  
            .builder()  
            .unleashAPI("http://localhost:4242/api")  
            .appName("feature-flags-sample-service")  
            .build();  
}
```

### Creating a flag

Access the admin UI on http://localhost:4242 and create a new flag. Name it "test-feature" (or whatever you want, but don't forget to correct the flag name in the code after).

### Using feature flags

You can check if feature flags are enabled by using FeatureFlags object in the same way as you would use Unleash client object.

```java
@Inject
private FeatureFlags featureFlags;

if(featureFlags.isEnabled("test-feature"){
    //do something
} else {
    //do something else
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-business-logic/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-customers&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;customers-business-logic&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-fault-tolerance-hystrix&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpasyncclient&lt;/artifactId&gt;
            &lt;version&gt;4.1.2&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
            &lt;artifactId&gt;customers-persistence&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/resources/schemas/avro/pricing-avro-value.avsc
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{"type":"record","name":"Pricing","namespace":"com.kumuluz.ee.samples.kafka.registry.avro.lib","fields":[{"name":"price","type":"string"},{"name":"priceExTax","type":"string"},{"name":"basePrice","type":"string"},{"name":"taxAmount","type":"string"},{"name":"description","type":"string"}]}</pre></body></html>




File path: kumuluzee-config/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Config sample for built-in configuration sources

&gt; Build a REST service which utilizes a build-in configuration framework to access environmental variables and 
configuration files and pack it as a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses a built-in configuration framework to
access environmental variables and configuration files. In this sample we develop a simple REST service that returns
a list of configuration properties from configuration file and pack it as KumuluzEE microservice. This tutorial will 
guide you through all the necessary steps. You will first add KumuluzEE dependencies into pom.xml. To develop the REST 
service, you will use the standard JAX-RS 2 API. Required knowledge: basic familiarity with JAX-RS 2 and basic concepts 
of REST, JSON and yaml.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-config
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/config

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple REST service that exposes configuration 
properties retrieved with a built-in configuration framework and pack it as a KumuluzEE microservice. We will develop a 
simple REST service with just one resource:
* GET http://localhost:8080/v1/config - list of all configuration properties from configuration file 

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS and CDI)
* Define our configuration properties in configuration file
* Implement the service using standard JAX-RS 2
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey` and `kumuluzee-cdi-weld` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Alternatively, we could add the `kumuluzee-microProfile-1.0`, which adds the MicroProfile 1.0 dependencies (JAX-RS, CDI,
JSON-P, and Servlet).

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Define your configuration properties in a `config.yaml` configuration file:

```yaml
rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
```

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example 
with the `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class ConfigApplication extends Application {
}
```

Implement an application scoped CDI bean that will automatically load and hold our configuration properties. It shall
be annotated with `@ConfigBundle` annotation whose value represents the prefix for the configuration properties keys.
 
```java
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    private String stringProperty;
    private Boolean booleanProperty;
    private Integer integerProperty;
    
    // TODO: implement get and set methods
}
```

Implement a JAX-RS resource that will expose retrieved configuration properties on GET request:

```java
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                    "\"stringProperty\": \"%s\"," +
                    "\"booleanProperty\": %b," +
                    "\"integerProperty\": %d" +
                "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty()
        );

        return Response.ok(response).build();
    }
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: microservices-simple/orders/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-ethereum-web3j/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-ethereum-sample&lt;/artifactId&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.ethereum&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-ethereum-web3j&lt;/artifactId&gt;
            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.web3j&lt;/groupId&gt;
                &lt;artifactId&gt;web3j-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.3.7&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;soliditySourceFiles/&gt;
                    &lt;packageName&gt;contracts&lt;/packageName&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-logs-log4j2/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/resources/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"&gt;

&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-grpc/grpc-server/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM isuper/java-oracle

COPY target /usr/src/myapp

WORKDIR /usr/src/myapp

EXPOSE 8443

CMD ["java", "-jar", "grpc-server-1.0-SNAPSHOT.jar"]</pre></body></html>




File path: kumuluzee-opentracing-tutorial/beta/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/beta/Application.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.beta;

import javax.ws.rs.ApplicationPath;

@ApplicationPath("v1")
public class Application extends javax.ws.rs.core.Application {
}
</pre></body></html>




File path: jpa/src/main/java/com/kumuluz/ee/samples/jpa/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jpa;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-fault-tolerance/common/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/models/Order.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.models;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
public class Order {

    private String id;
    private String name;
    private double price;
    private String paymentType;
    private String customerId;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getPaymentType() {
        return paymentType;
    }

    public void setPaymentType(String paymentType) {
        this.paymentType = paymentType;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/producers/JacksonProducer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.producers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Provider;
import java.text.SimpleDateFormat;
import java.util.TimeZone;

@Provider
public class JacksonProducer implements ContextResolver&lt;ObjectMapper&gt; {

    private final ObjectMapper mapper;

    public JacksonProducer() {

        mapper = new ObjectMapper();

        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        mapper.setDateFormat(dateFormat);
    }

    @Override
    public ObjectMapper getContext(Class&lt;?&gt; aClass) {
        return mapper;
    }
}
</pre></body></html>




File path: kumuluzee-logs-log4j2/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Logs sample with Log4j2 implementation

&gt; Build a REST service which utilizes a built-in logging framework with Log4j2 implementation to log basic metrics and pack it as a KumuluzEE microservice

The objective of this sample is to demonstrate how to use the built-in logging framework with Log4j2 implementation to log basic metrics.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-logs-log4j2
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to use KumuluzEE Logs and pack the application as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Add Maven dependencies
* Add KumuluzEE Logs support
* Add log4j2 logging configuration
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in `pom.xml`.

Add the `kumuluzee-cdi-weld` and `kumuluzee-logs-log4j2` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
    &lt;version&gt;${kumuluz-logs.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Add KumuluzEE Logs support

Enhance `CustomerResource` class by adding KumuluzEE Logs annotations:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Log(LogParams.METRICS)
public class CustomerResource {

    ...

    @POST
    @Log(value = LogParams.METRICS, methodCall = false)
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }
}
```

### Add log4j2 logging configuration

The default Log4j2 configuration can be overridden by providing custom configuration file.

In this sample in directory `resources` create file `log4j2.xml`:

```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="customers"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;!-- Resources (REST) --&gt;
        &lt;Logger name="com.kumuluz.ee.samples.kumuluzee_logs.CustomerResource" level="trace" additivity="false"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Logger&gt;

        &lt;!-- Default logger --&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: vertx-bridge
  version: 1.0.0
  env:
    name: dev
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
  discovery:
    etcd:
      hosts: http://localhost:2379
    ttl: 20
    ping-interval: 15
  reactive:
    vertx:
      clustered: true
      cluster-host: localhost
      cluster-port: 0
      discovery:
        env:
          name: dev
        ttl: 20
        ping-interval: 15</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/resources/META-INF/handler-chains.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;handler-chains xmlns="http://java.sun.com/xml/ns/javaee"&gt;
    &lt;handler-chain&gt;
        &lt;handler&gt;
            &lt;handler-class&gt;com.kumuluz.ee.samples.jaxws.cxf.interceptors.WsHandler&lt;/handler-class&gt;
        &lt;/handler&gt;
    &lt;/handler-chain&gt;
&lt;/handler-chains&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Reactive &amp;mdash; Vert.x discovery bridge

&gt; Develop a REST microservice that acts as a bridge between KumuluzEE Discovery and Vert.x Service Discovery

The objective of this sample is to show how to create a discovery bridge using KumuluzEE Reactive extension.
The tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into `pom.xml`.
Required knowledge: basic familiarity with Vert.x.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need either an etcd or a Consul instance. We will use an etcd instance in this example.

### etcd

Note that such setup with only one etcd node is not viable for 
production environments, but only for developing purposes. Here is an example on how to quickly run an etcd instance 
with docker:

   ```bash
    $ docker run -d -p 2379:2379 \
      --name etcd \
      --volume=/tmp/etcd-data:/etcd-data \
      quay.io/coreos/etcd:latest \
      /usr/local/bin/etcd \
      --name my-etcd-1 \
      --data-dir /etcd-data \
      --listen-client-urls http://0.0.0.0:2379 \
      --advertise-client-urls http://0.0.0.0:2379 \
      --listen-peer-urls http://0.0.0.0:2380 \
      --initial-advertise-peer-urls http://0.0.0.0:2380 \
      --initial-cluster my-etcd-1=http://0.0.0.0:2380 \
      --initial-cluster-token my-etcd-token \
      --initial-cluster-state new \
      --auto-compaction-retention 1 \
      -cors="*"
   ```
   
### Consul

Note that such setup with only one node is not viable for 
production environments, but only for developing purposes. Download Consul and run it in development mode with the 
following command:

   ```bash
    $ consul agent -dev
   ```

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener
    $ mvn clean package
    ```

2. Run the sample:

    * Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/vertx/status

You can register a service to Consul using:
* [discovery-consul-register sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-register)

You can register a service to etcd using:
* [discovery-etcd-register sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-register)

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to setup a bridge between KumuluzEE Discovery and Vert.x Service Discovery.
* GET http://localhost:8080/v1/vertx/status - status of the service

We will follow these steps:
* Import a Maven sample, mentioned above, in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependency to KumuluzEE Reactive extension
* Add Maven dependency to KumuluzEE Discovery (etcd or Consul)
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey` and `kumuluzee-cdi-weld` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```
Alternatively, we could add the `kumuluzee-microProfile-1.0`, which adds the MicroProfile 1.0 dependencies (JAX-RS, CDI, JSON-P, and Servlet).

Add the `kumuluzee-reactive-vertx` dependency:
```xml
&lt;dependency&gt;
	&lt;groupId&gt;com.kumuluz.ee.reactive&lt;/groupId&gt;
	&lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
	&lt;version&gt;${kumuluzee-reactive-vertx.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the either `kumuluzee-discovery-etcd` or `kumuluzee-discovery-consul`.
We will use etcd in this example.
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
&lt;/dependency&gt;
```
or
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example with `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class VertxApplication extends Application {
}
```

Implement JAX-RS resource, with a GET method to obtain service status.

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("vertx")
@RequestScoped
public class VertxResource {
	
	@GET
	@Path("/status")
	public Response getStatus() {
		return Response.ok().build();
	}
	
}
```

### Add configuration for Vert.x

You can configure Vert.x using any KumuluzEE configuration source.

For example, you can use `config.yml` file, placed in resources folder.
In this example we configured `config.yml` to use etcd as shown below:

```yaml
kumuluzee:
  name: vertx-bridge
  version: 1.0.0
  env:
    name: dev
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
  discovery:
    etcd:
      hosts: http://localhost:2379
    ttl: 20
    ping-interval: 15
  reactive:
    vertx:
      clustered: true
      cluster-host: localhost
      cluster-port: 0
      discovery:
        env:
          name: dev
        ttl: 20
        ping-interval: 15    
```

Setting the `clustered` tag to `true` allows multiple Vert.x instances to form a single, distributed, event bus, thus
enabling the service to discover other Vert.x services. When no tags are provided within `reactive.vertx.discovery`
they are taken from `kumuluzee.discovery`.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

For registering a Vert.x service and getting a reference to a service registered with KumuluzEE Discovery you can use
[`verticle-discovery`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/simple-verticles/verticle-discovery).</pre></body></html>




File path: jsf/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
--&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;

    &lt;display-name&gt;KumuluzEE JSF sample&lt;/display-name&gt;

    &lt;!-- Welcome page --&gt;
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;welcome.xhtml&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;

    &lt;!-- JSF mapping --&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;javax.faces.webapp.FacesServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;!-- Map these files with JSF --&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.jsf&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.faces&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.xhtml&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;com.sun.faces.config.ConfigureListener&lt;/listener-class&gt;
    &lt;/listener&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-rest/src/main/java/com/kumuluz/ee/samples/rest/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.rest;

import javax.persistence.*;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Entity
@Table(name = "customer")
@NamedQueries({
        @NamedQuery(
                name = "Customer.findCustomers",
                query = "SELECT c " +
                        "FROM Customer c"
        )
})
public class Customer implements Serializable {

    @Id
    private String id;
    @Column(name = "first_name")
    private String firstName;
    @Column(name = "last_name")
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: microservices-simple/catalogue/src/main/java/com/kumuluz/ee/samples/microservices/simple/BooksResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.microservices.simple;

import com.kumuluz.ee.samples.microservices.simple.models.Book;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Tilen Faganel
 * @since 2.3.0
 */
@Path("/books")
@RequestScoped
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class BooksResource {

    @PersistenceContext
    private EntityManager em;

    /**
     * &lt;p&gt;Queries the database and returns a list of all books.&lt;/p&gt;
     *
     * @return Response object containing the retrieved list of books from the database.
     */
    @GET
    public Response getBooks() {

        TypedQuery&lt;Book&gt; query = em.createNamedQuery("Book.findAll", Book.class);

        List&lt;Book&gt; books = query.getResultList();

        return Response.ok(books).build();
    }

    /**
     * &lt;p&gt;Queries the database and returns a specific book based on the given id.&lt;/p&gt;
     *
     * @param id The id of the wanted book.
     * @return Response object containing the requested book, or empty with the NOT_FOUND status.
     */
    @GET
    @Path("/{id}")
    public Response getBook(@PathParam("id") Integer id) {

        Book b = em.find(Book.class, id);

        if (b == null)
            return Response.status(Response.Status.NOT_FOUND).build();

        return Response.ok(b).build();
    }

    /**
     * &lt;p&gt;Inserts the provided book into the database.&lt;/p&gt;
     *
     * @param b The book object which will be created.
     * @return Response object containing the created book.
     */
    @POST
    public Response createBook(Book b) {

        b.setId(null);

        em.getTransaction().begin();

        em.persist(b);

        em.getTransaction().commit();

        return Response.status(Response.Status.CREATED).entity(b).build();
    }
}
</pre></body></html>




File path: kumuluzee-grpc/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE gRPC

&gt; Samples for KumuluzEE gRPC extension

This module contains two samples that will introduce you to KumuluzEE gRPC extension:
- [grpc-server](grpc-server) gRPC server microservice
- [grpc-client](grpc-client) gRPC client microservice

More information about the samples can be found in the README of each sample.</pre></body></html>




File path: kumuluzee-opentracing-tutorial/gamma/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE ETCD Discovery samples&lt;/name&gt;
    &lt;description&gt;Samples for service discovery with KumuluzEE&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;discovery-etcd-register&lt;/module&gt;
        &lt;module&gt;discovery-etcd-discover-servlet&lt;/module&gt;
        &lt;module&gt;discovery-etcd-discover-jaxrs&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;kumuluzee-discovery.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-discovery.version&gt;
    &lt;/properties&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/Lecturer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities;

import com.kumuluz.ee.samples.graphql_advanced.enums.LecturerStatus;

import javax.persistence.*;

@Entity
@NamedQueries(
        @NamedQuery(name="getAllLecturers", query = "SELECT l FROM Lecturer l")
)
public class Lecturer extends Person {

    @Column
    private String location;
    @Column
    private LecturerStatus status;
    @ManyToOne
    private Assistant assistant;

    public Lecturer() {
    }

    public String getLocation() {
        return location;
    }

    public LecturerStatus getStatus() {
        return status;
    }

    public Assistant getAssistant() {
        return assistant;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public void setStatus(LecturerStatus status) {
        this.status = status;
    }

    public void setAssistant(Assistant assistant) {
        this.assistant = assistant;
    }
}
</pre></body></html>




File path: kumuluzee-fault-tolerance/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Fault Tolerance sample 

&gt; Build a REST service which utilizes KumuluzEE Fault Tolerance to provide fault tolerance and latency tolerance to 
your code using the fault tolerance patterns in a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses KumuluzEE Fault Tolerance extension to
provide fault tolerance and latency tolerance. In this sample we will develop two simple REST services using microservice 
pattern. One microservice will be dependent on the other and will produce HTTP calls to second one using fault tolerant
patterns. We will demonstrate how to configure KumuluzEE Fault Tolerance using KumuluzEE config extension. 
Optionally you can use etcd configuration server for KumuluzEE Fault Tolerance configuration. This tutorial 
will guide you through all the necessary steps. To develop the REST services, we will use the standard JAX-RS 2 API. Required knowledge: 
basic familiarity with JAX-RS 2, fault tolerance patterns (circuit breaker, bulkhead, timeout, fallback) and basic 
concepts of REST. Optional knowledge: basic knowledge of KumuluzEE Config and KumuluzEE Metrics.

This sample contains two modules, each representing one microservice - customers and orders REST service. Customer can 
have multiple orders and therefore customer service uses orders service to get customer's orders. The third module represents
common library which contains models for customer and order with simple database simulation.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Usage 

The example uses Maven to build and run the microservices.

1. Build the sample using Maven:

    ```bash
    $ cd kumuluzee-fault-tolerance
    $ mvn clean package
    ```

2. Run the sample customer-api:

- Uber-jar:

    ```bash
    $ java -jar customer-api/target/${project.build.finalName}.jar
    ```

    in Windows environment use the command
    ```
    java -jar customer-api/target/${project.build.finalName}.jar
    ```

- Exploded:

    ```bash
    $ java -cp customer-api/target/classes:customer-api/target/dependency/* com.kumuluz.ee.EeApplication
    ```

    in Windows environment use the command
    ```
    java -cp customer-api/target/classes;customer-api/target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
2. Run the sample order-api in separate terminal:

- Uber-jar:

    ```bash
    $ java -jar order-api/target/${project.build.finalName}.jar
    ```

    in Windows environment use the command
    ```
    java -jar order-api/target/${project.build.finalName}.jar
    ```

- Exploded:

    ```bash
    $ java -cp order-api/target/classes:order-api/target/dependency/* com.kumuluz.ee.EeApplication
    ```

    in Windows environment use the command
    ```
    java -cp order-api/target/classes;order-api/target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The microservices can be accessed on the following URLs:
* JAX-RS REST resource for customers - http://localhost:8080/v1/customers
* JAX-RS REST resource for orders - http://localhost:8081/v1/orders

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to execute HTTP call to a remote REST microservice with 
fault tolerance patterns using a KumuluzEE Fault Tolerance. REST services will be based on existing 
 [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs). 

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs)
* Create a maven project with three submodules and add dependency management
* Create and implement common module with models and simple database simulation
* Create a REST microservice for orders
* Create a REST microservice for customers
* Add HTTP client dependency and HTTP client implementation
* Wrap HTTP call with fault tolerance patterns
* Test fault tolerance patterns and configurations
* Check out the fault tolerance metrics

### Create a maven project

Create a maven project with three submodules - common, order-api and customer-api. Add KumuluzEE BOM to root `pom.xml`:

```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-fault-tolerance-common&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-fault-tolerance-smallrye&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-fault-tolerance.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;
        
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
            &lt;version&gt;${httpclient.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
            &lt;version&gt;${jackson.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

We have already defined dependencies for Apache HttpComponents and Jackson Databind which we will be needing later on.

### Create and implement a common module

In common module we will add both models for orders and customers. `Customer` is a simple POJO Java class and is similar to one in KumuluzEE 
JAX-RS REST sample. We only added list for customer's orders:

```java
public class Customer {

    private String id;
    
    private String firstName;
    
    private String lastName;
    
    private List&lt;Order&gt; orders;
    
    // TODO: implement get and set methods
}
```

In the same way, implement the `Order` Java class:

```java
public class Order {

    private String id;
    
    private double price;
    
    private String paymentType;
    
    private String address;
    
    private String customerId;
    
    // TODO: implement get and set methods
}
```

Implementation of `Database` class for simple database simulation is also very similar to one in KumuluzEE JAX-RS 
REST sample. We added methods and list for `Order` model:

```java
public class Database {

    private static List&lt;Order&gt; orders = new ArrayList&lt;&gt;();

    public static void addOrder(String customerId) {

        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }

    public static Order getOrder(String orderId) {

        for (Order order : orders) {
            if (order.getId().equals(orderId))
                return order;
        }

        return null;
    }

    public static void addOrder(Order order) {
        orders.add(order);
    }

    public static void deleteOrder(String orderId) {

        for (Order order : orders) {
            if (order.getId().equals(orderId)) {
                orders.remove(order);
                break;
            }
        }
    }

    public static List&lt;Order&gt; findOrdersByCustomer(String customerId) {

        return orders.stream()
                .filter(o -&gt; o.getCustomerId().equals(customerId))
                .collect(Collectors.toList());
    }
    
    // List and methods for customers from KumuluzEE JAX-RS REST sample
}

```

### Create a REST microservice for orders

We will now create REST service for orders. Create a order-api module add the following dependencies to `pom.xml`:

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-fault-tolerance-common&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `Application` JAX-RS class, similar to one for customers in KumuluzEE JAX-RS REST sample. Implement the
resource class for orders API, which is also very similar to one for customers in KumuluzEE JAX-RS REST sample.
We will only modify the method for getting all orders in order to be also able to filter orders by customer's id:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("orders")
public class OrderResource {

    @GET
    @PermitAll
    public Response getAllOrders(@QueryParam("customerId") String customerId) {

        List&lt;Order&gt; orders = customerId == null ?
                Database.getOrders() :
                Database.findOrdersByCustomer(customerId);

        return Response.ok(orders).build();
    }

    @GET
    @Path("{orderId}")
    public Response getOrder(@PathParam("orderId") String orderId) {

        Order order = Database.getOrder(orderId);

        return order != null
                ? Response.ok(order).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addOrder(Order order) {

        Database.addOrder(order);

        return Response.noContent().build();
    }

    @DELETE
    @Path("{orderId}")
    public Response removeOrder(@PathParam("orderId") String orderId) {

        Database.deleteOrder(orderId);

        return Response.noContent().build();
    }
}

```

Orders service is now set up. If you run the order-api KumuluzEE application, you should already be able to manage orders
through REST.

### Create a REST microservice for customers

A REST microservice for customers can be copied from KumuluzEE JAX-RS REST sample. We will have to modify the 
`pom.xml` in order to be able to use CDI:

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-fault-tolerance-common&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-fault-tolerance-smallrye&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

We have already added dependencies for KumuluzEE Fault Tolerance extension. The KumuluzEE Config MP dependency is
required in order for KumuluzEE Faule Tolerance to work correctly.

### Add HTTP client dependency and HTTP client implementation

In order to be able to call remote order REST service, we need to implement HTTP client. We will use 
[Apache HttpComponents](https://hc.apache.org) library. We also need a library to be able to parse JSON response to object. The 
easiest way to do so is with the [Jackson Databind](https://github.com/FasterXML/jackson-databind) library. 
Add the following dependencies to customer-api `pom.xml`: 

```xml
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
&lt;/dependency&gt;
```

For executing HTTP calls with Apache HttpComponents library, we should first implement a `@Producer` for creating a pool
 of HTTP clients:
 
```java
public class HttpClientProducer {

    private static final int DEFAULT_POOL_MAX_CONNECTIONS = 5;

    @Produces
    @ApplicationScoped
    public HttpClient httpClient() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {

        SSLContext sslContext = SSLContexts.custom()
                .loadTrustMaterial(null, (certificate, authType) -&gt; true)
                .build();

        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);
        Registry socketFactorRegistry = RegistryBuilder.create()
                .register("http", PlainConnectionSocketFactory.getSocketFactory())
                .register("https", socketFactory)
                .build();

        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(socketFactorRegistry);
        connectionManager.setMaxTotal(DEFAULT_POOL_MAX_CONNECTIONS);

        return HttpClients.custom()
                .setSSLContext(sslContext)
                .setConnectionManager(connectionManager)
                .build();
    }
}
```

HTTP client can now be injected into CDI. To call the remote API using HTTP, we must first add `OrderBean` class,
 annotated with `@RequestScoped` to make it a CDI. Next, we implement a method which will call orders REST service 
 to receive JSON response on customer's orders and map them to array of `Order` objects:

```java
@RequestScoped
public class OrdersBean {

    private static final Logger log = LoggerFactory.getLogger(OrdersBean.class);

    private static String ordersApiPath;

    @Inject
    private HttpClient httpClient;

    private ObjectMapper objectMapper;

    static {
        ordersApiPath = ConfigurationUtil.getInstance().get("orders-api.path")
                .orElse("http://localhost:8081/v1/order");

        log.info("Orders API path set to " + ordersApiPath);
    }

    public OrdersBean() {
        objectMapper = new ObjectMapper();
    }

    public List&lt;Order&gt; findOrdersByCustomerId(String customerId) {

        try {

            HttpGet request = new HttpGet(ordersApiPath + "?customerId=" + customerId);
            HttpResponse response = httpClient.execute(request);

            int status = response.getStatusLine().getStatusCode();

            if (status &gt;= 200 &amp;&amp; status &lt; 300) {
                HttpEntity entity = response.getEntity();

                if (entity != null)
                    return toOrdersArray(EntityUtils.toString(entity));
            } else {
                String msg = "Remote server '" + ordersApiPath + "' failed with status " + status + ".";
                log.warn(msg);
                throw new InternalServerErrorException(msg);
            }

        } catch (IOException e) {
            String msg = e.getClass().getName() + " occured: " + e.getMessage();
            log.warn(msg);
            throw new InternalServerErrorException(msg);
        }

        return new ArrayList&lt;&gt;();
    }

    private List&lt;Order&gt; toOrdersArray(String json) throws IOException {

        return json == null ?
                new ArrayList&lt;&gt;() :
                objectMapper.readValue(json, objectMapper.getTypeFactory().constructCollectionType(List.class, Order.class));
    }
}
```

Orders service path is provided through KumuluzEE config. If no configuration for path is specified, a default
is used. Next step is to change our REST resource to be able to call our `OrderBean` CDI. For this purpose we will
 modify method for getting customer by id in our REST resource:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@RequestScoped
@Path("customers")
public class CustomerResource {

    @Inject
    private OrdersBean ordersBean;

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {

        Customer customer = Database.getCustomer(customerId);

        if (customer == null)
            return Response.status(Response.Status.NOT_FOUND).build();

        List&lt;Order&gt; customerOrders = ordersBean.findOrdersByCustomerId(customerId);
        customer.setOrders(customerOrders);

        return Response.ok(customer).build();
    }
}
  
```

Note that in order to be able to properly inject `OrdersBean`, we needed to add `@RequestScoped` annotation to
`CustomerResource` class. Our customer-api should now already work and be able to receive orders for customer.

### Wrap HTTP call with fault tolerance patterns

We will now add annotations to our `OrdersBean` in order to execute our remote HTTP call with fault tolerance patterns
using KumuluzEE Fault Tolerance extension. We will add `@Bulkhead` annotation on class to enable bulkhead pattern for
methods within class. It will limit the number of concurrent executions. `@CircuitBreaker` annotation must be added
to method for enabling circuit breaker pattern. `@Timeout` and `@Asynchronous` are also added to method. First one will
enable timeout pattern and the second will turn on thread bulkhead execution.

Note that we have to return a `Future` object since the method is annotated with `@Asynchronous`. Simply change the
return statements to `CompletableFuture.completedFuture(...)` and KumuluzEE Fault Tolerance will do the rest.
 
We will also implement fallback method which will return one order with customerId field set and "N/A" values 
set on other fields. Add `@Fallback` annotation:

```java
@RequestScoped
public class OrdersBean {

    @CircuitBreaker
    @Fallback(fallbackMethod = "findOrdersByCustomerIdFallback")
    @Timeout
    @Asynchronous
    @Bulkhead
    public Future&lt;List&lt;Order&gt;&gt; findOrdersByCustomerId(String customerId) {

        try {

            HttpGet request = new HttpGet(ordersApiPath + "?customerId=" + customerId);
            HttpResponse response = httpClient.execute(request);

            int status = response.getStatusLine().getStatusCode();

            if (status &gt;= 200 &amp;&amp; status &lt; 300) {
                HttpEntity entity = response.getEntity();

                if (entity != null)
                    return CompletableFuture.completedFuture(toOrdersArray(EntityUtils.toString(entity)));
            } else {
                String msg = "Remote server '" + ordersApiPath + "' failed with status " + status + ".";
                log.warn(msg);
                throw new InternalServerErrorException(msg);
            }

        } catch (IOException e) {
            String msg = e.getClass().getName() + " occured: " + e.getMessage();
            log.warn(msg);
            throw new InternalServerErrorException(msg);
        }

        return CompletableFuture.completedFuture(new ArrayList&lt;&gt;());
    }

    public Future&lt;List&lt;Order&gt;&gt; findOrdersByCustomerIdFallback(String customerId) {

        log.info("Fallback called for findOrdersByCustomerId.");

        Order order = new Order();
        order.setCustomerId(customerId);
        order.setName("N/A");
        order.setPaymentType("N/A");
        order.setId("N/A");

        List&lt;Order&gt; orders = new ArrayList&lt;&gt;();
        orders.add(order);

        return CompletableFuture.completedFuture(orders);
    }

}
```

If you rebuild and run customer service, HTTP client should now already be executed within Hystrix framework. We
will provide some configuration for Hystrix framework using KumuluzEE Config in a `config.yml` file:

```yml
kumuluzee:
  env: dev

  fault-tolerance:
    bulkhead:
      value: 5

    annotation-overrides:
      - class: com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.beans.OrdersBean
        method: findOrdersByCustomerId
        annotation: timeout
        parameters:
          value: 1500
      - class: com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.beans.OrdersBean
        method: findOrdersByCustomerId
        annotation: circuit-breaker
        parameters:
          request-threshold: 10
          failure-ratio: 0.3
          delay: 3000

orders-api:
  path: http://localhost:8081/v1/orders
```

A global override is set for `@Bulkhead` annotations. Some parameters for the `@Timeout` and `@CircuitBreaker` are also
set.

### Test fault tolerance patterns and configurations

Test the fault tolerance patterns by executing requests on the customer service. Observe what happens if you shut down
the orders service and keep making requests on the customer service.

### Check out the fault tolerance metrics

The next thing to do is to enable metrics collection for the fault tolerance patterns. To enable metrics collection
simply add the following dependency to the customer service:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
&lt;/dependency&gt;
```

You can check out the metrics on the following URL: http://localhost:8080/metrics

Note that the metrics will be shown in the Prometheus format. If you want to read metrics in a more human readable
format use a request making software (e.g. Postman) and add the `Accept: application/json` header to the request.
</pre></body></html>




File path: kumuluzee-rest-client/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-rest-client&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Rest Client sample&lt;/name&gt;
    &lt;description&gt;Samples for Rest Client usage with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;

        &lt;kumuluzee-rest-client.version&gt;1.3.0-SNAPSHOT&lt;/kumuluzee-rest-client.version&gt;
        &lt;kumuluzee-rest.version&gt;1.3.0-SNAPSHOT&lt;/kumuluzee-rest.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-p-jsonp&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest-client&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-client&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-rest-client.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-rest.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-swagger/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8-jre-alpine

RUN mkdir /app

WORKDIR /app

ADD ./target/classes /app/classes
ADD ./target/dependency /app/dependency

EXPOSE 8080

CMD ["java", "-cp", "classes:dependency/*", "com.kumuluz.ee.EeApplication"]
</pre></body></html>




File path: kumuluzee-opentracing/orders/src/main/java/com/kumuluz/ee/samples/opentracing/orders/OrderApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.orders;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Domen Jeric
 */
@ApplicationPath("v1")
public class OrderApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-rest/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-rest&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JPA, CDI, JAX-RS and REST sample&lt;/name&gt;
    &lt;description&gt;JPA, CDI, JAX-RS and REST usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jta-narayana&lt;/artifactId&gt;
        &lt;/dependency&gt;
		&lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
            &lt;version&gt;1.4.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;42.0.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config-etcd/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/CustomConfigurationDecoder.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.ConfigurationDecoder;

import javax.xml.bind.DatatypeConverter;

/**
 * @author Jan Meznarič
 * @since 3.2.1
 */
public class CustomConfigurationDecoder implements ConfigurationDecoder {

    @Override
    public boolean shouldDecode(String key) {
        if ("rest-config.encoded-property".equals(key)) {
            return true;
        }
        return false;
    }

    @Override
    public String decode(String key, String value) {
        return new String(DatatypeConverter.parseBase64Binary(value));
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="all"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/resources/sql-scripts/init-db.sql
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">INSERT INTO student (name, surname, studentnumber, enrolled) VALUES ('James', 'Smith', 63170000, '2018-03-21');
INSERT INTO student (name, surname, studentnumber, enrolled) VALUES ('John', 'Johnson', 63170001, '2018-04-12');
INSERT INTO student (name, surname, studentnumber, enrolled) VALUES ('Robert', 'Williams', 63170002, '2018-02-27');
INSERT INTO assistant (name, surname, popularity) VALUES ('Bradley', 'Cook', 10);
INSERT INTO assistant (name, surname, popularity) VALUES ('Scott', 'Howard', 5.7);
INSERT INTO assistant (name, surname, popularity) VALUES ('Jeffrey', 'Compton', 1.4);
INSERT INTO lecturer (name, surname, location, status, assistant_id) VALUES ('Michael', 'Jones', 'R2.23', 0, 1);
INSERT INTO lecturer (name, surname, location, status, assistant_id) VALUES ('William', 'Brown', 'R4.21', 1, 2);
INSERT INTO lecturer (name, surname, location, status, assistant_id) VALUES ('David', 'Davis', 'R1.10', 0, 1);

</pre></body></html>




File path: kumuluzee-rest/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE REST sample

&gt; Expand the KumuluzEE JPA and CDI sample with REST query parameters for automatic pagination, sorting and filtering.

The objective of this sample is to demonstrate how to expand your REST service to incorporate query parameters for automatic pagination, sorting and filtering of JPA entities. The tutorial expands the development of JPA sample. You will add KumuluzEE dependency into pom.xml. You will add query parameters parsing from the URI in the CustomerResource class and entity querying based on the parameters in the CustomerService CDI class. Required knowledge: basic familiarity with JPA, CDI and basic concepts of REST and JSON.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

In order to run this sample you will have to setup a local PostgreSQL database:
- __database host__: localhost:5432
- __database name__: customers
- __user__: postgres
- __password__: postgres

You can run the database inside docker:
```
docker run -d --name pg-rest -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=customers -p 5432:5432 postgres:latest
```

The required tables will be created automatically upon running the sample.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluz-rest
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource page - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to extend a simple REST microservice with REST query 
parameters and pack it as a KumuluzEE microservice. We will extend the existing [KumuluzEE JPA sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa), with REST query parameters. Therefore, first complete the existing 
JPA sample tutorial, or clone the JPA sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JPA sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa) or clone the existing sample
* Ensure access to PostgreSQL database.
* Add Maven dependencies
* Parse query parameters from the URI in Rest resource
* Query entities based on the extracted query parameters in the CDI bean
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JPA sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey`, `kumuluzee-cdi-weld`, `kumuluzee-jpa-eclipselink` and `postgresql` configured in `pom.xml`.

Add the `kumuluzee-rest-core` dependency:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-rest.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Extend REST Service with parsing the query parameters from the URI

First you will need to extend the existing CustomerResource with URI context information. The URI can be obtained by adding UriInfo context to selected Resource:

```java
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @Context
    protected UriInfo uriInfo;
    
    ...
    
}
```

Using the URI context information the query parameters can be constructed by using the QueryParameters class:

```java
    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = customerBean.getCustomers(createQuery());
        return Response.ok(customers).build();
    }
    
    @GET
    @Path("count")
    public Response getCount() {
        Long count = customerBean.getCustomerCount(createQuery());
        return Response.ok(count).build();
    }
    
    private QueryParameters createQuery() {
        return QueryParameters.query(uriInfo.getRequestUri().getQuery()).defaultOffset(0).defaultLimit(10).build();
    }
```

### Extend CDI bean by using the query parameters for querying the entities

After parsing the query parameters they can be used to query or count entities using the `JPAUtils` class:
```java
@RequestScoped
public class CustomerService {

    @PersistenceContext
    private EntityManager em;

    public List&lt;Customer&gt; getCustomers(QueryParameters query) {
        List&lt;Customer&gt; customers = JPAUtils.queryEntities(em, Customer.class, query);
        return customers;
    }


    public Long getCustomerCount(QueryParameters query) {
        Long count = JPAUtils.queryEntitiesCount(em, Customer.class, query);
        return count;
    }
    
    ...
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/src/main/java/com/kumuluz/ee/samples/graphql_simple/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.graphql_simple;

import javax.persistence.*;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Entity
@Table(name = "customer")
@NamedQueries({
        @NamedQuery(
                name = "Customer.findCustomers",
                query = "SELECT c " +
                        "FROM Customer c"
        )
})
public class Customer implements Serializable {

    @Id
    private String id;
    @Column(name = "first_name")
    private String firstName;
    @Column(name = "last_name")
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: microservices-simple/models/src/main/java/com/kumuluz/ee/samples/microservices/simple/models/Order.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.microservices.simple.models;

import javax.persistence.*;
import java.util.Date;

/**
 * @author Tilen Faganel
 * @since 2.3.0
 */
@Entity
@Table(name = "orders")
@NamedQuery(name = "BookOrder.findAll", query = "SELECT o FROM Order o")
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Temporal(TemporalType.TIMESTAMP)
    private Date orderDate;

    @ManyToOne
    @JoinColumn(name="book_id")
    private Book book;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }

    public Book getBook() {
        return book;
    }

    public void setBook(Book book) {
        this.book = book;
    }
}
</pre></body></html>




File path: kumuluzee-metrics/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: metrics-sample
  version: 1.0.0
  env:
    name: dev
  metrics:
    logstash:
      enabled: false
      address: 127.0.0.1
      port: 5043
      period-s: 15
    logs:
      enabled: false
      period-s: 30
      level: INFO
    web-instrumentation:
      - name: metricsEndpoint
        url-pattern: /metrics/*
      - name: customersEndpoint
        url-pattern: /v1/customers/*
</pre></body></html>




File path: kumuluzee-version/src/main/resources/VERSION.json
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{
  "maven_group_id": "${project.groupId}",
  "maven_artifact_id": "${project.parent.artifactId}",
  "maven_version": "${project.version}",
  "project_artifactId": "${project.artifactId}",
  "git_commit_id": "${buildNumber}"
}</pre></body></html>




File path: jpa/src/main/java/com/kumuluz/ee/samples/jpa/CustomerService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jpa;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;
import javax.transaction.UserTransaction;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
public class CustomerService {

    @PersistenceContext(unitName = "kumuluzee-samples-jpa")
    private EntityManager em;

    @PersistenceContext(unitName = "kumuluzee-samples-jpa-failed")
    private EntityManager emFailed;

    public Customer getCustomer(String customerId) {
        return em.find(Customer.class, customerId);
    }

    public List&lt;Customer&gt; getCustomers() {
        List&lt;Customer&gt; customers = em
                .createNamedQuery("Customer.findCustomers", Customer.class)
                .getResultList();

        return customers;
    }

    @Transactional
    public void saveCustomer(Customer customer) {
        if (customer != null) {
            em.persist(customer);
        }

    }

    @Transactional(Transactional.TxType.REQUIRED)
    public void deleteCustomer(String customerId) {
        Customer customer = em.find(Customer.class, customerId);
        if (customer != null) {
            em.remove(customer);
        }
    }

    public List&lt;Customer&gt; getCustomersFailed() {
        List&lt;Customer&gt; customers = emFailed
            .createNamedQuery("Customer.findCustomers", Customer.class)
            .getResultList();

        return customers;
    }
}
</pre></body></html>




File path: kumuluzee-config/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/java/entity/User.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package entity;

import javax.persistence.*;

@Entity
@Table(name = "account")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String name;
    private String surname;

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/src/main/java/com/kumuluz/ee/samples/kafka/producer/Message.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.producer;

/**
 * @author Matija Kljun
 */
public class Message {
    private String key;
    private String content;
    private String topic;

    public String getTopic() {
        return topic;
    }

    public void setTopic(String topic) {
        this.topic = topic;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }
}</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-servlet/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-rest/src/main/java/com/kumuluz/ee/samples/rest/CustomerService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.rest;

import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;
import java.util.List;

/**
 * @author Benjamin Kastelic, Marko Skrjanec
 * @since 2.3.0
 */
@RequestScoped
public class CustomerService {

    @PersistenceContext
    private EntityManager em;

    public Customer getCustomer(String customerId) {
        return em.find(Customer.class, customerId);
    }

    public List&lt;Customer&gt; getCustomers(QueryParameters query) {
        List&lt;Customer&gt; customers = JPAUtils.queryEntities(em, Customer.class, query);
        return customers;
    }


    public Long getCustomerCount(QueryParameters query) {
        Long count = JPAUtils.queryEntitiesCount(em, Customer.class, query);
        return count;
    }

    @Transactional
    public void saveCustomer(Customer customer) {
        if (customer != null) {
            em.persist(customer);
        }
    }

    @Transactional
    public void deleteCustomer(String customerId) {
        Customer customer = em.find(Customer.class, customerId);
        if (customer != null) {
            em.remove(customer);
        }
    }

}
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/src/main/java/com/kumuluz/ee/samples/kafka/producer/ProducerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.producer;


import com.kumuluz.ee.streaming.common.annotations.StreamProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

/**
 * @author Matija Kljun
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/produce")
@RequestScoped
public class ProducerResource {

    private static final Logger log = Logger.getLogger(ProducerResource.class.getName());

    @Inject
    @StreamProducer
    private Producer producer;

    @POST
    public Response produceMessage(Message msg) {

        ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;String, String&gt;(msg.getTopic(), msg.getKey(), msg
                .getContent());

        producer.send(record,
                (metadata, e) -&gt; {
                    if (e != null) {
                        e.printStackTrace();
                    } else {
                        log.info("The offset of the produced message record is: " + metadata.offset());
                    }
                });

        return Response.ok().build();

    }
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/resources/sql-script/init-db.sql
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">INSERT INTO account (name, surname) VALUES ('Primoz', 'Hrovat');</pre></body></html>




File path: microservices-simple/orders/src/main/java/com/kumuluz/ee/samples/microservices/simple/OrdersProperties.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.microservices.simple;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;

import javax.enterprise.context.ApplicationScoped;

/**
 * @author Tilen Faganel
 * @since 2.3.0
 */
@ConfigBundle("orders")
@ApplicationScoped
public class OrdersProperties {

    private String catalogueUrl = "http://localhost:3000";

    public String getCatalogueUrl() {
        return catalogueUrl;
    }

    public void setCatalogueUrl(String catalogueUrl) {
        this.catalogueUrl = catalogueUrl;
    }
}
</pre></body></html>




File path: kumuluzee-logs-log4j2/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Logs Log4j2 sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Logs Log4j2 usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;version&gt;1.5.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-persistence/src/main/java/com/kumuluz/ee/samples/tutorial/orders/Order.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders;

import org.eclipse.persistence.annotations.UuidGenerator;

import javax.persistence.*;
import java.util.Date;

@Entity(name = "orders")
@NamedQueries(value =
        {
                @NamedQuery(name = "Order.getAll", query = "SELECT o FROM orders o"),
                @NamedQuery(name = "Order.findByCustomer", query = "SELECT o FROM orders o WHERE o.customerId = " +
                        ":customerId")
        })
@UuidGenerator(name = "idGenerator")
public class Order {

    @Id
    @GeneratedValue(generator = "idGenerator")
    private String id;

    private String title;

    private String description;

    private Date submitted;

    @Column(name = "customer_id")
    private String customerId;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public Date getSubmitted() {
        return submitted;
    }

    public void setSubmitted(Date submitted) {
        this.submitted = submitted;
    }
}
</pre></body></html>




File path: kumuluzee-config-consul/src/main/java/com/kumuluz/ee/samples/kumuluz_config_consul/ConfigurationEventHandler.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kumuluz_config_consul;

import com.kumuluz.ee.configuration.utils.ConfigurationUtil;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import java.util.logging.Logger;

/**
 * @author Jan Meznarič
 * @since 2.3.0
 */
@ApplicationScoped
public class ConfigurationEventHandler {

    private static final Logger log = Logger.getLogger(ConfigurationEventHandler.class.getName());

    public void init(@Observes @Initialized(ApplicationScoped.class) Object init) {

        String watchedKey = "rest-config.maintenance";

        ConfigurationUtil.getInstance().subscribe(watchedKey, (String key, String value) -&gt; {

            if (watchedKey.equals(key)) {

                if ("true".equals(value.toLowerCase())) {
                    log.info("Maintenance mode enabled.");
                } else {
                    log.info("Maintenance mode disabled.");
                }

            }

        });
    }

}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-servlet/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery &amp;mdash; discover services in servlet 

&gt; Develop a KumuluzEE servlet that discovers a microservice registered with etcd.

The objective of this sample is to show how to discover a service, registered with etcd using KumuluzEE Discovery 
extension. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml.
You will develop a simple servlet, which uses KumuluzEE Discovery extension for discovering registered services. 
Required knowledge: basic familiarity with servlets and basic familarity with etcd.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```


## Prerequisites

To run this sample you will need an etcd instance. Note that such setup with only one etcd node is not viable for 
production environments, but only for developing purposes. Here is an example on how to quickly run an etcd instance 
with docker:

   ```bash
    $ docker run -d -p 2379:2379 \
      --name etcd \
      --volume=/tmp/etcd-data:/etcd-data \
      quay.io/coreos/etcd:latest \
      /usr/local/bin/etcd \
      --name my-etcd-1 \
      --data-dir /etcd-data \
      --listen-client-urls http://0.0.0.0:2379 \
      --advertise-client-urls http://0.0.0.0:2379 \
      --listen-peer-urls http://0.0.0.0:2380 \
      --initial-advertise-peer-urls http://0.0.0.0:2380 \
      --initial-cluster my-etcd-1=http://0.0.0.0:2380 \
      --initial-cluster-token my-etcd-token \
      --initial-cluster-state new \
      --auto-compaction-retention 1 \
      -cors="*"
   ```


You will also need a registered service instance. You can use the
 [discovery-etcd-register](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-register) sample.
 
## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd discovery-samples/discovery-discover-servlet
    $ mvn clean package
    ```

2. Start local etcd instance and another microservice, which registers to etcd:

    You can find instructions in discovery-register sample, mentioned above.

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* Servlet - http://localhost:8080/DiscoverServlet

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a servlet, which uses KumuluzEE Discovery extension.
We will develop a simple servlet with the following resources:
* GET http://localhost:8080/DiscoverServlet - discover resource and send it a simple request

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet)
* Add Maven dependency to KumuluzEE Discovery extension
* Implement the service
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-cdi-weld` and `kumuluzee-discovery` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the servlet

Implement the servlet, which will return a response, received from discovered service:

```java
@WebServlet("DiscoverServlet")
public class DiscoverServlet extends HttpServlet {

    @Inject
    private DiscoveryUtil discoveryUtil;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException,
            IOException {

        URL url = discoveryUtil.getServiceInstance("customer-service", "*", "dev", AccessType.DIRECT).orElse(null);

        if (url != null) {
            response.getWriter().println("Discovered instance on " + url);

            response.getWriter().println("Sending request for customer list ...");
            URL serviceUrl = new URL(url.toString() + "/v1/customers");
            HttpURLConnection conn = (HttpURLConnection) serviceUrl.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder receivedResponse = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                receivedResponse.append(line);
            }
            rd.close();

            response.getWriter().println("Received response: " + receivedResponse.toString());

        } else {
            response.getWriter().println("No service instances were discovered.");
        }
    }
}
```

In the example above, we inject an `URL` resource using `@DiscoverService` annotation. KumuluzEE Discovery extension
uses NPM-like versioning, so by specifying version "*", we always get the latest version of a microservice, registered with etcd.
Servlet sends a GET request to the discovered URL and sends back the received response.

### Add required configuration for the service discovery

You can add configuration using any KumuluzEE configuration source.

For example, you can use config.yml file, placed in resources folder:
```yaml
kumuluzee:
  discovery:
    etcd:
      hosts: http://127.0.0.1:2379
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-metrics/src/main/java/com/kumuluz/ee/samples/kumuluzee_metrics/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_metrics;


import org.eclipse.microprofile.metrics.ConcurrentGauge;
import org.eclipse.microprofile.metrics.Histogram;
import org.eclipse.microprofile.metrics.Meter;
import org.eclipse.microprofile.metrics.MetricUnits;
import org.eclipse.microprofile.metrics.annotation.*;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@RequestScoped
public class CustomerResource {

    @Inject
    @Metric(name = "customer_counter")
    private ConcurrentGauge customerCounter;

    @Inject
    @Metric(name = "first_name_length_histogram")
    private Histogram nameLength;

    @Inject
    @Metric(name = "customer_adding_meter")
    private Meter addMeter;

    @GET
    @SimplyTimed(name = "get_all_customers_simple_timer")
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        getCustomerCount();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") int customerId) {
        Customer customer = Database.getCustomer(customerId);
        if (customer != null) {
            return Response.ok(customer).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @GET
    @Path("add-sample-names")
    @Timed(name = "add-sample-names-timer")
    public Response addSampleNames() {
        addNewCustomer(new Customer(Database.getCustomers().size(), "Daniel", "Ornelas"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Dennis", "McBride"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Walter", "Wright"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Mitchell", "Kish"));
        addNewCustomer(new Customer(Database.getCustomers().size(), "Tracy", "Edwards"));

        return Response.noContent().build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        addMeter.mark();
        customerCounter.inc();
        nameLength.update(customer.getFirstName().length());
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    @Metered(name = "customer_deleting_meter")
    public Response deleteCustomer(@PathParam("customerId") int customerId) {
        customerCounter.dec();
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }

    @Gauge(name = "customer_count_gauge", unit = MetricUnits.NONE)
    private int getCustomerCount() {
        return Database.getCustomers().size();
    }
}
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-amqp-rabbitmq&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE AMQP RabbitMQ sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE AMQP RabbitMQ usage sample with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee.rabbitmq.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee.rabbitmq.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.amqp&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-amqp-rabbitmq&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.rabbitmq.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-tutorial-customers&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;customers-api&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
            &lt;artifactId&gt;customers-business-logic&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.swagger&lt;/groupId&gt;
            &lt;artifactId&gt;swagger-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.swagger&lt;/groupId&gt;
            &lt;artifactId&gt;swagger-jersey2-jaxrs&lt;/artifactId&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;
                    &lt;artifactId&gt;jersey-container-servlet-core&lt;/artifactId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.github.kongchen&lt;/groupId&gt;
                &lt;artifactId&gt;swagger-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.1.5&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;apiSources&gt;
                        &lt;apiSource&gt;
                            &lt;locations&gt;
                                &lt;location&gt;
                                    com.kumuluz.ee.samples.tutorial.customers.api.v1.resources.CustomersResource
                                &lt;/location&gt;
                            &lt;/locations&gt;
                            &lt;schemes&gt;
                                &lt;schema&gt;http&lt;/schema&gt;
                            &lt;/schemes&gt;
                            &lt;host&gt;localhost&lt;/host&gt;
                            &lt;basePath&gt;/v1&lt;/basePath&gt;
                            &lt;info&gt;
                                &lt;title&gt;Customers&lt;/title&gt;
                                &lt;version&gt;1.0.0&lt;/version&gt;
                                &lt;description&gt;Customer API.
                                &lt;/description&gt;
                                &lt;contact&gt;
                                    &lt;email&gt;info.samples@kumuluz.com&lt;/email&gt;
                                &lt;/contact&gt;
                            &lt;/info&gt;
                            &lt;templatePath&gt;
                                ${project.basedir}/src/main/resources/doc/v1/swagger/templates/strapdown.html.hbs
                            &lt;/templatePath&gt;
                            &lt;outputPath&gt;${project.basedir}/src/main/resources/doc/v1/swagger/html/document.html
                            &lt;/outputPath&gt;
                            &lt;swaggerDirectory&gt;${project.basedir}/src/main/resources/doc/v1/swagger&lt;/swaggerDirectory&gt;
                        &lt;/apiSource&gt;
                    &lt;/apiSources&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/beans/StudentBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.beans;

import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;
import com.kumuluz.ee.samples.graphql_advanced.entities.Student;
import com.kumuluz.ee.samples.graphql_advanced.entities.connections.StudentConnection;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;
import java.time.LocalDate;

@RequestScoped
public class StudentBean {

    @PersistenceContext
    private EntityManager em;

    public StudentConnection getStudentConnection(QueryParameters qp) {

        return new StudentConnection(JPAUtils.queryEntities(em, Student.class, qp),
                JPAUtils.queryEntitiesCount(em, Student.class, qp));
    }

    public Student getStudentById(Integer id) {

        return em.find(Student.class, id);
    }

    @Transactional
    public Student createStudent(Student s) {
        s.setEnrolled(LocalDate.now());
        em.persist(s);

        return s;
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-listener/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Verticle Listener &amp;mdash; listen to Vert.x event bus

&gt; Listen to events on Vert.x event bus using a Verticle

The objective of this sample is to listen to events sent by a microservice which is using KumuluzEE Reactive Vert.x extension. The tutorial will guide you through all the necessary steps. You will add dependencies into `pom.xml`. You will develop a simple Verticle that will listen to Vert.x event bus. Required knowledge: basic familiarity with Vert.x.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build a fat jar.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-reactive-vertx/simple-verticles/verticle-listener
    $ mvn clean package
    ```

2. Run the sample:

    ```batch
    java -jar target\${project.build.finalName}-fat.jar -cluster
    ```
 
3. Message will be printed out in the terminal when the Verticle receives it.

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a Vert.x event bus listener Verticle.

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies
* Implement listener Verticle
* Build and run

### Add Maven dependencies

Add `vertx-core` and `vertx-hazelcast` for clustering.

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.vertx&lt;/groupId&gt;
        &lt;artifactId&gt;vertx-core&lt;/artifactId&gt;
        &lt;version&gt;${vertx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.vertx&lt;/groupId&gt;
        &lt;artifactId&gt;vertx-hazelcast&lt;/artifactId&gt;
        &lt;version&gt;${vertx.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `maven-compiler-plugin` build plugin to compile, `maven-shade-plugin` to package and `exec-maven-plugin` to run the project.

### Implement listener Verticle

Implement a class e.g. ListenerVerticle that extends `AbstractVerticle`.

In the example below we get a reference to the Vert.x event bus and start listening to the given address `tacos`. We print out every event that we receive as long as it is not `null`.

```java
import io.vertx.core.AbstractVerticle;

public class ListenerVerticle extends AbstractVerticle {

	@Override
	public void start() {
		vertx.eventBus().consumer("tacos", event -&gt; {
			if (event.body() != null) {
				System.out.println("Message received: " + event.body());
			}
		});
	}

}
```

### Build and run it

To build and run the example, use the commands as described in previous sections.</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-tutorial&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;kumuluzee-tutorial-orders&lt;/artifactId&gt;

    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;orders-api&lt;/module&gt;
        &lt;module&gt;orders-business-logic&lt;/module&gt;
        &lt;module&gt;orders-persistence&lt;/module&gt;
    &lt;/modules&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/master/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/master/Resource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.master;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("master")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class Resource {
    private Client client = ClientBuilder.newClient();

    @GET
    public Response get() {
        Response r1 = client
                .target("http://localhost:8081/v1") //alpha
                .path("alpha")
                .request()
                .get();
        Response r2 = client
                .target("http://localhost:8082/v1") //beta
                .path("beta")
                .request()
                .get();
        String response1 = r1.readEntity(String.class);
        String response2 = r2.readEntity(String.class);
        return Response.ok("master-&gt;" + response1 + " --- " + "master-&gt;" + response2).build();
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-persistence/src/main/resources/sql-scripts/init-orders.sql
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">INSERT INTO orders (id, title, description, submitted, customer_id) VALUES (1, 'Keyboard', 'New mechanical keyboard.', TIMESTAMP '2017-03-01 11:23:38', 1);
INSERT INTO orders (id, title, description, submitted, customer_id) VALUES (2, 'Mouse', 'Black mouse.', TIMESTAMP '2017-04-12 01:12:38', 1);
INSERT INTO orders (id, title, description, submitted, customer_id) VALUES (3, 'Monitor', 'LCD monitor.', TIMESTAMP '2017-06-17 12:00:08', 3);</pre></body></html>




File path: kumuluzee-opentracing/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE OpenTracing Sample

&gt; Simple example on how to use KumuluzEE OpenTracing extension.

Example demonstrates how to take advantage of distributed tracing 
in KumuluzEE projects.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```bash
        $ java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```bash
        $ mvn -version
        ```
        
3. Docker 1.13.0 (or newer):
    * If you have installed Docker, you can check the version by typing the following in a command line:
    
        ```bash
        $ docker --version
        ```

## Jaeger Tracing

### Prerequisites

Make sure you have Jaeger tracing instance running.

```bash
$ docker run -d -p 5775:5775/udp -p 16686:16686 jaegertracing/all-in-one:latest
```


## Zipkin tracing

### Prerequisites

Make sure you have Zipkin tracing instance running.

```bash
$ docker run -d -p 9411:9411 openzipkin/zipkin
```

By default Jaeger tracing is enabled in both sample microservices. 
To enable Zipkin tracing all you need to do is change dependency in
customers and orders module:

```xml
&lt;!--Replace kumuluzee-opentracing-jaeger with this dependency.--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.opentracing&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-opentracing-zipkin&lt;/artifactId&gt; 
    &lt;version&gt;${kumuluzee-opentracing.version}&lt;/version&gt;
&lt;/dependency&gt;
```

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-opentracing
    $ mvn clean package
    ```
    
2. Run each individual microservice separately (separate terminal):
    
    ```bash
    $ java -jar customers/target/opentracing-customers-1.0.0-SNAPSHOT.jar
    $ java -jar orders/target/opentracing-orders-1.0.0-SNAPSHOT.jar
    ```
    
3. Navigate to &lt;http://localhost:3000/v1/customers/1/orders&gt;

4. View traces in [Jaeger console](http://localhost:16686) or [Zipkin console](http://localhost:9411)


## Tutorial

This tutorial will guide you through the steps required to create 2 simple 
REST microservices (customers and orders) and instrument them with distributed tracing.

We will follow these steps:
- Create 2 REST microservices (customers and orders)
- Add Maven dependencies for distributed tracing
- Tracing with no code instrumentation
- Tracing with explicit code instrumentation
- Build and run 

### Create 2 REST microservices (customers and orders)

Create 2 microservices - customers and orders as described in 
[JAX-RS tutorial](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs#tutorial).

### Add Maven dependencies for distributed tracing
Add Jaeger tracing dependency for each microservice:


```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.opentracing&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-opentracing-jaeger&lt;/artifactId&gt; 
    &lt;version&gt;${kumuluzee-opentracing.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add CDI dependency:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
```

By now you should have the following dependencies in pom.xml in Customers and Orders microservice:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.opentracing&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-opentracing-jaeger&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-opentracing.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

### Tracing with no code instrumentation
Create beans.xml file in resources/META-INF directory for each microservice with the following content:

```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;
```

Add config.yaml file in resources directory for each microservice. 
This step is optional. If config is not present extension will use default values as described [here](https://github.com/kumuluz/kumuluzee-opentracing).
```yaml
# Customers microservice config
kumuluzee:
  name: Customers Microservice
  server:
    http:
      port: 3000
  opentracing: # default config
    jaeger:
      agent-host: localhost
      agent-port: 5775
    zipkin:
      agent-host: http://localhost
      agent-port: 9411

mp: 
  opentracing:
    server:
      operation-name-provider: http-path
      skip-pattern: /openapi.*|/health.*
```

```yaml
# Orders microservice config
kumuluzee:
  name: Orders Microservice
  server:
    http:
      port: 3001
  opentracing: 
    jaeger:
      agent-host: localhost
      agent-port: 5775
    zipkin:
      agent-host: http://localhost
      agent-port: 9411

mp:
  opentracing:
    server:
      operation-name-provider: class-method # default operation name provider
      skip-pattern: /openapi.*|/health.*
```

At this point tracing with no code instrumentation should be working. 
You can test this by following steps as described in Usage chapter above.

### Tracing with explicit code instrumentation

We will add Customers bean in Customers microservice. 
Customers bean will implement method for retrieving customer orders from Orders microservice:

```java
@RequestScoped
public class CustomersBean {

    private Client httpClient;

    @Inject
    Tracer configuredTracer; // here we inject Tracer so we can append custom logs and tags to active span

    @PostConstruct
    private void init() {
        httpClient = ClientTracingRegistrar.configure(ClientBuilder.newBuilder()).build();  // enable client tracing
    }

    @Traced(operationName = "Get customer orders") // create new span for this method with custom span name
    public Response getOrders() {
        try {
            configuredTracer.activeSpan().log("Fetching customer orders..."); // add log to active span
            return httpClient.target("http://localhost:3001/v1/orders")
                    .request()
                    .get();
        } catch (WebApplicationException | ProcessingException e) {
            throw new WebApplicationException(e);
        }
    }
}
```

We will also add new method into CustomerResource class:

```java
@Inject
private CustomersBean customersBean;


@GET
@Path("{customerId}/orders")
public Response getCustomerOrders(@PathParam("customerId") String customerId) {
    return customersBean.getOrders();
}
```


In orders microservice we will add some code in OrderResource class:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("orders")
@ApplicationScoped
public class OrderResource {

    @Inject
    Tracer configuredTracer;

    @GET
    @Traced(operationName = "GET all orders") // changed default span name
    public Response getAllOrders() {
        configuredTracer.activeSpan().log("Getting all orders..."); // add log to active span
        configuredTracer.activeSpan().setTag("test-tag", "Test tag value"); // add tag to active span 
        List&lt;Order&gt; orders = Database.getOrders();
        configuredTracer.activeSpan().log("Got "+ orders.size() + " orders.");
        return Response.ok(orders).build();
    }

    @GET
    @Path("{orderId}")
    public Response getOrder(@PathParam("orderId") String orderId) {
        Order order = Database.getOrder(orderId);
        return order != null
                ? Response.ok(order).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewOrder(Order order) {
        Database.addOrder(order);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{orderId}")
    public Response deleteOrder(@PathParam("orderId") String orderId) {
        Database.deleteOrder(orderId);
        return Response.noContent().build();
    }
}
```

### Build and run
To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka-streams&lt;/artifactId&gt;


    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;
            &lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;
            &lt;version&gt;${kafka.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
            &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: jul/src/main/java/com/kumuluz/ee/samples/jul/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jul;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-logs-jul/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Logs sample with JUL implementation

&gt; Build a REST service which utilizes a built-in logging framework with JUL implementation to log basic metrics and pack it as a KumuluzEE microservice

The objective of this sample is to demonstrate how to use the built-in logging framework with JUL implementation to log basic metrics.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-logs-jul
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to use KumuluzEE Logs and pack the application as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Add Maven dependencies
* Add KumuluzEE Logs support
* Add JUL logging configuration
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in `pom.xml`.

Add the `kumuluzee-cdi-weld` and `kumuluzee-logs-jul` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-logs-jul&lt;/artifactId&gt;
    &lt;version&gt;${kumuluz-logs.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Add KumuluzEE Logs support

Enhance `CustomerResource` class by adding KumuluzEE Logs annotations:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Log(LogParams.METRICS)
public class CustomerResource {

    ...

    @POST
    @Log(value = LogParams.METRICS, methodCall = false)
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }
}
```

### Add JUL logging configuration

The default java.util.logging configuration can be overridden by providing the location of the custom configuration 
file with system property `-Djava.util.logging.config.file`.

In this sample in directory `resources` create file `logging.properties`: 

```
# Default global logging level
.level=FINER

# ConsoleHandler definition
handlers=java.util.logging.ConsoleHandler

# ConsoleHandler configuration settings
java.util.logging.ConsoleHandler.level=FINER
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
```

To use this configuration instead of the default one provide system property `-Djava.util.logging.config.file` when 
running the application:

```bash
$ java -Djava.util.logging.config.file=&lt;path&gt;/kumuluzee-samples/kumuluzee-logs-jul/src/main/resources/logging.properties -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
```

in Windows environment use the command
```batch
java -Djava.util.logging.config.file=&lt;path&gt;/kumuluzee-samples/kumuluzee-logs-jul/src/main/resources/logging.properties -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
```

and replace the `&lt;path&gt;` with appropriate directory path.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-persistence/src/main/java/com/kumuluz/ee/samples/tutorial/customers/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers;

import com.kumuluz.ee.samples.tutorial.orders.Order;
import org.eclipse.persistence.annotations.UuidGenerator;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@Entity(name = "customer")
@NamedQueries(value =
        {
                @NamedQuery(name = "Customer.getAll", query = "SELECT c FROM customer c")
        })
@UuidGenerator(name = "idGenerator")
public class Customer {

    @Id
    @GeneratedValue(generator = "idGenerator")
    private String id;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    private String address;

    @Column(name = "date_of_birth")
    private Date dateOfBirth;

    @Transient
    private List&lt;Order&gt; orders;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Date getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public List&lt;Order&gt; getOrders() {
        return orders;
    }

    public void setOrders(List&lt;Order&gt; orders) {
        this.orders = orders;
    }
}</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8u131-jre-alpine


COPY target /usr/src/myapp
WORKDIR /usr/src/myapp

EXPOSE 8080

CMD ["java", "-server", "-cp", "classes:dependency/*", "com.kumuluz.ee.EeApplication"]</pre></body></html>




File path: kumuluzee-config-consul/src/main/java/com/kumuluz/ee/samples/kumuluz_config_consul/ConfigProperties.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_consul;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;
import com.kumuluz.ee.configuration.cdi.ConfigValue;

import javax.enterprise.context.ApplicationScoped;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    @ConfigValue(watch = true)
    private String stringProperty;

    private Boolean booleanProperty;

    private Integer integerProperty;

    @ConfigValue(watch = true)
    private String encodedProperty;

    public String getStringProperty() {
        return stringProperty;
    }

    public void setStringProperty(String stringProperty) {
        this.stringProperty = stringProperty;
    }

    public Boolean getBooleanProperty() {
        return booleanProperty;
    }

    public void setBooleanProperty(Boolean booleanPropertysomeBoolean) {
        this.booleanProperty = booleanPropertysomeBoolean;
    }

    public Integer getIntegerProperty() {
        return integerProperty;
    }

    public void setIntegerProperty(Integer integerProperty) {
        this.integerProperty = integerProperty;
    }

    public String getEncodedProperty() {
        return encodedProperty;
    }

    public void setEncodedProperty(String encodedProperty) {
        this.encodedProperty = encodedProperty;
    }
}
</pre></body></html>




File path: kumuluzee-openapi/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    #context-path: /custom
  openapi:
    enabled: true
    #servlet:
      #mapping: ""
    #base-url: http://behind.proxy.example.com
    ui:
      enabled: true
      #mapping: /openapi/ui</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-kubernetes&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;kumuluzee-customers&lt;/artifactId&gt;

    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;customers-api&lt;/module&gt;
        &lt;module&gt;customers-business-logic&lt;/module&gt;
        &lt;module&gt;customers-persistence&lt;/module&gt;
    &lt;/modules&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/java/com/kumuluz/ee/samples/kafka/registry/streams/GenericConfig.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.streams;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;
import com.kumuluz.ee.configuration.cdi.ConfigValue;

import javax.enterprise.context.ApplicationScoped;

/**
 * @author cen1
 */
@ApplicationScoped
@ConfigBundle(".")
public class GenericConfig {

    @ConfigValue("kumuluzee.streaming.kafka.streams-avro.schema-registry-url")
    private String schemaRegistryUrl;

    public String getSchemaRegistryUrl() {
        return schemaRegistryUrl;
    }

    public void setSchemaRegistryUrl(String schemaRegistryUrl) {
        this.schemaRegistryUrl = schemaRegistryUrl;
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-kubernetes/register-deployment.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: register-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: register
    spec:
      containers:
      - image: register-sample:v1
        name: register
        env:
#          - name: KUMULUZEE_BASEURL
#            value: http://NODE-IP:SERVICE-NODEPORT
          - name: KUMULUZEE_DISCOVERY_CLUSTER
            value: minikube
          - name: KUMULUZEE_DISCOVERY_ETCD_HOSTS
            value: http://etcd:2379
        ports:
        - containerPort: 8080
          name: server
          protocol: TCP
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/master/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk


</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-servlet/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  discovery:
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/java/com/kumuluz/ee/samples/kafka/registry/streams/BigDecimalSerde.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.streams;

import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serializer;

import java.math.BigDecimal;

/**
 * @author cen1
 */
public class BigDecimalSerde implements Serde&lt;BigDecimal&gt; {

    @Override
    public Serializer&lt;BigDecimal&gt; serializer() {
        return new BigDecimalSerializer();
    }

    @Override
    public Deserializer&lt;BigDecimal&gt; deserializer() {
        return new BigDecimalDeserializer();
    }
}
</pre></body></html>




File path: kumuluzee-opentracing/customers/src/main/java/com/kumuluz/ee/samples/opentracing/customers/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.customers;

/**
 * @author Domen Jeric
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/src/main/java/com/kumuluz/ee/samples/reactive/vertx/VertxResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.reactive.vertx;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
*
* @author Žan Ožbot
*/
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("vertx")
@RequestScoped
public class VertxResource {

	@Inject
    VertxEventListener vertxEventListener;
	
	@GET
	@Path("messages")
	public Response getMessages() {
		return Response.ok(vertxEventListener.getFiveLastMessages()).build();
	}
	
}
</pre></body></html>




File path: kumuluzee-fault-tolerance/order-api/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/order/resources/OrderResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.order.resources;

import com.kumuluz.ee.samples.circuit_breaker_hystrix.database.Database;
import com.kumuluz.ee.samples.circuit_breaker_hystrix.models.Order;

import javax.annotation.security.PermitAll;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("orders")
public class OrderResource {

    @GET
    @PermitAll
    public Response getAllOrders(@QueryParam("customerId") String customerId) {

        List&lt;Order&gt; orders = customerId == null ?
                Database.getOrders() :
                Database.findOrdersByCustomer(customerId);

        return Response.ok(orders).build();
    }

    @GET
    @Path("{orderId}")
    public Response getOrder(@PathParam("orderId") String orderId) {

        Order order = Database.getOrder(orderId);

        return order != null
                ? Response.ok(order).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addOrder(Order order) {

        Database.addOrder(order);

        return Response.noContent().build();
    }

    @DELETE
    @Path("{orderId}")
    public Response removeOrder(@PathParam("orderId") String orderId) {

        Database.deleteOrder(orderId);

        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-persistence/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" version="2.1"&gt;
    &lt;persistence-unit name="customers-jpa" transaction-type="RESOURCE_LOCAL"&gt;
        &lt;non-jta-data-source&gt;jdbc/CustomersDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.tutorial.customers.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source"
                      value="sql-scripts/init-customers.sql" /&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
</pre></body></html>




File path: websocket/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE websocket sample

&gt; Develop a websocket endpoint using standard WebSocket 1.1 API and pack it as a KumuluzEE microservice.

The objective of this sample is to show how to develop a websocket endpoint using standard WebSocket 1.1 API and pack it as a KumuluzEE microservice. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. To develop the websocket endpoint, you will use the standard WebSocket 1.1 API. 
Required knowledge: basic familiarity with websockets.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd websocket
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* HTML interface - http://localhost:8080
* Websocket endpoint - ws://localhost:8080/customer

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple websocket endpoint with a simple web user interface using standard WebSocket 1.1 API and pack it as a KumuluzEE microservice. 
We will develop a simple customer websocket endpoint, that returns a greeting for a customer.

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet and WebSocket)
* Implement the websocket endpoint using standard WebSocket 1.1 API
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-websocket-jetty` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-websocket-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the websocket endpoint

Implement the websocket example like so:

```java
@ServerEndpoint("/customer")
public class CustomerEndpoint {

    @OnMessage
    public String greetCustomer(String name) {
        System.out.print("Preparing greeting for customer '" + name + "' ...");
        return "Hello, " + name + "!";
    }
}
```

### Implement the web user interface

Create the directory `resources/webapp` and add the view `index.html` and the controller `websocket.js`.

**welcome.xhtml**
```html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
    &lt;title&gt;Websocket sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Websocket sample&lt;/h1&gt;
    &lt;div style="text-align: center;"&gt;
        &lt;form action=""&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        Responses
                        &lt;br/&gt;
                        &lt;textarea readonly="true" rows="6" cols="50" id="responseField"&gt;&lt;/textarea&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        &lt;input id="textField" name="name" type="text" placeholder="Enter name ..."&gt;
                        &lt;input onclick="sendMessage();" value="Send" type="button"&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/form&gt;
    &lt;/div&gt;
    &lt;br/&gt;
    &lt;div id="output"&gt;&lt;/div&gt;
    &lt;script language="javascript" type="text/javascript" src="websocket.js"&gt;&lt;/script&gt;
&lt;/body&gt;
```

**websocket.js**
```javascript
var wsUri = "ws://" + document.location.hostname + ":" + document.location.port + document.location.pathname + "customer";
var websocket = new WebSocket(wsUri);

websocket.onopen = function(evt) { onOpen(evt) };
websocket.onmessage = function(evt) { onMessage(evt) };
websocket.onerror = function(evt) { onError(evt) };
var output = document.getElementById("output");

function sendMessage() {
    websocket.send(textField.value);
}

function onOpen() {
    writeToScreen("Connected to " + wsUri);
}

function onMessage(event) {
    console.log("onMessage: " + event.data);
    responseField.innerHTML += event.data + "\n";
}

function onError(event) {
    writeToScreen('&lt;span style="color: red;"&gt;ERROR:&lt;/span&gt; ' + event.data);
}

function writeToScreen(message) {
    output.innerHTML += message + "&lt;br&gt;";
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-swagger/src/main/java/com/kumuluz/ee/samples/swagger/v1/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.swagger.v1;

/**
 * Customer class.
 *
 * @author Zvone Gazvoda
 * @since 2.5.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public Customer(String id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return "Customer {\n" +
                "  id='" + id + "',\n" +
                "  firstName='" + firstName + "',\n" +
                "  lastName='" + lastName + "'\n" +
                "}";
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/src/main/java/com.kumuluz.ee.samples.discovery.register/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Urban Malc
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-business-logic/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-orders&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;orders-business-logic&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
            &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-graphql-jpa-security/src/main/java/com/kumuluz/ee/samples/graphql_security/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.graphql_security;

import javax.persistence.*;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Entity
@Table(name = "customer")
@NamedQueries({
        @NamedQuery(
                name = "Customer.findCustomers",
                query = "SELECT c " +
                        "FROM Customer c"
        )
})
public class Customer implements Serializable {

    @Id
    private String id;
    @Column(name = "first_name")
    private String firstName;
    @Column(name = "last_name")
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-config-consul/src/main/java/com/kumuluz/ee/samples/kumuluz_config_consul/ConfigResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_consul;

import com.kumuluz.ee.configuration.utils.ConfigurationUtil;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                        "\"stringProperty\": \"%s\"," +
                        "\"booleanProperty\": %b," +
                        "\"integerProperty\": %d," +
                        "\"encodedProperty\": \"%s\"" +
                        "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty(),
                properties.getEncodedProperty());

        return Response.ok(response).build();
    }

    @GET
    @Path("/get")
    public Response get() {
        return Response.ok(ConfigurationUtil.getInstance().get("rest-config.string-property").orElse("nope")).build();
    }
}
</pre></body></html>




File path: kumuluzee-security-keycloak/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Security sample with Keycloak

&gt; Build a REST service which utilizes KumuluzEE Security to secure the resources with Keycloak using standard Java 
annotations and pack it as a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses KumuluzEE Security extension to
secure the REST resources. In this sample we develop a simple REST service, secure it using Keycloak and pack it as a 
KumuluzEE microservice. This tutorial will guide you through all the necessary steps. You will first add KumuluzEE 
dependencies into pom.xml. To develop the REST service, you will use the standard JAX-RS 2 API. Required knowledge: 
basic familiarity with JAX-RS 2, OAuth2, Keycloak and basic concepts of REST.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    
## Prerequisites

To run this sample you will need a Keycloak instance. Here is an example on how to quickly run a Keycloak instance with Docker:

```bash
$ docker run \
         -e KEYCLOAK_USER=&lt;USERNAME&gt; \
         -e KEYCLOAK_PASSWORD=&lt;PASSWORD&gt; \
         -p 8082:8080 jboss/keycloak
```

## Set-up Keycloack

Execute the steps neccessary to configure Keycloak. Steps are described below in subsection `Configure Keycloak`.

## Usage

The example uses Maven to build and run the microservice.

1. Build the sample using Maven:

    ```bash
    $ cd kumuluzee-security-keycloak
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to secure a simple REST microservice using Keycloak and pack it 
as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs),
 with KumuluzEE Security extension implemented by Keycloak. Therefore, first complete the existing JAX-RS sample 
 tutorial, or clone the JAX-RS sample code. 

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) 
or clone the existing sample
* Add Maven dependencies
* Configure Keycloak
* Implement security
* Build the microservice
* Run it
* Test security

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the 
dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured 
in `pom.xml`.

Add the `kumuluzee-cdi-weld`, `kumuluzee-security-keycloak` and `keycloak-jetty94-adapter` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.keycloak&lt;/groupId&gt;
    &lt;artifactId&gt;keycloak-jetty94-adapter&lt;/artifactId&gt;
    &lt;version&gt;${keycloak.version}&lt;/version&gt;
&lt;/dependency&gt;
```
 
Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Configure Keycloak

1. Log into the Keycloak (open browser http://localhost:8082) using your admin account and create a new realm named: `customers-realm`.

2. Create two new clients. One will be used to retrieve access tokens and the other one will be used only to verify issued tokens. Create the first client with Client ID `customers-app`. Leave the Protocol option set to openid-connect. After creating the client, verify, that the `Access Type` is set to `public`. Under `Root URL` and `Web origins` enter `http://localhost:8080`, under `Valid Redirect URIs` enter `http://localhost:8080/*`. Port 8080 points to your sample application port.

3. Create the second client with Client ID `customers-api`. Change the `Access Type` to `bearer-only`.


4. Create a user. Make sure to set `User Enabled` to `ON`. After adding the user, make sure that `Required User Actions` is empty. Go to Credentials and set the new password, and set `Temporary` to `OFF` before confirming.

5. Create a roles `admin` and `user`.

6. Open new user and go to `Role Mappings` and assign the Role `user` to new user.

7. Open client `customers-api` go to `Installation` and select `Installation/Keycloak OIDC JSON` and copy the content.

8. Create file `resources/config.yaml` and use the content from previous step and paste it to json element:

```yaml
kumuluzee:
  security:
      keycloak:
        json: '{"realm": "customers-realm",
                "bearer-only": true,
                "auth-server-url": "http://localhost:8080/auth",
                "ssl-required": "external",
                "resource": "customers-api"}'
```


### Implement security

First we have to enable the security using the `@DeclareRoles` annotation on the main application class of the REST 
service:

```java
@DeclareRoles({"user", "admin"})
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
```

Then take the Keycloak JSON configuration and set it as an environment variable by using the following key:

`KUMULUZEE_SECURITY_KEYCLOAK_JSON`

In this sample, we use environment variables to store the configuration; however the configuration can be also stored 
in a file or a config server. Please refer to KumuluzEE Config for more information. 

Add security constraints on JAX-RS resource:

```java
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    @PermitAll
    public Response getAllCustomers() {
        ...
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        ...
    }

    @POST
    @RolesAllowed("user")
    public Response addNewCustomer(Customer customer) {
        ...
    }

    @DELETE
    @Path("{customerId}")
    @RolesAllowed("user")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        ...
    }
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

### Test security

Try by creating a new customer first:

```bash
$ curl -X POST \
  http://localhost:8080/v1/customers \
  -H 'content-type: application/json' \
  -d '{
	"id": 1,
	"firstName": "John",
	"lastName": "Doe"
  }'
```

If everything was implemented correctly you should receive a 401 HTTP response error.

Now obtain an access token from Keycloak (**NOTE**: To do this, you will first have to retrieve the client ID your 
public client on Keycloak and the username and password of your Keycloak user):

```bash
$ curl -X POST \
  http://localhost:8082/auth/realms/customers-realm/protocol/openid-connect/token \
  -H 'content-type: application/x-www-form-urlencoded' \
  -d 'grant_type=password&amp;client_id=customers-app&amp;username=johndoe&amp;password=abc123'
```

After receiving the access token try again by creating a new customer, now with the access token in the request:
  
```bash
$ curl -X POST \
  http://localhost:8080/v1/customers \
  -H 'authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJUeWlBbFVPMTlKZm82T0N6NWE1T0pVWF94MDV0dndsT3BKVnRqUk4ycExBIn0.eyJqdGkiOiJhMjIxZDc5Yi01ZmY4LTRlMDEtYjVmOS1jODRkMGM1MDRmNjYiLCJleHAiOjE0OTU1MjQ0ODEsIm5iZiI6MCwiaWF0IjoxNDk1NTIzODgxLCJpc3MiOiJodHRwczovL3Rlc3Qtb3JjbC52bS5hcGltYW5hZ2VyLmNsb3VkLnNpL2F1dGgvcmVhbG1zL2t1bXVsdXotYXBpIiwiYXVkIjoia3VtdWx1ei1hcGktZnJvbnRlbmQiLCJzdWIiOiJhNDdkY2Y0Yy1hNTVlLTRjNTktODRkNy02NTkwMjM5NjlmZmUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdW11bHV6LWFwaS1mcm9udGVuZCIsIm5vbmNlIjoiZThiYzIxYmUtY2JiMC00NGYzLTg5NDktNGE5YmY2NDdiYTJiIiwiYXV0aF90aW1lIjoxNDk1NTIzODgwLCJzZXNzaW9uX3N0YXRlIjoiODRkYzkyYTAtZmI2Mi00YTkzLTg0NGItOTkwMzU4NjVjN2FlIiwiYWNyIjoiMSIsImNsaWVudF9zZXNzaW9uIjoiYWY0NzU1MWQtZGVjOS00YjA0LWIxZGItNTc3MTQ0Zjc4YjY5IiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMiIsImh0dHA6Ly9hcGkua3VtdWx1ei5jb20iLCJodHRwczovL3Rlc3Qtb3JjbC52bS5hcGltYW5hZ2VyLmNsb3VkLnNpIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJhcGlwdWJsaXNoZXIiLCJhZG1pbiIsImFwaWFkbWluIiwiYXBpdXNlciIsInVzZXIiXX0sInJlc291cmNlX2FjY2VzcyI6eyJyZWFsbS1tYW5hZ2VtZW50Ijp7InJvbGVzIjpbIm1hbmFnZS11c2VycyIsInZpZXctdXNlcnMiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJuYW1lIjoiQmVuamFtaW5uIEthc3RlbGljYyIsInByZWZlcnJlZF91c2VybmFtZSI6ImJlbmphbWluazIiLCJnaXZlbl9uYW1lIjoiQmVuamFtaW5uIiwiZmFtaWx5X25hbWUiOiJLYXN0ZWxpY2MiLCJlbWFpbCI6ImJlbmphbWluLmthc3RlbGljQGNsb3VkLnNpIn0.DteMq7VPuwrghiHE_f0DSlcznLkkoe2fVpXj6jgXCm2ei-f1TK2AtJ3bni-FndQcVYu6VE_-KDCVx0L4wMLsOLTVmrUKQDBzL04P51-h9bj5Oi7Ri0gAkQLmr0Ftg_Ixr5NGkvGAgmvmngZ0JIRWzue7QZdUU3XwJc8mZJYlRe9kqaSCg-ALvQiwe27I6u5jSyb0U8XM8fIzDj5ubwLqfeU_FopLrQoZ5ZjdFCgN_lR4KtlbkvKim1omyuOaPkJkddX3269KKT6veLkmRNxlOrznXtzVgeDwziSVFNoSTDEhqM7KjsfxE0tU2KqV7MLCzknWnjHW1A93_1_Em1MmRw' \
  -H 'content-type: application/json' \
  -d '{
	"id": 1,
	"firstName": "John",
	"lastName": "Doe"
  }'
```

A customer should now be created successfully and you should receive a 204 HTTP status code.
</pre></body></html>




File path: jax-ws/jax-ws-cxf/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;jax-ws&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;jax-ws-cxf&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JAX-WS cxf sample&lt;/name&gt;
    &lt;description&gt;JAX-WS usage sample with KumuluzEE cxf&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-ws-cxf&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;!-- Remove if you don't need cdi --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                            &lt;!--goal&gt;copy-dependencies&lt;/goal--&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.6&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;wsimport-from-jdk&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;wsimport&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;wsdlDirectory&gt;src/main/resources/wsdls&lt;/wsdlDirectory&gt;
                    &lt;wsdlFiles&gt;
                        &lt;wsdlFile&gt;customers.wsdl&lt;/wsdlFile&gt;
                    &lt;/wsdlFiles&gt;
                    &lt;keep&gt;true&lt;/keep&gt;
                    &lt;sourceDestDir&gt;target/generated-sources/apt&lt;/sourceDestDir&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: microservices-simple/orders/src/main/java/com/kumuluz/ee/samples/microservices/simple/OrdersApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.microservices.simple;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Tilen Faganel
 * @since 2.3.0
 */
@ApplicationPath("/")
public class OrdersApplication extends Application {
}
</pre></body></html>




File path: jpa/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/docker-compose.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">version: "3"
services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=customer
    ports:
      - "5432:5432"
  customer-service:
    image: customer-service:1.0.0
    environment:
      - KUMULUZEE_DATASOURCES0_CONNECTIONURL=jdbc:postgresql://postgres:5432/customer
    ports:
      - "8080:8080"
    depends_on:
      - postgres</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/ProgrammaticDiscoveryResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

import com.kumuluz.ee.discovery.enums.AccessType;
import com.kumuluz.ee.discovery.utils.DiscoveryUtil;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.net.URL;
import java.util.List;
import java.util.Optional;

/**
 * @author Urban Malc
 */
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Path("programmatic")
@RequestScoped
public class ProgrammaticDiscoveryResource {

    @Inject
    DiscoveryUtil discoveryUtil;

    @GET
    @Path("{serviceName}/{serviceVersion}/{environment}")
    public Response getInstances(@PathParam("serviceName") String serviceName,
                                 @PathParam("serviceVersion") String serviceVersion,
                                 @PathParam("environment") String environment) {

        Optional&lt;List&lt;URL&gt;&gt; instances = discoveryUtil.getServiceInstances(serviceName, serviceVersion, environment,
                AccessType.GATEWAY);

        if (instances.isPresent()) {
            return Response.ok(instances.get()).build();
        } else {
            return Response.noContent().build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-swagger/src/main/java/com/kumuluz/ee/samples/swagger/v1/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.swagger.v1;

import io.swagger.annotations.*;

import javax.enterprise.context.RequestScoped;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.ArrayList;
import java.util.List;

/**
 * CustomerResource class with openAPI
 *
 * @author Zvone Gazvoda
 * @since 2.5.0
 */
@Path("customers")
@Api
@Produces(MediaType.APPLICATION_JSON)
@RequestScoped
//@Secure
public class CustomerResource {

    @GET
    @ApiOperation(value = "Get customers list", tags = {"customers"}, notes = "Returns a list of customers.",
            authorizations = {
                    @Authorization(value = "application")})
    @ApiResponses(value = {
            @ApiResponse(
                    message = "List of customers",
                    code = 200,
                    response = Customer.class,
                    responseContainer = "List")
    })
    public Response getCustomers() {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");

        customers.add(c);

        return Response.status(Response.Status.OK).entity(customers).build();
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/beta/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8082</pre></body></html>




File path: kumuluzee-opentracing/customers/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: Customers Microservice
  server:
    http:
      port: 3000
  opentracing:
    jaeger:
      agent-host: localhost
      agent-port: 5775
    zipkin:
      agent-host: http://localhost
      agent-port: 9411

mp:
  opentracing:
    server:
      operation-name-provider: http-path
      skip-pattern: /openapi.*|/health.*</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/Student.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities;

import org.eclipse.microprofile.graphql.Ignore;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@NamedQueries(
        @NamedQuery(name = "getAllStudents", query="SELECT s FROM Student s")
)
public class Student extends Person {

    @Column(unique=true)
    private Integer studentNumber;

    @Column
    private LocalDate enrolled;

    public Student() {
        //needs empty constructor to deserialize object when performing mutations
    }

    public Integer getStudentNumber() {
        //getters are resolvers for fields
        return studentNumber;
    }

    public LocalDate getEnrolled() {
        return enrolled;
    }

    public void setStudentNumber(Integer studentNumber) {
        this.studentNumber = studentNumber;
    }

    @Ignore
    public void setEnrolled(LocalDate enrolled) {
        this.enrolled = enrolled;
    }
}
</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

import com.kumuluz.ee.security.annotations.Secure;

import javax.annotation.security.PermitAll;
import javax.annotation.security.RolesAllowed;
import javax.enterprise.context.RequestScoped;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Secure
public class CustomerResource {

    @GET
    @PermitAll
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    @RolesAllowed({"user"})
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    @RolesAllowed("user")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: https/src/main/java/jaxrs/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package jaxrs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: jax-ws/jax-ws-metro/src/main/java/com/kumuluz/ee/samples/jaxws/metro/GetCustomersResponseMessage.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxws.metro;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "GetCustomersResponseMessage",
        propOrder = {
            "customers"
        }
)
public class GetCustomersResponseMessage implements Serializable {

    @XmlElement(required = true)
    private CustomersList customers;

    public CustomersList getCustomers() {
        return customers;
    }

    public void setCustomers(CustomersList customers) {
        this.customers = customers;
    }
}
</pre></body></html>




File path: kumuluzee-microProfile-1.2/src/main/java/com/kumuluz/ee/samples/kumuluzee_microProfile_12/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_microProfile_12;

public class Customer {

    private int id;
    private String firstName;
    private String lastName;

    public Customer() {
    }

    public Customer(int id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: servlet/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE servlet sample

&gt; Develop a servlet using standard Servlet 3.1 API and pack it as a KumuluzEE microservice.

The objective of this sample is to show how to develop a servlet using standard Servlet 3.1 API and pack it as a KumuluzEE microservice. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml. To develop the servlet, you will use the standard Servlet 3.1 API. 
Required knowledge: basic familiarity with servlets.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd servlet
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
     -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* Servlet - http://localhost:8080/CustomerServlet

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple servlet using standard Servlet 3.1 API and pack it as a KumuluzEE microservice. 
We will develop a simple Customer servlet with the following resources:
* GET http://localhost:8080/CustomersServlet - list of all customers

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet)
* Implement the service using standard Servlet 3.1 API
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core` and `kumuluzee-servlet-jetty` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the servlet

Implement the servlet, for example, which will return all customers by default on GET request:

```java
@WebServlet("CustomerServlet")
public class CustomerServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List&lt;Customer&gt; customers = Database.getCustomers();
        if (customers == null || customers.isEmpty())
            response.getWriter().println("No customers found.");
        else {
            for (Customer customer : customers) {
                response.getWriter().println(customer.toString());
                response.getWriter().println();
            }
        }
    }
}
```

Implement the `Customer` Java class, which is a POJO:
```java
public class Customer {

    private String id;

    private String firstName;

    private String lastName;

    // TODO: implement get and set methods
}
```

In the example above, we use `Database` class to access data. A sample implementation which simulates persistance layer, can be implemented as follows:

```java
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-security-cdi-keycloak/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/delta/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: jax-ws/jax-ws-metro/src/main/java/com/kumuluz/ee/samples/jaxws/metro/CustomersList.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jaxws.metro;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "CustomersList",
        propOrder = {
            "customer"
        }
)
public class CustomersList implements Serializable {

    @XmlElement(required = true)
    private List&lt;Customer&gt; customer;

    public List&lt;Customer&gt; getCustomer() {
        return customer;
    }

    public void setCustomer(List&lt;Customer&gt; customer) {
        this.customer = customer;
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-reactive-vertx-listener&lt;/artifactId&gt;

    &lt;name&gt;Listen to Vert.x event bus&lt;/name&gt;
    &lt;description&gt;Listen to Vert.x event bus using KumuluzEE Reactive Vert.x&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.reactive&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-reactive-vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8-jre-alpine

RUN mkdir /app

WORKDIR /app

ADD ./customers-api/target/customers-api-1.0.0-SNAPSHOT.jar /app

EXPOSE 8080

CMD ["java", "-jar", "customers-api-1.0.0-SNAPSHOT.jar"]</pre></body></html>




File path: jul/src/main/java/com/kumuluz/ee/samples/jul/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jul;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-tutorial-orders&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;orders-api&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
            &lt;artifactId&gt;orders-business-logic&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.swagger&lt;/groupId&gt;
            &lt;artifactId&gt;swagger-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.swagger&lt;/groupId&gt;
            &lt;artifactId&gt;swagger-jersey2-jaxrs&lt;/artifactId&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;
                    &lt;artifactId&gt;jersey-container-servlet-core&lt;/artifactId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("/v1")
public class ConfigApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-config/src/main/java/com/kumuluz/ee/samples/kumuluz_config/ConfigResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                        "\"stringProperty\": \"%s\"," +
                        "\"booleanProperty\": %b," +
                        "\"integerProperty\": %d," +
                        "\"encodedProperty\": \"%s\"" +
                        "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty(),
                properties.getEncodedProperty()
        );

        return Response.ok(response).build();
    }
}
</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigProperties.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;
import com.kumuluz.ee.configuration.cdi.ConfigValue;

import javax.enterprise.context.ApplicationScoped;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    @ConfigValue(watch = true)
    private String stringProperty;

    private Boolean booleanProperty;

    private Integer integerProperty;

    @ConfigValue(watch = true)
    private String encodedProperty;

    public String getStringProperty() {
        return stringProperty;
    }

    public void setStringProperty(String stringProperty) {
        this.stringProperty = stringProperty;
    }

    public Boolean getBooleanProperty() {
        return booleanProperty;
    }

    public void setBooleanProperty(Boolean booleanPropertysomeBoolean) {
        this.booleanProperty = booleanPropertysomeBoolean;
    }

    public Integer getIntegerProperty() {
        return integerProperty;
    }

    public void setIntegerProperty(Integer integerProperty) {
        this.integerProperty = integerProperty;
    }

    public String getEncodedProperty() {
        return encodedProperty;
    }

    public void setEncodedProperty(String encodedProperty) {
        this.encodedProperty = encodedProperty;
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/dtos/Error.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.dtos;

public class Error {

    private Integer status;
    private String code;
    private String message;

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

}

</pre></body></html>




File path: kumuluzee-cors/src/main/java/com/kumuluz/ee/samples/cors/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.cors;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * Created by zvoneg on 01/08/17.
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Kafka consumer with Schema Registry

This sample's focus is on using Schema Registry with Kafka. For Kafka basics, see the `kumuluzee-streaming-kafka` sample.

&gt; After initial project build, you should cd to kumuluzee-streaming-kafka-registry-consumer to run the avro and schema registry plugins from the consumer module.

## Additional maven dependencies
We need Avro and record serializer:
```
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
    &lt;artifactId&gt;avro&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.confluent&lt;/groupId&gt;
    &lt;artifactId&gt;kafka-avro-serializer&lt;/artifactId&gt;
&lt;/dependency&gt;
```

## Components
1. Confluent Schema Registry for schema management and validation
2. Landoop Schema Registry UI for Schema Registry visuals
3. Kafdrop UI to check Kafka topics, consumers and records
4. `avro-maven-plugin` to generate .java POJOs from .avsc schemas
5. `kafka-schema-registry-maven-plugin` to register, validate and download schemas.

## Typical development flow (consumer)
1. Download the latest schema from registry with `mvn schema-registry:download`. A file called `pricing-avro-value.avsc` will appear in `src/main/resources/schemas/avro`.
2. Generate .java POJO with `avro-maven-plugin` (with `mvn compile`)
3. Use the generated POJO in Kafka Consumer (`TestConsumer.java`).

Consumer configuration is the same as regular Kafka consumer with added schema registry URL and enabling `specific-avro-reader` (by default, it deserializes to a generic record). We use `KafkaAvroDeserializer` to deserialize Avro format to POJO.
```
consumer-avro:
    bootstrap-servers: localhost:29092
    group-id: group1
    enable-auto-commit: true
    auto-commit-interval-ms: 1000
    auto-offset-reset: latest
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    schema-registry-url: http://localhost:8081
    specific-avro-reader: true
```

## Try it
Run the producer EeApplication and make a POST request with some data:
```
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"price":"0.00","priceExTax":"0.00","taxAmount":"0.00","basePrice":"0.00","priceAmount":"0.00","description":"Desc"}' \
  http://localhost:8080/produce
```
On the consumer side, you should see the message consumed:
&gt; INFO  Consumed message: offset = 3, key = 2b78ede6-9fb5-4f7c-8f35-e0343362c240, value = {"price": "0.00", "priceExTax": "0.00", "basePrice": "0.00", "taxAmount": "0.00", "description": "Desc"}

Finally, you can get the consumed messages via REST API:
```
curl -X GET http://localhost:8079/consume
``` 

## Schema evolution
When producers update their schema, simply pull down the latest schema and rebuild the consumer. Follow the [compatibility guide](https://docs.confluent.io/current/schema-registry/avro.html) for the deployment strategy.

Now that we have successfully consumed a record, continue to the [streams module](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams) README.
</pre></body></html>




File path: kumuluzee-microProfile-1.2/src/main/java/com/kumuluz/ee/samples/kumuluzee_microProfile_12/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_microProfile_12;

import com.kumuluz.ee.jwt.auth.feature.JWTRolesAllowedDynamicFeature;
import com.kumuluz.ee.jwt.auth.filter.JWTAuthorizationFilter;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;
import java.util.HashSet;
import java.util.Set;

@ApplicationPath("v1")
public class CustomerApplication extends Application {

    @Override
    public Set&lt;Class&lt;?&gt;&gt; getClasses() {

        Set&lt;Class&lt;?&gt;&gt; classes = new HashSet&lt;&gt;();

        // microprofile jwt auth filters
        classes.add(JWTAuthorizationFilter.class);
        classes.add(JWTRolesAllowedDynamicFeature.class);

        // resources
        classes.add(CustomerResource.class);

        return classes;
    }

}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/gamma/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-opentracing-tutorial&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;gamma&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE OpenTracing tutorial - gamma&lt;/name&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/beta/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk


</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams/src/main/java/com/kumuluz/ee/samples/kafka/streams/WordCountStreamsBuilder.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.streams;

import com.kumuluz.ee.streaming.common.annotations.StreamProcessor;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Produced;

import javax.enterprise.context.ApplicationScoped;
import java.util.Arrays;

/**
 * @author Matija Kljun
 */
@ApplicationScoped
public class WordCountStreamsBuilder {

    @StreamProcessor(id = "word-count", autoStart = false)
    public StreamsBuilder wordCountBuilder() {

        StreamsBuilder builder = new StreamsBuilder();

        // Serializers/deserializers (serde) for String and Long types
        final Serde&lt;String&gt; stringSerde = Serdes.String();

        // Construct a `KStream` from the input topic "streams-plaintext-input", where message values
        // represent lines of text (for the sake of this example, we ignore whatever may be stored
        // in the message keys).
        KStream&lt;String, String&gt; textLines = builder.stream("in",
                Consumed.with(stringSerde, stringSerde));

        KTable&lt;String, String&gt; wordCounts = textLines
                // Split each text line, by whitespace, into words.
                .flatMapValues(value -&gt; Arrays.asList(value.toLowerCase().split("\\W+")))
                // Group the text words as message keys
                .groupBy((key, value) -&gt; value)
                // Count the occurrences of each word (message key).
                .count()
                .mapValues((key, value) -&gt; value.toString());

        // Store the running counts as a changelog stream to the output topic.
        wordCounts.toStream().to("out", Produced.with(stringSerde, stringSerde));

        return builder;

    }
}</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/beans/LecturerBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.beans;

import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;
import com.kumuluz.ee.samples.graphql_advanced.entities.Lecturer;
import com.kumuluz.ee.samples.graphql_advanced.entities.connections.LecturerConnection;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

@RequestScoped
public class LecturerBean {

    @PersistenceContext
    private EntityManager entityManager;

    public List&lt;Lecturer&gt; getLecturerList(QueryParameters queryParameters) {
        //use pagination, but do not return any metadata
        return JPAUtils.queryEntities(entityManager, Lecturer.class, queryParameters);
    }

    public LecturerConnection getLecturerConnection(QueryParameters queryParameters) {

        List&lt;Lecturer&gt; result = JPAUtils.queryEntities(entityManager, Lecturer.class, queryParameters);
        long resultCount = JPAUtils.queryEntitiesCount(entityManager, Lecturer.class, queryParameters);

        return new LecturerConnection(result, resultCount);
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/src/main/java/com.kumuluz.ee.samples.discovery.register/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Urban Malc
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: jul/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-persistence/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" version="2.1"&gt;
    &lt;persistence-unit name="orders-jpa" transaction-type="RESOURCE_LOCAL"&gt;
        &lt;non-jta-data-source&gt;jdbc/OrdersDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.tutorial.orders.Order&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source"
                      value="sql-scripts/init-orders.sql" /&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/order-hpa.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: order-deployment
  selfLink: /apis/autoscaling/v1/namespaces/kumuluzee-blog/horizontalpodautoscalers/order-deployment
spec:
  maxReplicas: 4
  minReplicas: 1
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: order-deployment
  targetCPUUtilizationPercentage: 50
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/graphql/LecturerResolvers.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.graphql;

import com.kumuluz.ee.graphql.mp.utils.GraphQLUtils;
import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.QueryStringDefaults;
import com.kumuluz.ee.samples.graphql_advanced.beans.LecturerBean;
import com.kumuluz.ee.samples.graphql_advanced.entities.Lecturer;
import com.kumuluz.ee.samples.graphql_advanced.entities.connections.LecturerConnection;
import org.eclipse.microprofile.graphql.GraphQLApi;
import org.eclipse.microprofile.graphql.Query;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.util.List;

@GraphQLApi
@ApplicationScoped
public class LecturerResolvers {

    @Inject
    private LecturerBean lecturerBean;

    @Inject
    private QueryStringDefaults qsd;

    @Query
    public List&lt;Lecturer&gt; getLecturers(String sort, String filter) {

        QueryParameters qp = GraphQLUtils.queryParametersBuilder()
                .withQueryStringDefaults(qsd)
                .withOrder(sort)
                .withFilter(filter)
                .build();

        return lecturerBean.getLecturerList(qp);
    }

    @Query
    public LecturerConnection getLecturersConnection(Long limit, Long offset, String sort, String filter) {

        QueryParameters qp = GraphQLUtils.queryParametersBuilder()
                .withQueryStringDefaults(qsd)
                .withLimit(limit)
                .withOffset(offset)
                .withOrder(sort)
                .withFilter(filter)
                .build();

        return lecturerBean.getLecturerConnection(qp);
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/alpha/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-opentracing-tutorial&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;artifactId&gt;alpha&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE OpenTracing tutorial - alpha&lt;/name&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
            &lt;version&gt;2.3.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.activation&lt;/groupId&gt;
            &lt;artifactId&gt;activation&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config-mp/src/main/java/com/kumuluz/ee/samples/ConfigApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Urban Malc
 * @author Jan Meznarič
 * @since 2.5.0
 */
@ApplicationPath("/v1")
public class ConfigApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/CustomConfigurationDecoder.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.ConfigurationDecoder;

import javax.xml.bind.DatatypeConverter;

/**
 * @author Jan Meznarič
 * @since 3.2.1
 */
public class CustomConfigurationDecoder implements ConfigurationDecoder {

    @Override
    public boolean shouldDecode(String key) {
        if ("rest-config.encoded-property".equals(key)) {
            return true;
        }
        return false;
    }

    @Override
    public String decode(String key, String value) {
        return new String(DatatypeConverter.parseBase64Binary(value));
    }
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: "grpc-server"
  server:
    http:
      port: 8080
  datasources:
    - jndi-name: jdbc/UsersDB
      connection-url: jdbc:postgresql://192.168.99.100:5432/users
      username: postgres
      password: postgres
  grpc:
    server:
      http:
        port: 8081
      auth:
        public-key: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDW6Angsf0Ry+GFD5HPstdcuaHJU5KhpT+gkzCCx7zZAbKRaEQexaTA9nPXK2Uzk2JqWTbZXSQYX2kBzYeiiedMpW6wvTaZWL9QhGjEnA9o97oNV1G5wQHKL/8FsvLXqt/81BCeZzWPDGvLNuU9l0qK3/xXL3efaZYPsZkB2AyZiQIDAQAB
        issuer: http://localhost</pre></body></html>




File path: https/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JAX-RS REST service over HTTPS sample

&gt; Develop a REST service using standard JAX-RS 2 API, expose it over HTTPS and pack it as a KumuluzEE microservice.

The objective of this sample is to show how to develop a REST service using standard JAX-RS 2 API, expose it over HTTPS 
and pack it as a KumuluzEE microservice. The tutorial will guide you through the necessary steps. You will add KumuluzEE 
dependencies into pom.xml. To develop the REST service, you will use the standard JAX-RS 2 API. Required knowledge: 
basic familiarity with JAX-RS 2 and basic concepts of REST and JSON.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

In order to run this sample you will have to set the following configuration parameters:
- __kumuluzee.server.https.keystore-path__: \&lt;path_to_project\&gt;/src/main/resources/keystore.jks
- __kumuluzee.server.https.keystore-password__: changeit
- __kumuluzee.server.https.key-password__: changeit
- __kumuluzee.server.https.enabled__: true

The default HTTPS port is 8443. To specify a different port use:
- __kumuluzee.server.https.ssl-port__: \&lt;ssl_port\&gt;

Other TLS/SSL configuration properties:
- __kumuluzee.server.https.http2__: true
- __kumuluzee.server.https.key-aliase__: test
- __kumuluzee.server.https.ssl_protocols__: TLSv1.1,TLSv1.2
- __kumuluzee.server.https.ssl-ciphers__: &gt; 
        TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
        TLS_DHE_RSA_WITH_AES_128_CBC_SHA256

More details [KumuluzEE TLS/SSL support](https://github.com/kumuluz/kumuluzee/wiki/TLS-SSL-support).

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd https
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource:
    - http://localhost:8080/v1/customers
    - https://localhost:\&lt;ssl_port\&gt;/v1/customers

To shut down the example simply stop the processes in the foreground.

## Tutorial

We will follow these steps:
* Add maven dependencies
* Implement microservice
* Build
* Run microservice

### Add maven dependencies

To implement microservice add the following dependencies
```xml
  &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
 ```
 
 Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:
 
 ```xml
 &lt;build&gt;
     &lt;plugins&gt;
         &lt;plugin&gt;
             &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
             &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
             &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
             &lt;executions&gt;
                 &lt;execution&gt;
                     &lt;id&gt;package&lt;/id&gt;
                     &lt;goals&gt;
                         &lt;goal&gt;repackage&lt;/goal&gt;
                     &lt;/goals&gt;
                 &lt;/execution&gt;
             &lt;/executions&gt;
         &lt;/plugin&gt;
     &lt;/plugins&gt;
 &lt;/build&gt;
 ```
 
 or exploded:
 
 ```xml
 &lt;build&gt;
     &lt;plugins&gt;
         &lt;plugin&gt;
             &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
             &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
             &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
             &lt;executions&gt;
                 &lt;execution&gt;
                     &lt;id&gt;package&lt;/id&gt;
                     &lt;goals&gt;
                         &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                     &lt;/goals&gt;
                 &lt;/execution&gt;
             &lt;/executions&gt;
         &lt;/plugin&gt;
     &lt;/plugins&gt;
 &lt;/build&gt;
 ```
 
 ### Build the microservice and run it
 
 To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-version/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Version example

This sample demonstrates how to use KumuluzEE Version.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
## Prerequisites

This sample is based on the [KumuluzEE JAX-RS sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs),
with only a few new dependencies, plugins and files.

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd jax-rs
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* The version endpoint will be by default accessible at http://localhost:8080/version

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will show you how to enable KumuluzEE Version.

### Add Maven dependencies

Dependencies are the same as in the jax-rs example with the addition of:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-json-p-jsonp&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.version&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-version&lt;/artifactId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

### Plugins

We will be using the maven resources plugin to get the group_id, maven_version etc. 
and also the maven buildnumber plugin, to get the git commit id. We only need to specify the buildnumber plugin in pom.xml

```xml
&lt;build&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;buildnumber-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${buildnumber-maven-plugin.version}&lt;/version&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;phase&gt;validate&lt;/phase&gt;
                &lt;goals&gt;
                    &lt;goal&gt;create&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;configuration&gt;
            &lt;doCheck&gt;false&lt;/doCheck&gt;
            &lt;doUpdate&gt;false&lt;/doUpdate&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
&lt;/build&gt;
```

You can set doCheck to true, to make building fail if there are any locally modified files. Setting doUpdate to true
will update your local repository from remote before building.

### Adding VERSION.json

We have to add a file, that will be edited by the plugins and from which versioning will be read from.

We will create a VERSION.json file in the resources folder with the following content:

```json
{
  "maven_group_id": "${project.groupId}",
  "maven_artifact_id": "${project.parent.artifactId}",
  "maven_version": "${project.version}",
  "project_artifactId": "${project.artifactId}",
  "git_commit_id": "${buildNumber}"
}
```

These fields will then be exposed by the servlet. When running this example in exploded format, the maven buildnumber plugin 
fills the value with key "git_commit_id" with "", which gets logged as an error. This can be avoided by running the
example in an Uber-jar format.

### Enabling version servlet

The servlet exposing version information have to be manually enabled with the configuration key 
`kumuluzee.version.endpoint`.

```yaml
kumuluzee:
  version:
    endpoint: /version
```

### Setting custom values

We can set custom values that will then be exposed by the servlet for example we set the docker image name in
 config.yaml file in resources folder with:

```yaml
kumuluzee:
  version:
    endpoint: /version
    values:
      docker-image-name: my_docker_image
```

This sets the "docker_image_name" key to `m̀y_docker_image`. This can be overwritten with an environment variable
KUMULUZEE_VERSION_VALUES_DOCKERIMAGENAME.

### Setting resources folder

We have to set the resources folders, so that the plugins know in which folders to look for files that have fields that
need to be filled.

```xml
&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;filtering&gt;false&lt;/filtering&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
            &lt;includes&gt;
                &lt;include&gt;VERSION.json&lt;/include&gt;
            &lt;/includes&gt;
            &lt;targetPath&gt;.&lt;/targetPath&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
```

Note that if you have a custom name of the VERSION.json file, you also have to change it here.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery &amp;mdash; register service with etcd 

&gt; Develop a REST KumuluzEE microservice and register it with etcd.

The objective of this sample is to show how to register a REST service with etcd using KumuluzEE Discovery extension.
This tutorial will guide you through all the necessary steps. You will add KumuluzEE dependencies into pom.xml.
You will use existing JAX-RS sample, described [here](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs).
Required knowledge: basic familiarity with JAX-RS and basic concepts of REST and JSON; basic familiarity with etcd.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need an etcd instance. Note that such setup with only one etcd node is not viable for 
production environments, but only for developing purposes. Here is an example on how to quickly run an etcd instance 
with docker:

   ```bash
    $ docker run -d -p 2379:2379 \
      --name etcd \
      --volume=/tmp/etcd-data:/etcd-data \
      quay.io/coreos/etcd:latest \
      /usr/local/bin/etcd \
      --name my-etcd-1 \
      --data-dir /etcd-data \
      --listen-client-urls http://0.0.0.0:2379 \
      --advertise-client-urls http://0.0.0.0:2379 \
      --listen-peer-urls http://0.0.0.0:2380 \
      --initial-advertise-peer-urls http://0.0.0.0:2380 \
      --initial-cluster my-etcd-1=http://0.0.0.0:2380 \
      --initial-cluster-token my-etcd-token \
      --initial-cluster-state new \
      --auto-compaction-retention 1 \
      -cors="*"
   ```

## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd discovery-samples/discovery-register
    $ mvn clean package
    ```

2. Start local etcd instance in another terminal:

    ```bash
    $ etcd
    ```

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8081/v1/customers

The application is registered with etcd. You can discover it using one of the discover samples:
* [discover-etcd-servlet sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-discover-servlet)
* [discover-etcd-jaxrs sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs)

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to register KumuluzEE microservice with etcd. 
We will use existing [sample Customer REST service](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) with the following resources:
* GET http://localhost:8081/v1/customers - list of all customers 
* GET http://localhost:8081/v1/customers/{customerId} – details of customer with ID {customerId}
* POST http://localhost:8081/v1/customers – add a customer
* DELETE http://localhost:8081/v1/customers/{customerId} – delete customer with ID {customerId}

We will follow these steps:
* Import a Maven sample, mentioned above, in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependency to KumuluzEE Discovery extension
* Annotate JAX-RS Application class with @RegisterService annotation
* Build the microservice
* Run it

### Add Maven dependencies

Add the `kumuluzee-discovery-etcd` dependency to the sample:
```xml
&lt;dependencies&gt;
    ...
    
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```
Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Annotate JAX-RS Application

Add the `@RegisterService` annotation to JAX-RS Application class (CustomerApplication.java):

```java
@RegisterService
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
```

### Add required configuration for the service discovery

You can add configuration using any KumuluzEE configuration source.

For example, you can use config.yml file, placed in resources folder:
```yaml
kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8081
    http:
      port: 8081
  discovery:
    etcd:
      hosts: http://192.168.99.100:2379
    ttl: 20
    ping-interval: 15
```

Port 8081 is used because we want to run another microservice on default port, which discovers this service on port 8080.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-config/src/main/resources/META-INF/services/com.kumuluz.ee.configuration.ConfigurationDecoder
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">com.kumuluz.ee.samples.kumuluz_config.CustomConfigurationDecoder</pre></body></html>




File path: kumuluzee-rest-client/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8081

  rest-client:
    propagate-headers: Authorization
    registrations:
      - class: com.kumuluz.ee.samples.kumuluzee_rest_client.api.CustomerApi
        url: http://localhost:8080/v1
</pre></body></html>




File path: kumuluzee-amqp-rabbitmq/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE AMQP sample with RabbitMQ

&gt; Develop messaging with RabbitMQ and pack it as a KumuluzEE microservice.

The objective of this sample is to demonstrate how to develop messaging using RabbitMQ. The tutorial guides you through the development of RabbitMQ publisher and consumer. You will add KumuluzEE dependencies into pom.xml. You will recieve messages through your REST service and will then send them to the RabbitMQ broker, which will deliver them to appropriate consumers.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
3. RabbitMQ:
    * If you have installed RabbitMQ, you can check the version by typing the following in a RabbitMQ command line:
    
        ```bash
        $ rabbitmqctl status
        ```
		
	* Or run RabbitMQ with docker:
	
	```bash
        $ docker run -d --hostname my-rabbit --name some-rabbit -p 5672:5672 rabbitmq:3
        ```

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-amqp-rabbitmq
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource page - http://localhost:8080/v1/

To shut down the example simply stop the processes in the foreground.

## Tutorial
This tutorial will guide you through the steps required to create a simple Messaging microservice which uses RabbitMQ and pack it as a KumuluzEE microservice. We will extend the existing [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs)
 with RabbitMQ messaging methods. Therefore, first complete the existing JAX-RS sample tutorial, or clone the JAX-RS sample code.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JAX-RS REST sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jax-rs) or clone the existing sample
* Ensure access to RabbitMQ broker
* Add Maven dependencies
* Implement messaging using RabbitMQ
* Build the microservice
* Run it

### Add Maven dependencies

Since your existing starting point is the existing KumuluzEE JAX-RS REST sample, you should already have the dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-rs-jersey` configured in the `pom.xml`.

Add the `kumuluzee-cdi-weld` and `kumuluzee-amqp-rabbitmq` dependencies:
```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-amqp-rabbitmq&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee.rabbitmq.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Configure RabbitMQ broker

In the directory `resources` edit the file `config.yaml` by adding the following RabbitMQ properties:

```yaml
kumuluzee:
  amqp:
    rabbitmq:
      hosts:
        - name: MQtest
          url: localhost
          username: guest
          password: guest
          exchanges:
            - name: directExchange
              type: direct
        - name: MQtest2
          queues:
          - name: testQueue
      properties:
        - name: testProperty
          headers:
            title: text
          timestamp: true
```

### Implement message producer
Create a new class called `MessageProducer` and inject a RabbitMQ channel into it with the `@AMQPChannel` annotation.
Then we can use `RestMessage` parameters to publish a message to a RabbitMQ broker.
```java
@ApplicationScoped
public class MessageProducer {

    @Inject
    @AMQPChannel("MQtest")
    private Channel channel;

    public void sendRestMessage(RestMessage restMessage) {
        try {
            channel.basicPublish(restMessage.getExchange(), restMessage.getKey(), null,
                    restMessage.getMessage().getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    ...
}
```
This is not that convenient, as we have to have a specific structure that we are getting our data from. Another way of sending data is with `@AMQPProducer` annotation. All we need to do is to return the object we want to send. In this example we are sending a string "I'm red".
```java
    @AMQPProducer(host = "MQtest", exchange = "directExchange", key = "red", properties = "textPlain")
    public String sendRed() {
        return "I'm Red!";
    }
```
Instead of returning any object, we could return a specific object Message, to which we can set the host, exchange, keys, body and properties, which we cannot predefine. In this example our method will create a random number and based on it, it will choose to which consumer it will send a message. It is also good to know that Message parameters will override annotation parameters.
```java
    @AMQPProducer
    public Message sendFullMessage() {
        Message message = new Message();
        ExampleObject exampleObject = new ExampleObject();
        exampleObject.setContent("I'm an object in a special message");

        if (Math.random() &lt; 0.5) {
            message.host("MQtest")
                    .key(new String[]{"object"})
                    .exchange("directExchange")
                    .basicProperties(MessageProperties.BASIC);
        } else {
            message.host("MQtest2")
                    .key(new String[]{"testQueue"})
                    .basicProperties("testProperty");
        }

        return message.body(exampleObject);
    }
```
### Implement message consumer
Create a new class `MessageConsumer` and annotate it with `@ApplicationScoped` annotation. Then create a new method, annotate it with `@AMQPConsumer` and add the parameter of the type that we nant to receive. 

After we have created our method, we can print out the message we recieved.
```java
@ApplicationScoped
public class MessageConsumer {

    private static Logger log = Logger.getLogger(MessageConsumer.class.getName());

    @AMQPConsumer(host = "MQtest", exchange = "directExchange", key = "red")
    public void listenToRed(String message) {
        log.info("Recieved message: " + message + " from direct exchange with the red key.");
    }
    ...
}
```

### Implement REST Service

Create a new REST object `RestMessage` which we will use to get information from the HTTP request.

* Add fields `String exchange`, `String key` and `String message`.

```java
public class RestMessage {

    private String exchange;
    private String key;
    private String message;
    
    // getters and setters
}
```

Make `QueueResource` class a CDI bean by adding `@ApplicationScoped` annotation. Then create three endpoints which we will use to send messages.

```java
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@ApplicationScoped
public class QueueResource {

    @Inject
    private MessageProducer messageProducer;

    @POST
    public Response messageToSend(RestMessage message) {
        messageProducer.sendRestMessage(message);
        return Response.ok("\"RestMessage sent.\"").build();
    }

    @GET
    @Path("/red")
    public Response getRed() {
        messageProducer.sendRed();
        return Response.ok("\"Red message sent.\"").build();
    }

    @GET
    @Path("/object")
    public Response getObject() {
        messageProducer.sendObject();
        return Response.ok("\"Object message sent.\"").build();
    }

    @GET
    @Path("/message")
    public Response getMessageObjectCustomProperty() {
        messageProducer.sendObjectMessageCustomProperty();
        return Response.ok("\"Object message with custom properties sent.\"").build();
    }

    @GET
    @Path("/queue")
    public Response getMessageQueue() {
        messageProducer.sendToQueue();
        return Response.ok("\"Object message with custom properties sent.\"").build();
    }

    @GET
    @Path("/fullMessage")
    public Response getFullMessage() {
        messageProducer.sendFullMessage();
        return Response.ok("\"Object message sent to a random consumer.\"").build();
    }
}
```

Example requests:  
- POST: http://localhost:8080/v1/ Body:
```json
{
    "exchange": "directExchange", 
    "key": "red", 
    "message": "This is a message."
}
```
- GET: http://localhost:8080/v1/red  
- GET: http://localhost:8080/v1/object  
- GET: http://localhost:8080/v1/message  
- GET: http://localhost:8080/v1/queue  
- GET: http://localhost:8080/v1/fullMessage  

### Configure CDI

Create the directory `resources/META-INF`. In this directory create the file `beans.xml` with the following content to enable CDI:

```xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;
```

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-logs-jul/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_logs;

import com.kumuluz.ee.logs.cdi.Log;
import com.kumuluz.ee.logs.cdi.LogParams;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Log(LogParams.METRICS)
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    @Log(value = LogParams.METRICS, methodCall = false)
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="all"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-openapi-mp/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-openapi-mp&lt;/artifactId&gt;

    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE OpenAPI MicroProfile sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE OpenAPI usage sample with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-openapi-mp.version&gt;1.4.0&lt;/kumuluzee-openapi-mp.version&gt;
        &lt;kumuluzee-config-mp.version&gt;1.4.1&lt;/kumuluzee-config-mp.version&gt;
        &lt;kumuluzee-logs.version&gt;1.4.2&lt;/kumuluzee-logs.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.openapi&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-openapi-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-openapi-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.openapi&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-openapi-mp-ui&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-openapi-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev
  config:
    zookeeper:
      hosts: localhost:2181

rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
  encoded-property: ZW5jb2RlZCBwcm9wZXJ0eQ==
</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/InvoicesResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.jcache.rest;

import com.kumuluz.ee.samples.jcache.rest.lib.InvoiceData;
import com.kumuluz.ee.samples.jcache.rest.services.InvoiceService;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author cen1
 * @since 3.6.0
 */
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/invoices")
public class InvoicesResource {

    @Inject
    private InvoiceService invoiceService;

    //JCache annotations
    @POST
    @Path("/{id}")
    public Response addData(@PathParam("id") String id, InvoiceData in) {
        InvoiceData data = invoiceService.putInvoice(id, in);
        return Response.ok(data).build();
    }

    @GET
    @Path("/{id}")
    public Response getData(@PathParam("id") String id) {
        InvoiceData data = invoiceService.getInvoice(id);
        return Response.ok(data).build();
    }

    //Programmatic API
    @GET
    @Path("/{id}/default")
    public Response getInvoicesDefault(@PathParam("id") String id) {
        InvoiceData data = invoiceService.getInvoiceDefault(id);
        return Response.ok(data).build();
    }

    @GET
    @Path("/{id}/my")
    public Response getInvoicesMy(@PathParam("id") String id) {
        InvoiceData data = invoiceService.getInvoiceMy(id);
        return Response.ok(data).build();
    }
}
</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE migrations with Liquibase

&gt; Create a simple REST service that uses Liquibase for database schema migrations.

The goal of this sample is to demonstrate the use of KumuluzEE Database Schema Migrations with Liquibase. 
The tutorial will walk you through developing database schema migrations at application startup and show you 
how to perform database schema migrations while the application is already running. 
Required knowledge: basic familiarity with JPA, CDI and basic concepts of REST and JSON.

## Requirements

To run this sample, you will need the following:

1. Java 11 (or newer), you can use any implementation:
    * If you have Java installed, you can check the version by typing the following in a command line:
    ```bash
    java -version   
    ```
2. Maven 3.2.1 (or newer):
    * If you have Maven installed, you can check the version by typing the following in a command line:
    ```bash
    mvn -version
    ```
3. Git:
    * If you have Git installed, you can check the version by typing the following in a command line:
    ```bash
    git --version
    ```

## Prerequisites

To run this sample, you need to set up a local PostgreSQL database:

+ **database host:** localhost:5432
+ **database name:** customers
+ **user:** postgres
+ **password:** postgres

The required tables will be created automatically when you run the sample.

You can run the database in a Docker:
```
docker run -d --name books-db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=postgres -p 5432:5432 postgres:latest
```

## Usage

The sample uses Maven to build and run the microservice.

1. Build the sample using Maven:
    ```bash
    cd kumuluzee-migrations-liquibase
    mvn clean package
    ```
2. Start the local PostgreSQL DB:
    ```bash
    docker run -d --name postgres -e POSTGRES_DB=books -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:latest
    ```
3. Run the sample:
    * Uber-jar:
    ```bash
    java -jar target/${project.build.finalName}.jar
    ```

    * Exploded:
    ```bash
    java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
   
The database tables will be created during tutorial.

The application/service can be accessed via the following URLs:
+ Book endpoints - [http://localhost:8080/v1/books](http://localhost:8080/v1/books)
+ Reset database - [http://localhost:8080/v1/migrations/reset](http://localhost:8080/v1/migrations/reset)
+ Populate database - [http://localhost:8080/v1/migrations/populate](http://localhost:8080/v1/migrations/populate)

To shut down the sample, simply stop the processes in the foreground.

## Tutorial

This tutorial walks you through the steps required to use a Liquibase extension in a KumuluzEE microservice.
Since the JPA and CDI parts are not explained in this tutorial, we recommend that you complete the existing [KumuluzEE JPA and CDI sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/jpa)
before proceeding with this one.

We will follow these steps:
+ Add Maven dependencies
+ Create Liquibase changelog
+ Add the Liquibase configuration
+ Implement the REST service to trigger migrations in runtime
+ Build the microservice
+ Run it

### Add Maven dependencies

We need the following dependencies in our microservice:
+ `kumuluzee-core`
+ `kumuluzee-servlet-jetty`
+ `kumuluzee-jax-rs-jersey`
+ `kumuluzee-cdi-weld`
+ `kumuluzee-jpa-eclipselink`
+ `kumuluzee-database-schema-migrations-liquibase`
+ `postgresql`

Add the following Maven dependencies to the `pom.xml`:
```xml
&lt;dependency&gt;
   &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
   &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
   &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
   &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
   &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
   &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.kumuluz.ee.database-schema-migrations&lt;/groupId&gt;
   &lt;artifactId&gt;kumuluzee-database-schema-migrations-liquibase&lt;/artifactId&gt;
   &lt;version&gt;${kumuluzee-database-schema-migrations.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- Only if using PostgreSQL--&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
   &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
   &lt;version&gt;${postgresql.version}&lt;/version&gt;
&lt;/dependency&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package the microservice as uber-jar:
```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:
```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Create Liquibase changelog

This sample already contains a simple `Book` entity for which we will create a Liquibase changelog. 
The changelog will contain two changeSets, one for updating the database table and the other for populating the table.

The changelog file will be named `books-changelog.xml` and will be placed into `resources/db` directory.

```xml
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.3.xsd"&gt;

    &lt;changeSet author="KumuluzEE" id="create_table_book" context="init"&gt;
        &lt;createTable tableName="book"&gt;
            &lt;column name="id" type="varchar(128)"/&gt;
            &lt;column name="title" type="varchar(64)"/&gt;
            &lt;column name="author" type="varchar(64)"/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;

    &lt;changeSet author="KumuluzEE" id="populate_table_book" context="populate"&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;2465c7c0-4e43-4dd9-8257-0542d4661b94&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE in action&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;452aa339-6481-49d4-9024-5796fa6ac633&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE database schema migrations&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;9c3bb6ce-3906-4a37-b807-229e6687346d&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE tips and tricks&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
        &lt;insert tableName="book"&gt;
            &lt;column name="id"&gt;f7c5deb1-1602-41a5-b75d-d23d80f547fc&lt;/column&gt;
            &lt;column name="title"&gt;KumuluzEE best practices&lt;/column&gt;
            &lt;column name="author"&gt;KumuluzEE&lt;/column&gt;
        &lt;/insert&gt;
    &lt;/changeSet&gt;

&lt;/databaseChangeLog&gt;
```

### Add Liquibase configuration

To trigger the Liquibase migration at application startup, the Liquibase configuration must be placed in 
the KumuluzEE configuration file.
The configuration contains the JNDI name of the data source, the location of the Liquibase changelog file, 
the actions to be performed at startup, the Liquibase contexts and the Liquibase labels.

Add the following configuration:
```yaml
kumuluzee:
  database-schema-migrations:
    enabled: true
    liquibase:
      changelogs:
        - jndi-name: jdbc/BooksDS
          file: db/books-changelog.xml
          contexts: "init"
          startup:
            drop-all: true
            update: true
```

### Implement REST service

To trigger Liquibase database schema migrations at runtime, we need to inject the `LiquibaseContainer` object.
The LiquibaseContainer contains the corresponding Liquibase object, which is created based on the `jndiName` specified 
in the `@LiquibaseChangelog` annotation.

*Note: If only one Liquibase configuration is specified in the KumuluzEE configuration file, 
the `jndiName` parameter or the entire `@LiquibaseChangelog` annotation can be omitted.* 

Sample service:
```java
@RequestScoped
public class LiquibaseService {

    private static final Logger LOG = Logger.getLogger(LiquibaseService.class.getName());

    @Inject
    @LiquibaseChangelog(jndiName = "jdbc/BooksDS")
    private LiquibaseContainer liquibaseContainer;

    public void reset() {

        Liquibase liquibase = liquibaseContainer.createLiquibase();

        // Retrieves contexts and labels from the Liquibase configuration in the KumuluzEE configuration file
        Contexts contexts = liquibaseContainer.getContexts();
        LabelExpression labels = liquibaseContainer.getLabels();

        try {
            liquibase.dropAll();
            liquibase.update(contexts, labels);
            liquibase.validate();

        } catch (Exception e) {
            LOG.error("Error while resetting database.", e);
        }
    }

    public void populate() {

        Liquibase liquibase = liquibaseContainer.createLiquibase();

        try {
            liquibase.update("populate");
        } catch (Exception e) {
            LOG.error("Error while populating database.", e);
        }
    }
}
```

Sample resource:
```java
@Path("migrations")
@RequestScoped
public class LiquibaseResource {

    @Inject
    private LiquibaseService liquibaseService;

    @POST
    @Path("reset")
    public Response reset() {
        liquibaseService.reset();
        return Response.noContent().build();
    }

    @POST
    @Path("populate")
    public Response populate1() {
        liquibaseService.populate();
        return Response.noContent().build();
    }
}
```

### Build the microservice and run it

To build the microservice and run the sample, use the commands described in the previous sections.

After you run the microservice, it should be accessible by default at the URL
[http://localhost:8080/v1](http://localhost:8080/v1).
You can demonstrate the use of the Liquibase extension by following the steps below:

1. Querying the [/books](http://localhost:8080/v1/books) endpoint should result in an empty array,
   since our database is empty.
2. Call the endpoint `http://localhost:8080/v1/migrations/populate` using the method `POST`
   to trigger a database schema migration that populates a database with some sample books.
3. If you query the [/books](http://localhost:8080/v1/books) endpoint again, you should get a response similar to the
   one below, showing us that the migration was successful.
```
[
    {
        "id": "2465c7c0-4e43-4dd9-8257-0542d4661b94",
        "title": "KumuluzEE in action",
        "author": "KumuluzEE"
    },
    {
        "id": "452aa339-6481-49d4-9024-5796fa6ac633",
        "title": "KumuluzEE database schema migrations",
        "author": "KumuluzEE"
    },
    {
        "id": "9c3bb6ce-3906-4a37-b807-229e6687346d",
        "title": "KumuluzEE tips and tricks",
        "author": "KumuluzEE"
    },
    {
        "id": "f7c5deb1-1602-41a5-b75d-d23d80f547fc",
        "title": "KumuluzEE best practices",
        "author": "KumuluzEE"
    }
]
```
4. To clear the entries from the database, call the `http://localhost:8080/v1/migrations/reset` endpoint with 
   a method `POST`. This will also trigger a database schema migration, but this time it will clear the database instead 
   of populating it.
5. If you query the [/books](http://localhost:8080/v1/books) endpoint for the last time, you can see if the migration
   was successful. The expected result is an empty array.</pre></body></html>




File path: kumuluzee-jcache/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;

&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  streaming:
    kafka:
      producer:
        bootstrap-servers: localhost:9092
        acks: all
        retries: 0
        batch-size: 16384
        linger-ms: 1
        buffer-memory: 33554432
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/main/java/com/kumuluz/ee/samples/kafka/registry/consumer/TestConsumer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kafka.registry.consumer;

import com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing;
import com.kumuluz.ee.streaming.common.annotations.StreamListener;
import org.apache.kafka.clients.consumer.ConsumerRecord;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * @author cen1
 */
@ApplicationScoped
public class TestConsumer {

    private static final Logger log = Logger.getLogger(TestConsumer.class.getName());

    private List&lt;String&gt; messages = new ArrayList&lt;&gt;();

    @StreamListener(topics = {"pricing-avro"}, config = "consumer-avro")
    public void onMessage(ConsumerRecord&lt;String, Pricing&gt; record) {

        log.info(String.format("Consumed message: offset = %d, key = %s, value = %s%n", record.offset(), record.key()
                , record.value().toString()));

        messages.add(record.value().toString());
    }

    public List&lt;String&gt; getLastFiveMessages() {
        if (messages.size() &lt; 5)
            return messages;
        return messages.subList(messages.size() - 5, messages.size());
    }
}
</pre></body></html>




File path: kumuluzee-fault-tolerance/customer-api/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/customer/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.customer;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-client/src/main/java/client/UserServiceClient.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package client;

import com.kumuluz.ee.grpc.client.GrpcChannelConfig;
import com.kumuluz.ee.grpc.client.GrpcChannels;
import com.kumuluz.ee.grpc.client.GrpcClient;
import com.kumuluz.ee.grpc.client.JWTClientCredentials;
import io.grpc.stub.StreamObserver;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.net.ssl.SSLException;
import java.util.logging.Logger;

@ApplicationScoped
public class UserServiceClient {

    private final static Logger logger = Logger.getLogger(UserServiceClient.class.getName());
    private final String JWT_TOKEN = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9." +
            "eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0IiwiaWF0IjoxNTE2MjM5MDIyfQ." +
            "VhfWc4uNtTNicztGHvnXyRMhnmIrXZ947EjO9ECV3G6pzPCYqjzwkdTgykW-" +
            "FWbQsSJH6aVnryK0DoLrO8f4XEsblj_Ind1CffXYcqjyZxwkPy4r5SxA--QvewsUsWfC1_I55J-Z6kh7oHm5Z_7vasudOFAXukmY5uBg_adDJN4";
    private UserGrpc.UserStub stub;

    @PostConstruct
    public void init() {
        try {
            GrpcChannels clientPool = GrpcChannels.getInstance();
            GrpcChannelConfig config = clientPool.getGrpcClientConfig("client1");
            GrpcClient client = new GrpcClient(config);
            stub = UserGrpc.newStub(client.getChannel()).withCallCredentials(new JWTClientCredentials(JWT_TOKEN));
        } catch (SSLException e) {
            logger.warning(e.getMessage());
        }
    }

    public void getUser(Integer id) {
        UserService.UserRequest request = UserService.UserRequest.newBuilder()
                .setId(id)
                .build();

        stub.getUser(request, new StreamObserver&lt;UserService.UserResponse&gt;() {
            @Override
            public void onNext(UserService.UserResponse userResponse) {
                logger.info(userResponse.getName() + " " + userResponse.getSurname());
            }

            @Override
            public void onError(Throwable throwable) {
                logger.warning("Error retrieving user");
                throwable.printStackTrace();
            }

            @Override
            public void onCompleted() {
                logger.info("Completed");
            }
        });
    }
}
</pre></body></html>




File path: kumuluzee-config-etcd/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Config ETCD sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Config extensions usage sample with KumuluzEE and etcd&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-config.version&gt;1.4.0-SNAPSHOT&lt;/kumuluzee-config.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka-producer&lt;/artifactId&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
            &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-feature-flags-unleash/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;artifactId&gt;kumuluzee-feature-flags-unleash&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Feature Flags Unleash sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Feature Flags Unleash sample with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-feature-flags.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-feature-flags.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;com.kumuluz.ee.feature-flags&lt;/groupId&gt;
			&lt;artifactId&gt;kumuluzee-feature-flags-unleash&lt;/artifactId&gt;
			&lt;version&gt;${kumuluzee-feature-flags.version}&lt;/version&gt;
		&lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing/customers/src/main/java/com/kumuluz/ee/samples/opentracing/customers/CustomersBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * Copyright (c) 2018 Sunesis, Ltd. and/or its affiliates
 * and other contributors as indicated by the @author tags and
 * the contributor list.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.kumuluz.ee.samples.opentracing.customers;

import io.opentracing.Tracer;
import org.eclipse.microprofile.opentracing.ClientTracingRegistrar;
import org.eclipse.microprofile.opentracing.Traced;

import javax.annotation.PostConstruct;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.ProcessingException;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.Response;

/**
 * @author Domen Jeric
 */
@RequestScoped
public class CustomersBean {

    private Client httpClient;

    @Inject
    Tracer configuredTracer;

    @PostConstruct
    private void init() {
        httpClient = ClientTracingRegistrar.configure(ClientBuilder.newBuilder()).build();
    }

    @Traced(operationName = "Get customer orders")
    public Response getOrders() {
        try {
            configuredTracer.activeSpan().log("Fetching customer orders...");
            return httpClient.target("http://localhost:3001/v1/orders")
                    .request()
                    .get();
        } catch (WebApplicationException | ProcessingException e) {
            throw new WebApplicationException(e);
        }
    }
}
</pre></body></html>




File path: microservices-simple/models/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;microservices-simple&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;microservices-simple-models&lt;/artifactId&gt;

    &lt;name&gt;Simple microservices sample with KumuluzEE models&lt;/name&gt;
    &lt;description&gt;Models sample using KumuluzEE using a shared database module&lt;/description&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;42.0.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-jcache/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/resources/schemas/avro/sum.avsc
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{
  "namespace": "com.kumuluz.ee.samples.kafka.registry.avro.lib",
  "type": "record",
  "name": "Sum",
  "fields": [
    {"name": "sum", "type": "string"}
  ]
}</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-producer/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/customer-deployment.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: customer-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: customer
    spec:
      containers:
      - image: zvoneg/kubernetes-customers:v1.0.5
        name: kubernetes-customer
        envFrom:
          - configMapRef:
              name: kubernetes-customer-config
        ports:
        - containerPort: 8080
          name: server
          protocol: TCP
</pre></body></html>




File path: kumuluzee-health/src/main/java/com/kumuluz/ee/samples/health/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.health;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-consumer/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  streaming:
    kafka:
      consumer:
        bootstrap-servers: localhost:9092
        group-id: group1
        enable-auto-commit: true
        auto-commit-interval-ms: 1000
        auto-offset-reset: earliest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</pre></body></html>




File path: microservices-simple/orders/src/main/java/com/kumuluz/ee/samples/microservices/simple/OrdersResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.microservices.simple;

import com.kumuluz.ee.samples.microservices.simple.models.Book;
import com.kumuluz.ee.samples.microservices.simple.models.Order;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.*;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Date;

/**
 * @author Tilen Faganel
 * @since 2.3.0
 */
@Path("/orders")
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class OrdersResource {

    @PersistenceContext
    private EntityManager em;

    @Inject
    private OrdersProperties ordersProperties;

    /**
     * &lt;p&gt;Queries the database and returns a specific order based on the given id.&lt;/p&gt;
     *
     * @param id The id of the wanted book.
     * @return Response object containing the requested book, or empty with the NOT_FOUND status.
     */
    @GET
    @Path("/{id}")
    public Response getOrder(@PathParam("id") Integer id) {

        Order o = em.find(Order.class, id);

        if (o == null)
            return Response.status(Response.Status.NOT_FOUND).build();

        return Response.ok(o).build();
    }

    /**
     * &lt;p&gt;Creates the order for the provided book.&lt;/p&gt;
     *
     * @param b The book object for which the order will be placed.
     * @return Response object containing the created order.
     */
    @POST
    public Response placeOrder(Book b) {

        if (b == null || b.getId() == null) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        }

        Response bookResponse = ClientBuilder.newClient()
                .target(ordersProperties.getCatalogueUrl()).path("books").path(b.getId().toString()).request().get();

        if (!bookResponse.getStatusInfo().getFamily().equals(Response.Status.Family.SUCCESSFUL)) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }

        Order o = new Order();
        o.setBook(bookResponse.readEntity(Book.class));
        o.setOrderDate(new Date());

        em.getTransaction().begin();

        em.persist(o);

        em.getTransaction().commit();

        return Response.status(Response.Status.CREATED).entity(o).build();
    }
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-client/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-grpc&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;grpc-client&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE gRPC client sample&lt;/name&gt;
    &lt;description&gt;Communicate via gRPC with server&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.grpc&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-grpc&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.grpc.version}&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;extensions&gt;
            &lt;extension&gt;
                &lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;
                &lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.5.0.Final&lt;/version&gt;
            &lt;/extension&gt;
        &lt;/extensions&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.5.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;protocArtifact&gt;com.google.protobuf:protoc:3.5.1-1:exe:${os.detected.classifier}&lt;/protocArtifact&gt;
                    &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;
                    &lt;pluginArtifact&gt;io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}&lt;/pluginArtifact&gt;
                &lt;/configuration&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;compile&lt;/goal&gt;
                            &lt;goal&gt;compile-custom&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-business-logic/src/main/java/com/kumuluz/ee/samples/tutorial/orders/cdi/OrdersBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.cdi;

import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;
import com.kumuluz.ee.samples.tutorial.orders.Order;

import javax.enterprise.context.ApplicationScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.UriInfo;
import java.util.List;

@ApplicationScoped
public class OrdersBean {

    @PersistenceContext(unitName = "orders-jpa")
    private EntityManager em;

    public List&lt;Order&gt; getOrders(UriInfo uriInfo) {

        QueryParameters queryParameters = QueryParameters.query(uriInfo.getRequestUri().getQuery()).defaultOffset(0)
                .build();

        return JPAUtils.queryEntities(em, Order.class, queryParameters);

    }

    public Order getOrder(String orderId) {

        Order order = em.find(Order.class, orderId);

        if (order == null) {
            throw new NotFoundException();
        }

        return order;
    }

    public Order createOrder(Order order) {

        try {
            beginTx();
            em.persist(order);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return order;
    }

    public Order putOrder(String orderId, Order order) {

        Order c = em.find(Order.class, orderId);

        if (c == null) {
            return null;
        }

        try {
            beginTx();
            order.setId(c.getId());
            order = em.merge(order);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return order;
    }

    public boolean deleteOrder(String orderId) {

        Order order = em.find(Order.class, orderId);

        if (order != null) {
            try {
                beginTx();
                em.remove(order);
                commitTx();
            } catch (Exception e) {
                rollbackTx();
            }
        } else
            return false;

        return true;
    }

    private void beginTx() {
        if (!em.getTransaction().isActive())
            em.getTransaction().begin();
    }

    private void commitTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().commit();
    }

    private void rollbackTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().rollback();
    }
}
</pre></body></html>




File path: kumuluzee-config-consul/src/main/java/com/kumuluz/ee/samples/kumuluz_config_consul/ConfigApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluz_config_consul;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@ApplicationPath("/v1")
public class ConfigApplication extends Application {
}
</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-reactive-vertx-publisher&lt;/artifactId&gt;

    &lt;name&gt;Publish on Vert.x event bus&lt;/name&gt;
    &lt;description&gt;Publish messages to Vert.x event bus using KumuluzEE Reactive Vert.x&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.reactive&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-reactive-vertx&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-reactive-vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: https/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># example HTTPS configuration

kumuluzee:
  server:
    https:
      enabled: true
      keystore-path: \&lt;path_to_project\&gt;/src/main/resources/keystore.jks
      keystore-password: changeit
      key-password: changeit</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-persistence/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" version="2.1"&gt;
    &lt;persistence-unit name="customers-jpa" transaction-type="RESOURCE_LOCAL"&gt;
        &lt;non-jta-data-source&gt;jdbc/CustomersDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.tutorial.customers.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source"
                      value="sql-scripts/init-customers.sql" /&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
</pre></body></html>




File path: kumuluzee-rest-client/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://xmlns.jcp.org/xml/ns/javaee
		http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;

&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/contracts/SafeMath.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package contracts;

import java.math.BigInteger;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * &lt;p&gt;Auto generated code.
 * &lt;p&gt;&lt;strong&gt;Do not modify!&lt;/strong&gt;
 * &lt;p&gt;Please use the &lt;a href="https://docs.web3j.io/command_line.html"&gt;web3j command line tools&lt;/a&gt;,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * &lt;a href="https://github.com/web3j/web3j/tree/master/codegen"&gt;codegen module&lt;/a&gt; to update.
 *
 * &lt;p&gt;Generated with web3j version 3.6.0.
 */
public class SafeMath extends Contract {
    private static final String BINARY = "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820b5519e6cbafd045f4d9f2527caeb5f6be41df25859281ed84521edb00363f8910029";

    @Deprecated
    protected SafeMath(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SafeMath(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SafeMath(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SafeMath(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall&lt;SafeMath&gt; deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SafeMath.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall&lt;SafeMath&gt; deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SafeMath.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall&lt;SafeMath&gt; deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SafeMath.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall&lt;SafeMath&gt; deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SafeMath.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static SafeMath load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SafeMath(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SafeMath load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SafeMath(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SafeMath load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SafeMath(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SafeMath load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SafeMath(contractAddress, web3j, transactionManager, contractGasProvider);
    }
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/enums/LecturerStatus.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.enums;

public enum LecturerStatus {
    FULLTIME, PARTTIME
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/entities/connections/ConnectionBase.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.entities.connections;

import java.util.List;

public abstract class ConnectionBase&lt;T&gt; {

    private final List&lt;T&gt; edges;
    private final long totalCount;

    public ConnectionBase(List&lt;T&gt; edges, long totalCount) {
        this.edges = edges;
        this.totalCount = totalCount;
    }

    public List&lt;T&gt; getEdges() {
        return edges;
    }

    public long getTotalCount() {
        return totalCount;
    }
}
</pre></body></html>




File path: kumuluzee-openapi/src/main/java/com/kumuluz/ee/samples/openapi/v2/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.openapi.v2;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.info.License;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import io.swagger.v3.oas.annotations.servers.Server;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;
import java.util.HashSet;
import java.util.Set;

/**
 * CustomerApplication class
 *
 * @author Zvone Gazvoda
 * @since 2.5.0
 */
@SecurityScheme(name = "openid-connect", type = SecuritySchemeType.OPENIDCONNECT,
        openIdConnectUrl = "http://auth-server-url/.well-known/openid-configuration")
@ApplicationPath("v2")
@OpenAPIDefinition(info = @Info(title = "CustomerApi", version = "v2.0.0", contact = @Contact(), license = @License()), servers = @Server(url = "http://localhost:8080/v2"), security
        = @SecurityRequirement(name = "openid-connect"))
public class CustomerApplication extends Application {

    @Override
    public Set&lt;Class&lt;?&gt;&gt; getClasses() {
        Set&lt;Class&lt;?&gt;&gt; classes = new HashSet&lt;&gt;();

        classes.add(CustomerResource.class);

        return classes;
    }
}
</pre></body></html>




File path: kumuluzee-config/src/main/java/com/kumuluz/ee/samples/kumuluz_config/CustomConfigurationDecoder.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluz_config;

import com.kumuluz.ee.configuration.ConfigurationDecoder;

import javax.xml.bind.DatatypeConverter;

/**
 * @author Jan Meznarič
 * @since 3.2.1
 */
public class CustomConfigurationDecoder implements ConfigurationDecoder {

    @Override
    public boolean shouldDecode(String key) {
        if ("rest-config.encoded-property".equals(key)) {
            return true;
        }
        return false;
    }

    @Override
    public String decode(String key, String value) {
        return new String(DatatypeConverter.parseBase64Binary(value));
    }
}
</pre></body></html>




File path: kumuluzee-health/src/main/java/com/kumuluz/ee/samples/health/CustomerService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.health;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
public class CustomerService {

    @PersistenceContext
    private EntityManager em;

    public Customer getCustomer(String customerId) {
        return em.find(Customer.class, customerId);
    }

    public List&lt;Customer&gt; getCustomers() {
        List&lt;Customer&gt; customers = em
                .createNamedQuery("Customer.findCustomers", Customer.class)
                .getResultList();

        return customers;
    }

    public void saveCustomer(Customer customer) {
        try {
            beginTx();
            em.persist(customer);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }
    }

    public void deleteCustomer(String customerId) {
        Customer customer = em.find(Customer.class, customerId);
        if (customer != null) {
            try {
                beginTx();
                em.remove(customer);
                commitTx();
            } catch (Exception e) {
                rollbackTx();
            }
        }
    }

    private void beginTx() {
        if (!em.getTransaction().isActive())
            em.getTransaction().begin();
    }

    private void commitTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().commit();
    }

    private void rollbackTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().rollback();
    }
}
</pre></body></html>




File path: kumuluzee-fault-tolerance/customer-api/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/customer/resources/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.resources;

import com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.beans.OrdersBean;
import com.kumuluz.ee.samples.circuit_breaker_hystrix.database.Database;
import com.kumuluz.ee.samples.circuit_breaker_hystrix.models.Customer;
import com.kumuluz.ee.samples.circuit_breaker_hystrix.models.Order;

import javax.annotation.security.PermitAll;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@RequestScoped
@Path("customers")
public class CustomerResource {

    @Inject
    private OrdersBean ordersBean;

    @GET
    @PermitAll
    public Response getAllCustomers() {

        List&lt;Customer&gt; customers = Database.getCustomers();

        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) throws ExecutionException, InterruptedException {

        Customer customer = Database.getCustomer(customerId);

        if (customer == null)
            return Response.status(Response.Status.NOT_FOUND).build();

        List&lt;Order&gt; customerOrders = ordersBean.findOrdersByCustomerId(customerId).get();
        customer.setOrders(customerOrders);

        return Response.ok(customer).build();
    }

    @POST
    public Response addCustomer(Customer customer) {

        Database.addCustomer(customer);

        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response removeCustomer(@PathParam("customerId") String customerId) {

        Database.deleteCustomer(customerId);

        return Response.noContent().build();
    }

    @GET
    @Path("{customerId}/order")
    public Response getCustomerOrders(@PathParam("customerId") String customerId) throws ExecutionException, InterruptedException {

        List&lt;Order&gt; customerOrders = ordersBean.findOrdersByCustomerId(customerId).get();

        return Response.ok(customerOrders).build();
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/java/com/kumuluz/ee/samples/jaxws/cxf/service/CustomersServiceBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.jaxws.cxf.service;

import com.kumuluz.samples.jax_ws.cxf.customers._1.Customer;

import javax.enterprise.context.ApplicationScoped;
import java.util.Arrays;
import java.util.List;

/**
 * @author gpor89
 * @since 3.0.0
 */
@ApplicationScoped
public class CustomersServiceBean implements CustomersService {

    @Override
    public List&lt;Customer&gt; getCustomers() {

        Customer customer1 = new Customer();
        customer1.setId("1");
        customer1.setFirstName("John");
        customer1.setLastName("Smith");

        Customer customer2 = new Customer();
        customer2.setId("2");
        customer2.setFirstName("Cindy");
        customer2.setLastName("Doe");

        return Arrays.asList(customer1, customer2);
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-cxf/src/main/resources/wsdls/customers.wsdl
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:xs="http://www.w3.org/2001/XMLSchema"
                  xmlns:cust="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0"
                  name="CustomerEndpoint"
                  targetNamespace="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0"&gt;
    &lt;wsdl:types&gt;
        &lt;xs:schema xmlns:tns="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0"
                   targetNamespace="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0"&gt;
            &lt;xs:element name="GetCustomers" type="tns:GetCustomers"/&gt;
            &lt;xs:element name="GetCustomersResponse" type="tns:GetCustomersResponse"/&gt;
            &lt;xs:complexType name="GetCustomers"&gt;
                &lt;xs:sequence/&gt;
            &lt;/xs:complexType&gt;
            &lt;xs:complexType name="GetCustomersResponse"&gt;
                &lt;xs:sequence&gt;
                    &lt;xs:element name="customers" type="tns:Customer" minOccurs="0" maxOccurs="unbounded"/&gt;
                &lt;/xs:sequence&gt;
            &lt;/xs:complexType&gt;
            &lt;xs:complexType name="Customer"&gt;
                &lt;xs:sequence&gt;
                    &lt;xs:element name="id" type="xs:string"/&gt;
                    &lt;xs:element name="firstName" type="cust:string32"/&gt;
                    &lt;xs:element name="lastName" type="cust:string32"/&gt;
                &lt;/xs:sequence&gt;
            &lt;/xs:complexType&gt;
            &lt;xs:simpleType name="string32"&gt;
                &lt;xs:restriction base="xs:string"&gt;
                    &lt;xs:minLength value="1"/&gt;
                    &lt;xs:maxLength value="32"/&gt;
                &lt;/xs:restriction&gt;
            &lt;/xs:simpleType&gt;
        &lt;/xs:schema&gt;
    &lt;/wsdl:types&gt;
    &lt;wsdl:message name="GetCustomers"&gt;
        &lt;wsdl:part name="parameters" element="cust:GetCustomers"/&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCustomersResponse"&gt;
        &lt;wsdl:part name="parameters" element="cust:GetCustomersResponse"/&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:portType name="CustomerEndpoint"&gt;
        &lt;wsdl:operation name="getCustomers"&gt;
            &lt;wsdl:input message="cust:GetCustomers"/&gt;
            &lt;wsdl:output message="cust:GetCustomersResponse"/&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:portType&gt;
    &lt;wsdl:binding name="CustomerEndpointSOAP" type="cust:CustomerEndpoint"&gt;
        &lt;soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/&gt;
        &lt;wsdl:operation name="getCustomers"&gt;
            &lt;soap:operation soapAction="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0/GetCustomers"/&gt;
            &lt;wsdl:input&gt;
                &lt;soap:body use="literal"/&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;soap:body use="literal"/&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:binding&gt;
    &lt;wsdl:service name="CustomerEndpoint"&gt;
        &lt;wsdl:port name="CustomerEndpointSOAP" binding="cust:CustomerEndpointSOAP"&gt;
            &lt;soap:address location="https://gpor89.github.com/soap/CustomerEndpoint"/&gt;
        &lt;/wsdl:port&gt;
    &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/postgres-customers.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: postgres-customers-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-customers
    spec:
      containers:
        - image: postgres:latest
          name: postgres-customers
          env:
            - name: POSTGRES_USER
              value: dbuser
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: customer
          ports:
          - containerPort: 5432
            protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-customers
  namespace: kumuluzee-blog
spec:
  type: ClusterIP
  ports:
  - port: 5433
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres-customers</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/ProgrammaticDiscoveryResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

import com.kumuluz.ee.discovery.enums.AccessType;
import com.kumuluz.ee.discovery.utils.DiscoveryUtil;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.net.URL;
import java.util.List;
import java.util.Optional;

/**
 * @author Urban Malc
 */
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Path("programmatic")
@RequestScoped
public class ProgrammaticDiscoveryResource {

    @Inject
    DiscoveryUtil discoveryUtil;

    @GET
    @Path("{serviceName}/{serviceVersion}/{environment}")
    public Response getInstances(@PathParam("serviceName") String serviceName,
                                 @PathParam("serviceVersion") String serviceVersion,
                                 @PathParam("environment") String environment) {

        Optional&lt;List&lt;URL&gt;&gt; instances = discoveryUtil.getServiceInstances(serviceName, serviceVersion, environment,
                AccessType.GATEWAY);

        if (instances.isPresent()) {
            return Response.ok(instances.get()).build();
        } else {
            return Response.noContent().build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-microProfile-1.2/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://xmlns.jcp.org/xml/ns/javaee
		http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;

&lt;/beans&gt;</pre></body></html>




File path: jax-ws/jax-ws-metro/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-business-logic/src/main/java/com/kumuluz/ee/samples/tutorial/orders/cdi/OrdersBean.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.cdi;

import com.kumuluz.ee.rest.beans.QueryParameters;
import com.kumuluz.ee.rest.utils.JPAUtils;
import com.kumuluz.ee.samples.tutorial.orders.Order;

import javax.enterprise.context.ApplicationScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.UriInfo;
import java.util.List;

@ApplicationScoped
public class OrdersBean {

    @PersistenceContext(unitName = "orders-jpa")
    private EntityManager em;

    public List&lt;Order&gt; getOrders(UriInfo uriInfo) {

        QueryParameters queryParameters = QueryParameters.query(uriInfo.getRequestUri().getQuery()).defaultOffset(0)
                .build();

        return JPAUtils.queryEntities(em, Order.class, queryParameters);

    }

    public Order getOrder(String orderId) {

        Order order = em.find(Order.class, orderId);

        if (order == null) {
            throw new NotFoundException();
        }

        return order;
    }

    public Order createOrder(Order order) {

        try {
            beginTx();
            em.persist(order);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return order;
    }

    public Order putOrder(String orderId, Order order) {

        Order c = em.find(Order.class, orderId);

        if (c == null) {
            return null;
        }

        try {
            beginTx();
            order.setId(c.getId());
            order = em.merge(order);
            commitTx();
        } catch (Exception e) {
            rollbackTx();
        }

        return order;
    }

    public boolean deleteOrder(String orderId) {

        Order order = em.find(Order.class, orderId);

        if (order != null) {
            try {
                beginTx();
                em.remove(order);
                commitTx();
            } catch (Exception e) {
                rollbackTx();
            }
        } else
            return false;

        return true;
    }

    private void beginTx() {
        if (!em.getTransaction().isActive())
            em.getTransaction().begin();
    }

    private void commitTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().commit();
    }

    private void rollbackTx() {
        if (em.getTransaction().isActive())
            em.getTransaction().rollback();
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-health_hpa-part2/customer-service.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: Service
metadata:
  name: customer
  namespace: kumuluzee-blog
spec:
  type: NodePort
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: customer
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-api/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  name: order-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8081
    http:
      port: 8081
  datasources:
    - jndi-name: jdbc/OrdersDS
      connection-url: jdbc:postgresql://postgres-orders:5432/order
      username: dbuser
      password: postgres
      pool:
        max-size: 20
  discovery:
    etcd:
      hosts: http://192.168.99.100:2379
  metrics:
      web-instrumentation:
        - name: orders-endpoint
          url-pattern: /v1/orders/*
          registry-name: ordersRegistry
  health:
      checks:
        data-source-health-check:
          connection-url: jdbc:postgresql://postgres-orders:5432/order
          username: dbuser
          password: postgres
        disk-space-health-check:
                threshold: 100000000
  cors-filter:
      servlet:
        allow-origin: "*"</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/src/main/java/com.kumuluz.ee.samples.discovery.register/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

import com.kumuluz.ee.discovery.annotations.RegisterService;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Urban Malc
 */
@RegisterService
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;artifactId&gt;kumuluzee-graphql-advanced&lt;/artifactId&gt;
    &lt;name&gt;KumuluzEE GraphQL Advanced sample&lt;/name&gt;

    &lt;properties&gt;
        &lt;kumuluzee-graphql.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-graphql.version&gt;
        &lt;kumuluzee-rest.version&gt;1.5.0-SNAPSHOT&lt;/kumuluzee-rest.version&gt;
        &lt;kumuluzee-config-mp.version&gt;1.5.0-SNAPSHOT&lt;/kumuluzee-config-mp.version&gt;
        &lt;postgresql.version&gt;42.2.1&lt;/postgresql.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-graphql-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.graphql&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-graphql-ui&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-graphql.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-hibernate&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jta-narayana&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-p-jsonp&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-b-yasson&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-rest.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;${postgresql.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-swagger/src/main/java/com/kumuluz/ee/samples/swagger/v1/CustomerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.swagger.v1;

import io.swagger.annotations.Info;
import io.swagger.annotations.OAuth2Definition;
import io.swagger.annotations.SecurityDefinition;
import io.swagger.annotations.SwaggerDefinition;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * CustomerApplication class
 *
 * @author Zvone Gazvoda
 * @since 2.5.0
 */
@ApplicationPath("v1")
//@DeclareRoles({"user"})
@SwaggerDefinition(info = @Info(title = "CustomersAPI", version = "v1.0.0"), host = "localhost:8080", securityDefinition =
@SecurityDefinition(
        oAuth2Definitions = {
                @OAuth2Definition(
                        key = "access_code",
                        flow = OAuth2Definition.Flow.ACCESS_CODE,
                        tokenUrl = "https://keycloak.kumuluz.com/auth/realms/customers-realm/protocol/openid-connect/token",
                        authorizationUrl = "https://keycloak.kumuluz.com/auth/realms/customers-realm/protocol/openid-connect/auth",
                        description = "Keycloak Auth",
                        scopes = {}
                ),
                @OAuth2Definition(
                        key = "password",
                        flow = OAuth2Definition.Flow.PASSWORD,
                        tokenUrl = "https://keycloak.kumuluz.com/auth/realms/customers-realm/protocol/openid-connect/token",
                        description = "Keycloak Auth",
                        scopes = {}
                ),
                @OAuth2Definition(
                        key = "application",
                        flow = OAuth2Definition.Flow.APPLICATION,
                        tokenUrl = "https://keycloak.kumuluz.com/auth/realms/customers-realm/protocol/openid-connect/token",
                        description = "Keycloak Auth",
                        scopes = {}
                )
        }
))
public class CustomerApplication extends Application {

}</pre></body></html>




File path: kumuluzee-health/src/main/java/com/kumuluz/ee/samples/health/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.health;

import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.spi.BeanManager;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @Inject
    private BeanManager beanManager;

    @Inject
    private CustomerService customerBean;

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = customerBean.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = customerBean.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(Customer customer) {
        customerBean.saveCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        customerBean.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-config-mp/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

/**
 * @author Urban Malc
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-cors/src/main/java/com/kumuluz/ee/samples/cors/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.cors;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public Customer(String id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return "Customer {\n" +
               "  id='" + id + "',\n" +
               "  firstName='" + firstName + "',\n" +
               "  lastName='" + lastName + "'\n" +
               "}";
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-fault-tolerance/order-api/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8081
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/java/com/kumuluz/ee/samples/graphql_advanced/dtos/Subject.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.graphql_advanced.dtos;

import org.eclipse.microprofile.graphql.Ignore;

public class Subject {

    private Integer id;
    private String name;
    private String classroom;

    public Subject(Integer id, String name, String classroom) {
        this.id = id;
        this.name = name;
        this.classroom = classroom;
    }

    public Subject() {

    }

    public Integer getId() {
        return id;
    }

    @Ignore
    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getClassroom() {
        return classroom;
    }

    public void setClassroom(String classroom) {
        this.classroom = classroom;
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/java/com/kumuluz/ee/samples/kafka/registry/streams/BigDecimalSerializer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.streams;

import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.serialization.Serializer;

import java.math.BigDecimal;

/**
 * @author cen1
 */
public class BigDecimalSerializer implements Serializer&lt;BigDecimal&gt; {

    @Override
    public byte[] serialize(String s, BigDecimal bigDecimal) {
        return bigDecimal.toPlainString().getBytes();
    }

    @Override
    public byte[] serialize(String topic, Headers headers, BigDecimal data) {
        return data.toPlainString().getBytes();
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/gamma/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8083</pre></body></html>




File path: bean-validation/src/main/java/com/kumuluz/ee/samples/validation/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.validation;

import javax.validation.Valid;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    public Response addNewCustomer(@Valid Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/main/java/com/kumuluz/ee/samples/kafka/registry/consumer/ConsumerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.consumer;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author cen1
 */
@ApplicationPath("")
public class ConsumerApplication extends Application {
}</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/OrdersApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1;

import com.kumuluz.ee.discovery.annotations.RegisterService;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/v1")
@RegisterService
public class OrdersApplication extends Application {
}
</pre></body></html>




File path: jax-rs/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-config-consul/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-config-consul&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Config Consul sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Config extensions usage sample with KumuluzEE and Consul&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-config.version&gt;1.4.0-SNAPSHOT&lt;/kumuluzee-config.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-consul&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-cors/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-cors&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE CORS sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE CORS usage sample with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-cors.varsion&gt;1.1.0-SNAPSHOT&lt;/kumuluzee-cors.varsion&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.cors&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cors&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-cors.varsion}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
	   bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: jpa/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customers
      username: postgres
      password: postgres
      pool:
        max-size: 2
    - jndi-name: jdbc/FailedCustomersDS
      connection-url: jdbc:postgresql://localhost:55432/some-nonexisting-database
      username: postgres
      password: postgres
      continue-on-error: true
      pool:
        max-size: 2
  persistence-units:
    - name: "kumuluzee-samples-jpa"
      continue-on-error: false
    - name: "kumuluzee-samples-jpa-failed"
      continue-on-error: true</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher/src/main/resources/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/src/main/java/com/kumuluz/ee/samples/kafka/registry/streams/SumStreamsControl.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.streams;

import com.kumuluz.ee.streaming.common.annotations.StreamProcessorController;
import com.kumuluz.ee.streaming.kafka.utils.streams.StreamsController;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import java.util.concurrent.CountDownLatch;

/**
 * @author cen1
 */
@ApplicationScoped
public class SumStreamsControl {

    @StreamProcessorController(id="price-sum")
    StreamsController sumStreams;

    public void startStream(@Observes @Initialized(ApplicationScoped.class) Object init) {
        final CountDownLatch latch = new CountDownLatch(1);

        // attach shutdown handler to catch control-c
        Runtime.getRuntime().addShutdownHook(new Thread("streams-price-sum-shutdown-hook") {
            @Override
            public void run() {
                sumStreams.close();
                latch.countDown();
            }
        });

        try {
            sumStreams.start();
            latch.await();
        } catch (Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-business-logic/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-logs-fluentd/src/main/java/com/kumuluz/ee/samples/kumuluzee_logs/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_logs;

import com.kumuluz.ee.logs.cdi.Log;
import com.kumuluz.ee.logs.cdi.LogParams;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
@Log
public class CustomerResource {

    @GET
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    @Log(value = LogParams.METRICS, methodCall = false)
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-security-keycloak/src/main/java/com/kumuluz/ee/samples/kumuluzee_security_keycloak/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_security_keycloak;

import javax.annotation.security.PermitAll;
import javax.annotation.security.RolesAllowed;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("customers")
public class CustomerResource {

    @GET
    @PermitAll
    public Response getAllCustomers() {
        List&lt;Customer&gt; customers = Database.getCustomers();
        return Response.ok(customers).build();
    }

    @GET
    @Path("{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {
        Customer customer = Database.getCustomer(customerId);
        return customer != null
                ? Response.ok(customer).build()
                : Response.status(Response.Status.NOT_FOUND).build();
    }

    @POST
    @RolesAllowed({"user"})
    public Response addNewCustomer(Customer customer) {
        Database.addCustomer(customer);
        return Response.noContent().build();
    }

    @DELETE
    @Path("{customerId}")
    @RolesAllowed("user")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {
        Database.deleteCustomer(customerId);
        return Response.noContent().build();
    }
}
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-servlet/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/DiscoverApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Urban Malc
 */
@ApplicationPath("v1")
public class DiscoverApplication extends Application {
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Kafka producer with Schema Registry

This sample's focus is on using Schema Registry with Kafka. For Kafka basics, see the `kumuluzee-streaming-kafka` sample.

&gt; After initial project build, you should cd to kumuluzee-streaming-kafka-registry-producer to run the avro and schema registry plugins from the producer module.

## Additional maven dependencies
We need Avro and record serializer:
```
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
    &lt;artifactId&gt;avro&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.confluent&lt;/groupId&gt;
    &lt;artifactId&gt;kafka-avro-serializer&lt;/artifactId&gt;
&lt;/dependency&gt;
```

## Components
1. Confluent Schema Registry for schema management and validation
2. Landoop Schema Registry UI for Schema Registry visuals
3. Kafdrop UI to check Kafka topics, consumers and records
4. `avro-maven-plugin` to generate .java POJOs from .avsc schemas
5. `kafka-schema-registry-maven-plugin` to register, validate and download schemas.

## Typical development flow (producer)
1. Write an .avsc schema, example in `src/main/resources/schemas/avro/v1.0.0/pricing.avsc`.
2. Generate .java POJO with `avro-maven-plugin` (with `mvn compile`)
3. Use the generated POJO in Kafka Producer (`ProducerResource.java`).
4. Register the schema to registry with `mvn schema-registry:register`. The schema should appear in the registry. We can verify this by opening the Registry UI at `http://localhost:8000`.

Producer configuration is the same as regular Kafka producer with added schema registry URL and disabling automatic registration of schemas. We use `KafkaAvroSerializer` to serialize POJO to Avro data format.
```
producer-avro:
    bootstrap-servers: localhost:29092
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    schema-registry-url: http://localhost:8081
    auto-regiter-schemas: false
```

## Try it
Run the producer EeApplication and make a POST request with some data:
```
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"price":"0.00","priceExTax":"0.00","taxAmount":"0.00","basePrice":"0.00","priceAmount":"0.00","description":"Desc"}' \
  http://localhost:8080/produce
```
Now navigate to Kafdrop at `http://localhost:9000/`, open `pricing-avro` topic and click on __View Messages__ and then again __View Messages__. You should see the content of your message displayed as a plain text.

## Schema evolution
If you want to modify the scheme, first copy the .avsc to a new file. An example is given in `v2.0.0/pricing.avsc` with one required and one optional field added. __BACKWARD__ compatibility is the default so according to the [compatibility guide](https://docs.confluent.io/current/schema-registry/avro.html) we are allowed to delete fields and add optional fields. That means our new schema is not compatible and should fail. 
First, in our producer pom.xml we replace the `v1.0.0/pricing.avsc` with the new `v2.0.0/pricing.avsc` under the `kafka-schema-registry-maven-plugin` pricing-avro-value subject.

We can then test the compatibility with:
```
mvn schema-registry:test-compatibility
```
Results in:
&gt; [ERROR] Execution default-cli of goal io.confluent:kafka-schema-registry-maven-plugin:5.5.0:test-compatibility failed: One or more schemas found to be incompatible with the current version.

However, if we remove the new required field from our 2.0.0 schema and re-run the compatibility test, we get an OK message:
&gt; [INFO] Schema pricing-2.0.0.avsc is compatible with subject(pricing-avro-value)

We could now change our Avro Maven Plugin source directory to `v2.0.0`, generate the new POJO and register the new schema.

Now that we have successfully produced a record, continue to the [consumer module](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer) README.
</pre></body></html>




File path: kumuluzee-config-consul/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Config sample with Consul 

&gt; Build a REST service which utilizes KumuluzEE Config to access configuration properties stored in Consul and pack it 
as a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses KumuluzEE Config extension to
access configuration properties stored in Consul. In this sample we develop a simple REST service that returns
a list of configuration properties from all available configuration sources and pack it as KumuluzEE microservice. This 
tutorial will guide you through all the necessary steps. You will first add KumuluzEE dependencies into pom.xml. To 
develop the REST service, you will use the standard JAX-RS 2 API. Required knowledge: basic familiarity with JAX-RS 2
and basic concepts of REST, JSON, yaml and Consul.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

4. Local Consul agent:
    * If you have installed Consul, you can check the version by typing the following in a command line:
    
        ```
        consul version
        ```
    

## Prerequisites

To run this sample you will need a local Consul agent. Note that such setup with Consul running in development mode is
not viable for production environments, but only for developing purposes. Here is an example on how to quickly run a
local Consul agent in development mode:

   ```bash
    $ consul agent -dev -ui
   ```


## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-config-consul
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/config

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple REST service that exposes configuration 
properties retrieved with a built-in configuration framework and KumuluEE config extension. We will develop a 
simple REST service with just one resource:
* GET http://localhost:8080/v1/config - list of all configuration properties from configuration file 

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS and CDI)
* Add Maven dependency to KumuluzEE Config
* Define our configuration properties in configuration file
* Implement the service using standard JAX-RS 2
* Build the microservice
* Run it
* Dynamically change configuration properties in Consul

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey` and `kumuluzee-cdi-weld` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Alternatively, we could add the `kumuluzee-microProfile-1.0`, which adds the MicroProfile 1.0 dependencies (JAX-RS, CDI,
JSON-P, and Servlet).

Add dependency to KumuluzEE Config extension:

```xml
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-config-consul&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
    &lt;/dependency&gt;
```
 
Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Define KumuluzEE configuration as well as your custom configuration properties in a `config.yaml` configuration 
file:

```yaml
kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev
  config:
    start-retry-delay-ms: 500
    max-retry-delay-ms: 900000

rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
```

Register your module as JAX-RS service and define the application path. You could do that in web.xml or for example 
with the `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class ConfigApplication extends Application {
}
```

Implement an application scoped CDI bean that will automatically load and hold our configuration properties. It shall
be annotated with `@ConfigBundle` annotation whose value represents the prefix for the configuration properties keys.
Add a `@ConfigValue(watch = true)` to enable watch on the key. This will monitor the changes of this key in Consul and 
automatically update the value in the configuration bean. 
 
```java
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    @ConfigValue(watch = true)
    private String stringProperty;
    private Boolean booleanProperty;
    private Integer integerProperty;
    
    // get and set methods
    
}
```

Implement a JAX-RS resource that will expose retrieved configuration properties on GET request:

```java
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                        "\"stringProperty\": \"%s\"," +
                        "\"booleanProperty\": %b," +
                        "\"integerProperty\": %d" +
                        "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty());

        return Response.ok(response).build();
    }
}
```

To build the microservice and run the example, use the commands as described in previous sections.

Since we have not defined any configuration properties in Consul, GET http://localhost:8080/v1/config will return 
configuration properties from configuration file. We can now try and some values in Consul. Since we enabled watch on 
the field `stringProperty`, it will be dynamically updated on any change in Consul. We can add a value to Consul from
the user interface, which can be accessed at `http://localhost:8500`.

To set a value, navigate to `KEY/VALUE` tab and create key 
`environments/dev/services/customer-service/1.0.0/config/rest-config/string-property` 
with a value of your own choosing.

Access the config endpoint again and you will get an updated value from Consul.
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/java/com/kumuluz/ee/samples/kafka/registry/producer/ProducerApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.producer;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author cen1
 */
@ApplicationPath("")
public class ProducerApplication extends Application {
}</pre></body></html>




File path: kumuluzee-opentracing/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;properties&gt;
        &lt;kumuluzee-opentracing.version&gt;1.4.0-SNAPSHOT&lt;/kumuluzee-opentracing.version&gt;
    &lt;/properties&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;
    &lt;modules&gt;
        &lt;module&gt;customers&lt;/module&gt;
        &lt;module&gt;orders&lt;/module&gt;
    &lt;/modules&gt;

    &lt;artifactId&gt;kumuluzee-opentracing&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE OpenTracing sample&lt;/name&gt;

    &lt;developers&gt;
        &lt;developer&gt;
            &lt;name&gt;Domen Jerič&lt;/name&gt;
            &lt;id&gt;domenjeric&lt;/id&gt;
            &lt;url&gt;https://github.com/domenjeric&lt;/url&gt;
        &lt;/developer&gt;
    &lt;/developers&gt;

    &lt;licenses&gt;
        &lt;license&gt;
            &lt;name&gt;MIT License&lt;/name&gt;
            &lt;url&gt;https://www.opensource.org/licenses/mit-license.php&lt;/url&gt;
        &lt;/license&gt;
    &lt;/licenses&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;
&lt;/project&gt;
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-consumer/src/main/resources/schemas/avro/pricing-avro-value.avsc
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">{"type":"record","name":"Pricing","namespace":"com.kumuluz.ee.samples.kafka.registry.avro.lib","fields":[{"name":"price","type":"string"},{"name":"priceExTax","type":"string"},{"name":"basePrice","type":"string"},{"name":"taxAmount","type":"string"},{"name":"description","type":"string"}]}</pre></body></html>




File path: kumuluzee-grpc/grpc-server/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-grpc&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;grpc-server&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE gRPC Server sample&lt;/name&gt;
    &lt;description&gt;Provide server for communication via gRPC&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;42.1.4&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.grpc&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-grpc&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.grpc.version}&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;extensions&gt;
            &lt;extension&gt;
                &lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;
                &lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.5.0.Final&lt;/version&gt;
            &lt;/extension&gt;
        &lt;/extensions&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.5.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;protocArtifact&gt;com.google.protobuf:protoc:3.5.1-1:exe:${os.detected.classifier}&lt;/protocArtifact&gt;
                    &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;
                    &lt;pluginArtifact&gt;io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}&lt;/pluginArtifact&gt;
                &lt;/configuration&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;compile&lt;/goal&gt;
                            &lt;goal&gt;compile-custom&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;


&lt;/project&gt;</pre></body></html>




File path: kumuluzee-rest-client/src/main/java/com/kumuluz/ee/samples/kumuluzee_rest_client/rest/RestApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_rest_client.rest;

import com.kumuluz.ee.rest.client.mp.providers.IncomingHeadersInterceptor;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Urban Malc
 * @since 3.1.0
 */
@ApplicationPath("v1")
public class RestApplication extends Application {

    @Override
    public Set&lt;Class&lt;?&gt;&gt; getClasses() {
        Set&lt;Class&lt;?&gt;&gt; classes = new HashSet&lt;&gt;();
        classes.add(RestResource.class);
        classes.add(IncomingHeadersInterceptor.class);
        return classes;
    }
}
</pre></body></html>




File path: kumuluzee-reactive-vertx/simple-verticles/verticle-publisher/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;simple-verticles&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;verticle-publisher&lt;/artifactId&gt;

    &lt;name&gt;Publish on Vert.x event bus&lt;/name&gt;
    &lt;description&gt;Publish events on Vert.x event bus using a Verticle&lt;/description&gt;

    &lt;properties&gt;
        &lt;!-- the main verticle class name --&gt;
        &lt;main.verticle&gt;com.kumuluz.ee.samples.reactive.vertx.PublisherVerticle&lt;/main.verticle&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.vertx&lt;/groupId&gt;
            &lt;artifactId&gt;vertx-core&lt;/artifactId&gt;
            &lt;version&gt;${vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;io.vertx&lt;/groupId&gt;
            &lt;artifactId&gt;vertx-hazelcast&lt;/artifactId&gt;
            &lt;version&gt;${vertx.version}&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;pluginManagement&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;version&gt;${maven.compiler.version}&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;source&gt;${maven.compiler.source}&lt;/source&gt;
                        &lt;target&gt;${maven.compiler.target}&lt;/target&gt;
                    &lt;/configuration&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;

        &lt;!-- You only need the part below if you want to build your application
            into a fat executable jar. This is a jar that contains all the dependencies
            required to run it, so you can just run it with java -jar --&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
                &lt;version&gt;${maven.shade.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;shade&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;transformers&gt;
                                &lt;transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;
                                    &lt;manifestEntries&gt;
                                        &lt;Main-Class&gt;io.vertx.core.Launcher&lt;/Main-Class&gt;
                                        &lt;Main-Verticle&gt;${main.verticle}&lt;/Main-Verticle&gt;
                                    &lt;/manifestEntries&gt;
                                &lt;/transformer&gt;
                                &lt;transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer"&gt;
                                    &lt;resource&gt;META-INF/services/io.vertx.core.spi.VerticleFactory&lt;/resource&gt;
                                &lt;/transformer&gt;
                            &lt;/transformers&gt;
                            &lt;artifactSet&gt;
                            &lt;/artifactSet&gt;
                            &lt;outputFile&gt;${project.build.directory}/${project.artifactId}-${project.version}-fat.jar&lt;/outputFile&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${maven.exec.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;run&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;java&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;mainClass&gt;io.vertx.core.Launcher&lt;/mainClass&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;run&lt;/argument&gt;
                                &lt;argument&gt;${main.verticle}&lt;/argument&gt;
                            &lt;/arguments&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;

                    &lt;execution&gt;
                        &lt;id&gt;run-app&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;exec&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;executable&gt;java&lt;/executable&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;-jar&lt;/argument&gt;
                                &lt;argument&gt;target/${project.artifactId}-${project.version}-fat.jar&lt;/argument&gt;
                            &lt;/arguments&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/java/com/kumuluz/ee/samples/discovery/discover/jaxrs/ProxiedResponse.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.discover.jaxrs;

/**
 * @author Urban Malc
 */
public class ProxiedResponse {

    private String response;
    private String proxiedFrom;

    public String getResponse() {
        return response;
    }

    public void setResponse(String response) {
        this.response = response;
    }

    public String getProxiedFrom() {
        return proxiedFrom;
    }

    public void setProxiedFrom(String proxiedFrom) {
        this.proxiedFrom = proxiedFrom;
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/interceptors/LogContextInterceptor.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.interceptors;

import com.kumuluz.ee.common.runtime.EeRuntime;
import com.kumuluz.ee.configuration.utils.ConfigurationUtil;
import com.kumuluz.ee.logs.cdi.Log;
import org.apache.logging.log4j.CloseableThreadContext;

import javax.annotation.Priority;
import javax.interceptor.AroundInvoke;
import javax.interceptor.Interceptor;
import javax.interceptor.InvocationContext;
import java.util.HashMap;
import java.util.UUID;

@Log
@Interceptor
@Priority(Interceptor.Priority.PLATFORM_BEFORE)
public class LogContextInterceptor {

    @AroundInvoke
    public Object logMethodEntryAndExit(InvocationContext context) throws Exception {

        ConfigurationUtil configurationUtil = ConfigurationUtil.getInstance();

        HashMap settings = new HashMap();

        settings.put("environmentType", configurationUtil.get("kumuluzee.env.name").orElse(null));
        settings.put("applicationName", configurationUtil.get("kumuluzee.name").orElse(null));
        settings.put("applicationVersion", configurationUtil.get("kumuluzee.version").orElse(null));
        settings.put("uniqueInstanceId", EeRuntime.getInstance().getInstanceId());

        settings.put("uniqueRequestId", UUID.randomUUID().toString());

        try (final CloseableThreadContext.Instance ctc = CloseableThreadContext.putAll(settings)) {
            Object result = context.proceed();
            return result;
        }
    }
}</pre></body></html>




File path: kumuluzee-fault-tolerance/common/src/main/java/com/kumuluz/ee/samples/circuit_breaker_hystrix/database/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.circuit_breaker_hystrix.database;

import com.kumuluz.ee.samples.circuit_breaker_hystrix.models.Customer;
import com.kumuluz.ee.samples.circuit_breaker_hystrix.models.Order;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author Luka Šarc
 * @since 2.3.0
 */
public class Database {

    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
    private static List&lt;Order&gt; orders = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }
    public static List&lt;Order&gt; getOrders() { return orders; }

    public static Customer getCustomer(String customerId) {

        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {

        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }

    public static void addOrder(String customerId) {

        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }

    public static Order getOrder(String orderId) {

        for (Order order : orders) {
            if (order.getId().equals(orderId))
                return order;
        }

        return null;
    }

    public static void addOrder(Order order) {
        orders.add(order);
    }

    public static void deleteOrder(String orderId) {

        for (Order order : orders) {
            if (order.getId().equals(orderId)) {
                orders.remove(order);
                break;
            }
        }
    }

    public static List&lt;Order&gt; findOrdersByCustomer(String customerId) {

        return orders.stream()
                .filter(o -&gt; o.getCustomerId().equals(customerId))
                .collect(Collectors.toList());
    }

    static {
        Customer customer1 = new Customer();
        customer1.setId("1");
        customer1.setFirstName("Brian");
        customer1.setLastName("Walker");

        Customer customer2 = new Customer();
        customer2.setId("2");
        customer2.setFirstName("Lisa");
        customer2.setLastName("Smith");

        Customer customer3 = new Customer();
        customer3.setId("3");
        customer3.setFirstName("James");
        customer3.setLastName("Dylan");

        Order order1 = new Order();
        order1.setId("1");
        order1.setPrice(9.90);
        order1.setPaymentType("CREDIT_CARD");
        order1.setName("Tom&amp;Jerry");
        order1.setCustomerId("1");

        Order order2 = new Order();
        order2.setId("2");
        order2.setPrice(13.90);
        order2.setPaymentType("CASH");
        order2.setName("Looney Tunes");
        order2.setCustomerId("1");

        Order order3 = new Order();
        order3.setId("3");
        order3.setPrice(1699.90);
        order3.setPaymentType("CREDIT_CARD");
        order3.setName("Laptop");
        order3.setCustomerId("2");

        Order order4 = new Order();
        order4.setId("4");
        order4.setPrice(49.90);
        order4.setPaymentType("CREDIT_CARD");
        order4.setName("Keyboard");
        order4.setCustomerId("2");

        Order order5 = new Order();
        order5.setId("5");
        order5.setPrice(79.90);
        order5.setPaymentType("CREDIT_CARD");
        order5.setName("Mouse");
        order5.setCustomerId("2");

        Order order6 = new Order();
        order6.setId("6");
        order6.setPrice(99.90);
        order6.setPaymentType("PREPAYMENT");
        order6.setName("Holidays");
        order6.setCustomerId("3");

        addCustomer(customer1);
        addCustomer(customer2);
        addCustomer(customer3);

        addOrder(order1);
        addOrder(order2);
        addOrder(order3);
        addOrder(order4);
        addOrder(order5);
        addOrder(order6);
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/delta/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  server:
    http:
      port: 8084</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/orders/orders-persistence/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" version="2.1"&gt;
    &lt;persistence-unit name="orders-jpa" transaction-type="RESOURCE_LOCAL"&gt;
        &lt;non-jta-data-source&gt;jdbc/OrdersDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.tutorial.orders.Order&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source"
                      value="sql-scripts/init-orders.sql"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
</pre></body></html>




File path: jsf/src/main/java/com/kumuluz/ee/samples/jsf/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jsf;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-metrics/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-metrics&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Metrics sample&lt;/name&gt;
    &lt;description&gt;Samples for metrics usage with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;

        &lt;kumuluzee-metrics.version&gt;2.4.0-SNAPSHOT&lt;/kumuluzee-metrics.version&gt;
        &lt;kumuluzee-config-mp.version&gt;1.4.0-SNAPSHOT&lt;/kumuluzee-config-mp.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-metrics-logstash&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-metrics-logs&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-version/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-version&lt;/artifactId&gt;
    &lt;name&gt;KumuluzEE Version sample&lt;/name&gt;

    &lt;properties&gt;
        &lt;buildnumber-maven-plugin.version&gt;1.4&lt;/buildnumber-maven-plugin.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-json-p-jsonp&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.version&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-version&lt;/artifactId&gt;
            &lt;version&gt;1.2.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;buildnumber-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${buildnumber-maven-plugin.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;validate&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;create&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;doCheck&gt;false&lt;/doCheck&gt;
                    &lt;doUpdate&gt;false&lt;/doUpdate&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;false&lt;/filtering&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
                &lt;includes&gt;
                    &lt;include&gt;VERSION.json&lt;/include&gt;
                &lt;/includes&gt;
                &lt;targetPath&gt;.&lt;/targetPath&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;
&lt;/project&gt;
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8u131-jre-alpine


COPY target /usr/src/myapp
WORKDIR /usr/src/myapp

EXPOSE 8080

CMD ["java", "-server", "-cp", "classes:dependency/*", "com.kumuluz.ee.EeApplication"]</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;discovery-consul-discover-jaxrs&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Consul Discovery JAX-RS sample&lt;/name&gt;
    &lt;description&gt;Discover service with KumuluzEE JAX-RS service&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-openapi/src/main/java/com/kumuluz/ee/samples/openapi/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.openapi;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * Customer class.
 *
 * @author Zvone Gazvoda
 * @since 2.5.0
 */
@XmlRootElement(name = "Customer")
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public Customer(String id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    @XmlElement(name = "id")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @XmlElement(name = "first-name")
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }


    @XmlElement(name = "last-name")
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return "Customer {\n" +
                "  id='" + id + "',\n" +
                "  firstName='" + firstName + "',\n" +
                "  lastName='" + lastName + "'\n" +
                "}";
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  streaming:
    kafka:
      producer-avro:
        bootstrap-servers: localhost:29092
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
        schema-registry-url: http://localhost:8081
        auto-register-schemas: false</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-streams/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-streaming-kafka-registry&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-streaming-kafka-registry-streams&lt;/artifactId&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-3.3&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.streaming&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-streaming-kafka&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-streaming-kafka.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;
            &lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
            &lt;artifactId&gt;avro&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.confluent&lt;/groupId&gt;
            &lt;artifactId&gt;kafka-streams-avro-serde&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
                &lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;generate-sources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;schema&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;sourceDirectory&gt;src/main/resources/schemas/avro/&lt;/sourceDirectory&gt;
                            &lt;outputDirectory&gt;${project.basedir}/src/generated/java/&lt;/outputDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;io.confluent&lt;/groupId&gt;
                &lt;artifactId&gt;kafka-schema-registry-maven-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;schemaTypes&gt;
                        &lt;pricing-avro-value&gt;AVRO&lt;/pricing-avro-value&gt;
                    &lt;/schemaTypes&gt;
                    &lt;subjects&gt;
                        &lt;sum-avro-value&gt;src/main/resources/schemas/avro/sum.avsc&lt;/sum-avro-value&gt;
                    &lt;/subjects&gt;
                    &lt;subjectPatterns&gt;
                        &lt;param&gt;pricing-avro-value&lt;/param&gt;
                    &lt;/subjectPatterns&gt;
                    &lt;outputDirectory&gt;${project.basedir}/src/main/resources/schemas/avro/&lt;/outputDirectory&gt;
                &lt;/configuration&gt;
                &lt;goals&gt;
                    &lt;goal&gt;test-compatibility&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-register/src/main/java/com.kumuluz.ee.samples.discovery.register/Customer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.discovery.register;

/**
 * @author Urban Malc
 */
public class Customer {

    private String id;
    private String firstName;
    private String lastName;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</pre></body></html>




File path: kumuluzee-graphql-advanced/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-graphql" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/Faculty&lt;/jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.graphql_advanced.entities.Assistant&lt;/class&gt;
        &lt;class&gt;com.kumuluz.ee.samples.graphql_advanced.entities.Lecturer&lt;/class&gt;
        &lt;class&gt;com.kumuluz.ee.samples.graphql_advanced.entities.Person&lt;/class&gt;
        &lt;class&gt;com.kumuluz.ee.samples.graphql_advanced.entities.Student&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source" value="sql-scripts/init-db.sql"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka/kumuluzee-streaming-kafka-streams/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/postgres-customers.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: postgres-customers-deployment
  namespace: kumuluzee-blog
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-customers
    spec:
      containers:
        - image: postgres:latest
          name: postgres-customers
          env:
            - name: POSTGRES_USER
              value: dbuser
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: customer
          ports:
          - containerPort: 5432
            protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-customers
  namespace: kumuluzee-blog
spec:
  type: ClusterIP
  ports:
  - port: 5433
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres-customers</pre></body></html>




File path: kumuluzee-jcache/src/main/java/com/kumuluz/ee/samples/jcache/rest/services/InvoiceService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2019 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.jcache.rest.services;

import com.kumuluz.ee.samples.jcache.rest.lib.InvoiceData;

/**
 * @author cen1
 * @since 3.6.0
 */
public interface InvoiceService {

    InvoiceData putInvoice(String key, InvoiceData data);

    InvoiceData getInvoice(String key);

    InvoiceData getInvoiceDefault(String key);

    InvoiceData getInvoiceMy(String key);
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/resources/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"&gt;

&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-fault-tolerance/customer-api/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  env: dev

  fault-tolerance:
    bulkhead:
      value: 5

    annotation-overrides:
      - class: com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.beans.OrdersBean
        method: findOrdersByCustomerId
        annotation: timeout
        parameters:
          value: 1500
      - class: com.kumuluz.ee.samples.circuit_breaker_hystrix.customer.beans.OrdersBean
        method: findOrdersByCustomerId
        annotation: circuit-breaker
        parameters:
          request-threshold: 10
          failure-ratio: 0.3
          delay: 3000

orders-api:
  path: http://localhost:8081/v1/orders
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-tutorial&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;customers&lt;/module&gt;
        &lt;module&gt;orders&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;

        &lt;kumuluzee.version&gt;2.6.0&lt;/kumuluzee.version&gt;
        &lt;kumuluzee-rest.version&gt;1.1.0&lt;/kumuluzee-rest.version&gt;
        &lt;kumuluzee-logs.version&gt;1.3.0&lt;/kumuluzee-logs.version&gt;
        &lt;kumuluzee-cors.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-cors.version&gt;
        &lt;kumuluzee-config.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-config.version&gt;
        &lt;kumuluzee-discovery.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-discovery.version&gt;
        &lt;kumuluzee-fault-tolerance.version&gt;1.0.0-SNAPSHOT&lt;/kumuluzee-fault-tolerance.version&gt;
        &lt;kumuluzee-metrics.version&gt;1.1.0-SNAPSHOT&lt;/kumuluzee-metrics.version&gt;
        &lt;kumuluzee-security.version&gt;1.1.0-SNAPSHOT&lt;/kumuluzee-security.version&gt;

        &lt;postgresql.version&gt;42.1.4&lt;/postgresql.version&gt;
        &lt;swagger.version&gt;1.5.16&lt;/swagger.version&gt;
        &lt;httpclient.version&gt;4.5.3&lt;/httpclient.version&gt;
    &lt;/properties&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;sonatype-snapshots&lt;/id&gt;
            &lt;name&gt;Sonatype Snapshots&lt;/name&gt;
            &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;
            &lt;releases&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/releases&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;

    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;sonatype-snapshots&lt;/id&gt;
            &lt;name&gt;Sonatype Snapshots&lt;/name&gt;
            &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;
            &lt;releases&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/releases&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;

    &lt;dependencyManagement&gt;

        &lt;!-- KumuluzEE dependencies --&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-rest.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.cors&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-cors&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-cors.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-fault-tolerance-hystrix&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-fault-tolerance.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;!-- External dependencies --&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
                &lt;version&gt;${postgresql.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.swagger&lt;/groupId&gt;
                &lt;artifactId&gt;swagger-core&lt;/artifactId&gt;
                &lt;version&gt;${swagger.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;io.swagger&lt;/groupId&gt;
                &lt;artifactId&gt;swagger-jersey2-jaxrs&lt;/artifactId&gt;
                &lt;version&gt;${swagger.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
                &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
                &lt;version&gt;${httpclient.version}&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;!-- Project modules dependencies --&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
                &lt;artifactId&gt;customers-api&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
                &lt;artifactId&gt;customers-business-logic&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
                &lt;artifactId&gt;customers-persistence&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
                &lt;artifactId&gt;orders-api&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
                &lt;artifactId&gt;orders-business-logic&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
                &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-metrics/src/main/java/com/kumuluz/ee/samples/kumuluzee_metrics/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.kumuluzee_metrics;

import java.util.ArrayList;
import java.util.List;

public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(int customerId) {
        for (Customer customer : customers) {
            if (customer.getId() == customerId)
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(int customerId) {
        for (Customer customer : customers) {
            if (customer.getId() == customerId) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/exceptionmappers/NotFoundExceptionMapper.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.exceptionmappers;


import com.kumuluz.ee.samples.tutorial.customers.api.v1.dtos.Error;

import javax.enterprise.context.ApplicationScoped;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

@Provider
@ApplicationScoped
public class NotFoundExceptionMapper implements ExceptionMapper&lt;NotFoundException&gt; {

    @Override
    public Response toResponse(NotFoundException e) {

        Error error = new Error();
        error.setStatus(404);
        error.setCode("resource.not.found");
        error.setMessage(e.getMessage());

        return Response
                .status(Response.Status.NOT_FOUND)
                .entity(error)
                .build();
    }
}
</pre></body></html>




File path: kumuluzee-config-zookeeper/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-config-zookeeper&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Config ZooKeeper sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Config extensions usage sample with KumuluzEE and Apache ZooKeeper&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-config.version&gt;1.4.0-SNAPSHOT&lt;/kumuluzee-config.version&gt;
        &lt;log4j-slf4j.version&gt;2.13.1&lt;/log4j-slf4j.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-zookeeper&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
            &lt;version&gt;${log4j-slf4j.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-graphql-jpa-security/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE GraphQL sample with JPA, CDI and Security

&gt; Enable security on a GraphQL microservice.

The objective of this sample is to demonstrate how to add security to your existing GraphQL endpoint. This sample 
builds on previous sample: [KumuluzEE JPA and CDI with GraphQL](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-graphql-jpa-simple).

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

In order to run this sample you will have to setup a local PostgreSQL database:
- __database host__: localhost:5432
- __database name__: customers
- __user__: postgres
- __password__: postgres

The required tables will be created automatically upon running the sample.
You can run databases with docker:
```bash
docker run -d --name pg-graphql -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=customers -p 5432:5432 postgres:latest
```

Due to added security, running Keycloak is also required. You can run it with docker:

```bash
$ docker run -p 8082:8080 \
        -e KEYCLOAK_USER=admin \
        -e KEYCLOAK_PASSWORD=admin \
        -e DB_VENDOR=h2 \
        quay.io/keycloak/keycloak:11.0.2
```

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-graphql-jpa-security
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* GraphQL endpoint - http://localhost:8080/graphql
* GraphiQL endpoint - http://localhost:8080/graphiql (playground for executing queries)

To shut down the example simply stop the processes in the foreground.

&gt; Postman is recommended for making requests due to GraphiQL not supporting sending Bearer tokens. GraphiQL can still 
&gt; be used for testing query syntax and for checking the structure of requests.

## Tutorial

This tutorial will guide you through the steps required to create a simple GraphQL microservice with security and 
pack it as a KumuluzEE microservice. We will extend the existing 
[KumuluzEE JPA and CDI sample with GraphQL](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-graphql-jpa-simple).
Therefore, first complete the existing sample tutorial, or clone the sample code. We will use PostgreSQL in this
tutorial.

We will follow these steps:
* Complete the tutorial for [KumuluzEE JPA and CDI with GraphQL](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-graphql-jpa-simple) or clone the existing sample
* Add Maven dependencies
* Configure Keycloak
* Add GraphQLApplication class
* Implement security
* Build the microservice
* Run it

### Add Maven dependencies

Since your starting point is the existing `KumuluzEE JPA and CDI sample with GraphQL`, you should already have the
dependencies for `kumuluzee-bom`, `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey`,
`kumuluzee-cdi-weld`, `kumuluzee-jpa-eclipselink`, `kumuluzee-graphql-mp`, `kumuluzee-json-p-jsonp`,
`kumuluzee-json-b-yasson`, `kumuluzz-graphql-ui` and `postgresql` configured in `pom.xml`.


Add `kumuluzee-security` and `Keycloak Jetty adapter`:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
     &lt;groupId&gt;org.keycloak&lt;/groupId&gt;
     &lt;artifactId&gt;keycloak-jetty94-adapter&lt;/artifactId&gt;
     &lt;version&gt;${keycloak.version}&lt;/version&gt;
 &lt;/dependency&gt;
```

`kumuluzee-maven-plugin` should already be added to your project from JPA and CDI sample.

### Configure Keycloak

Follow the [Configure Keycloak](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-security-keycloak#configure-keycloak)
steps from `kumuluzee-security-keycloak` sample.

### Add GraphQLApplication class

Before we can enable security on GraphQL endpoint, we need to add a custom class, which extends GraphQLApplication class.
Annotation `GraphQLApplicationClass` is also required.

```java
@GraphQLApplicationClass
public class CustomerApp extends GraphQLApplication {}
```

### Implement security

In order to enable security on our GraphQL endpoint, we need to do the following:

- annotate GraphQLApplication class with `@DeclareRoles` annotation
```java
@GraphQLApplicationClass
@DeclareRoles({"user", "admin"})
public class CustomerApp extends GraphQLApplication {}
```

- annotate desired GraphQL classes with `@Secure` annotation (the classes we want protected)
```java
@RequestScoped
@GraphQLApi
@Secure
public class CustomerResource { ... }
```

- annotate queries and mutations with security annotations (`PermitAll`, `RolesAllowed`, `DenyAll`...)
```java
@RequestScoped
@GraphQLApi
@Secure
public class CustomerResource {

    @Inject
    private CustomerService customerBean;

    @Query
    @PermitAll
    public List&lt;Customer&gt; getAllCustomers() {
       return customerBean.getCustomers();
    }

    @Query
    @RolesAllowed({"user", "admin"})
    public Customer getCustomer(@Name("customerId") String customerId) {
        return customerBean.getCustomer(customerId);
    }

    @Mutation
    @RolesAllowed("admin")
    public Customer addNewCustomer(@Name("customer") Customer customer) {
        customerBean.saveCustomer(customer);
        return customer;
    }

    @Mutation
    @DenyAll
    public void deleteCustomer(@Name("customerId") String customerId) {
        customerBean.deleteCustomer(customerId);
    }
}
```
With these annotations, we have now protected GraphQL endpoint. With `PermitAll`, all authorized requests are permitted.
`RolesAllowed` allows us to specify which user roles can access specific operations. If we want to forbid using
specific operations, we can use `DenyAll`.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.

### Querying endpoint

After following these steps, the GraphQL endpoint can now be queried with Bearer token. To get the token, send a
request to Keycloak auth endpoint: `http://{keycloakhost:port}/auth/realms/{realmname}/protocol/openid-connect/token`
(`http://localhost:8082/auth/realms/customers-realm/protocol/openid-connect/token`).

All secured requests should now include `Authorization` header with content: `Bearer {token}`.
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-servlet/src/main/resources/config.yml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  discovery:
    etcd:
      hosts: http://127.0.0.1:2379
</pre></body></html>




File path: kumuluzee-security-keycloak/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Security sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Security extensions usage sample with KumuluzEE and Keycloak&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-security.version&gt;1.3.0-SNAPSHOT&lt;/kumuluzee-security.version&gt;
        &lt;keycloak.version&gt;5.0.0&lt;/keycloak.version&gt;
        &lt;kumuluzee-config.version&gt;1.2.0-SNAPSHOT&lt;/kumuluzee-config.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.keycloak&lt;/groupId&gt;
            &lt;artifactId&gt;keycloak-jetty94-adapter&lt;/artifactId&gt;
            &lt;version&gt;${keycloak.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.25&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/java/com/kumuluz/ee/samples/kumuluzee_database_schema_migrations_liquibase/Book.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_database_schema_migrations_liquibase;

import org.eclipse.persistence.annotations.UuidGenerator;

import javax.persistence.*;

/**
 * @author Din Music
 * @since 3.13.0
 */
@Entity
@Table
@NamedQuery(
        name = Book.FIND_ALL,
        query = "SELECT b FROM Book b"
)
public class Book {

    public static final String FIND_ALL = "Book.findAll";

    @Id
    @GeneratedValue(generator = "uuid-generator")
    @UuidGenerator(name = "uuid-generator")
    private String id;

    @Column
    private String title;

    @Column
    private String author;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }
}
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-register/Dockerfile
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">FROM openjdk:8u131-jre-alpine


COPY target /usr/src/myapp
WORKDIR /usr/src/myapp

EXPOSE 8080

CMD ["java", "-server", "-cp", "classes:dependency/*", "com.kumuluz.ee.EeApplication"]</pre></body></html>




File path: kumuluzee-reactive-vertx/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Reactive samples using Vert.x

&gt; Samples for KumuluzEE Reactive Vert.x extension

This module contains four samples that will introduce you to KumuluzEE Reactive extension using Vert.x:

- [`kumuluzee-reactive-vertx-publisher`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-publisher) Microservice that publishes messages to Vert.x event bus

- [`kumuluzee-reactive-vertx-listener`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-listener) Microservice that listens to messages on Vert.x event bus

- [`kumuluzee-reactive-vertx-bridge`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge) Microservice that acts as a bridge between KumuluzEE Discovery and Vert.x Service Discovery

- [`simple-verticles`](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-reactive-vertx/simple-verticles) Simple verticle samples for publishing, listening and service discovery

More information about the samples can be found in the README of each sample.

</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-kubernetes/etcd.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: etcd-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: etcd
    spec:
      containers:
      - command:
        - /usr/local/bin/etcd
        - --name
        - etcd0
        - --initial-advertise-peer-urls
        - http://etcd:2380
        - --listen-peer-urls
        - http://0.0.0.0:2380
        - --listen-client-urls
        - http://0.0.0.0:2379
        - --advertise-client-urls
        - http://etcd:2379
        - --initial-cluster-state
        - new
        image: quay.io/coreos/etcd:latest
        name: etcd
        ports:
        - containerPort: 2379
          name: client
          protocol: TCP
        - containerPort: 2380
          name: server
          protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: etcd
spec:
  type: NodePort
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  - name: server
    port: 2380
    protocol: TCP
    targetPort: 2380
  selector:
    app: etcd
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Cloud-native Java EE Microservices with KumuluzEE: REST service using config, discovery, security, metrics, logging and fault tolerance

A goal of this tutorial is to develop a cloud-native Java EE microservice application, using KumuluzEE microservice framework and KumuluzEE extensions. 

We will develop a sample application for managing customers and their orders. The application consists of two microservices; one for managing customer entities and one for managing order entities. We will demonstrate important cloud-native concepts and functionalities that are essential in microservice architecture, such as dynamic configuration (with config server), service discovery, fault tolerance, centralized logging, performance metrics collection, and security mechanisms. 

We will use the following KumuluzEE extensions:
- KumuluzEE REST for implementation of filtering, sorting and pagination on REST resources,
- KumuluzEE Config for dynamic reconfiguration of microservices with the use of configuration servers, 
- KumuluzEE Discovery for service registration and service discovery, 
- KumuluzEE Fault Tolerance for improving the resilience of microservices,
- KumuluzEE Logs for advanced centralized logging, 
- KumuluzEE Metrics for collection of performance metrics, 
- KumuluzEE Security for securing developed REST endpoints.

First, we will create a Maven project that will contain both our microservices. We will then implement both microservices and use the KumuluzEE extensions to implement configuration, service discovery, fault tolerance, logging, metrics and security mechanisms.

Complete source code can be found on the GitHub repository.  

## Create Maven project

The root Maven project will hold both developed microservices. Each microservice will be structured into three modules; 
persistence, with JPA Entities and database access logic, business-logic, with CDI beans holding implementation of 
business logic, and api module, exposing business logic in form of RESTful services. The full structure should be as 
follows:

- kumuluzee-tutorial
    - customers
        - customers-api
        - customers-business-logic
        - customers-persistence
    - orders
        - orders-api
        - orders-business-logic
        - orders-persistence 

We will use the `pom.xml` file of the root project (kumuluzee-tutorial) to define all properties and dependencies which 
will be used in other modules. It should look like this:

```xml
&lt;properties&gt;
    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;

    &lt;!-- other properties --&gt; 

    &lt;kumuluzee.version&gt;2.4.1&lt;/kumuluzee.version&gt;
&lt;/properties&gt;

&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        
        &lt;!-- other dependencies --&gt;
        
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

## Customer microservice

First, we will implement the customer microservice that will provide CRUD functionalities for the custumer objects. 

### Maven dependencies

Before we start writing code, we have to add all the Maven dependencies that we will need in this microservice.

#### Persistence module

In the persistence module we will need the JPA dependency for accessing the database. We will use Postgresql database, 
hence we also need the Postgresql JDBC driver.

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

#### Business-logic module 

Business logic module will implement the business logic in CDI beans. We need to add a CDI implementation, which is 
available in the `kumuluzee-cdi-weld` module. We will also need JPA entities and DB access logic, defined in our 
`persistence` module.

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;artifactId&gt;persistence&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

#### API module

API module will be the core module of our microservice that will be executed. It needs `kumuluzee-core` 
and `kumuluzee-servlet-jetty` dependecies. It will expose business logic as a RESTful services, so it requires the `kumuluzee-jax-rs-jersey` dependency and the `business-logic` module. We will also add the `kumuluzee-maven-plugin` to package our microservice in a 
Uber JAR.

```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;artifactId&gt;business-logic&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Develop microservice

Now it is time to implement our microservice.

#### Add config

First, we will add the basic KumuluzEE configuration in a `config.yml` configuration file. You can read more about 
KumuluzEE configuration framework [here](https://github.com/kumuluz/kumuluzee/wiki/Configuration). In our case, we 
will specify service name, version, environment in which the microservice is deployed, and set the server http port and 
the base-url. 

```bash
kumuluzee:
  name: customer-service
  env:
    name: dev
  version: 1.0.0
  server:
    base-url: http://localhost:8080
    http:
      port: 8080
```

#### Develop persistence module

Before we implement the persistance module, we have to run the database instance. We will use Docker to achieve that. To 
run a new Postgresql instance in Docker, use the following command:  

```bash
docker run -d --name postgres-customers -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=customer -p 5432:5432 postgres:latest
```

##### Create entity

In this step, we will define a JPA entity that will be used to represent the customers. We will create the following class:

```bash
@Entity(name = "customer")
@NamedQueries(value =
        {
                @NamedQuery(name = "Customer.getAll", query = "SELECT c FROM customer c")
        })
@UuidGenerator(name = "idGenerator")
public class Customer {

    @Id
    @GeneratedValue(generator = "idGenerator")
    private String id;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    private String address;

    @Column(name = "date_of_birth")
    private Date dateOfBirth;

    // getter and setter methods
    
}
```

##### Define JDBC datasource in config 

A JDBC datasource has to be defined with KumuluzeEE configuration framework. We have to specify the datasource name and the database 
connection properties with the following configuration keys:

```bash
kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customer
      username: postgres
      password: postgres
      pool:
        max-size: 20
```

##### Define persistance.xml

In order for our application to connect to the defined datasource, we have to specify a persistence unit in 
the `persistence.xml`. The following configuration will automatically execute a SQL script on microservice startup to 
populate the database with the development data. Such configuration is useful for development purposes, but not for 
production environments. 

```xml
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" version="2.1"&gt;
    &lt;persistence-unit name="customers-jpa" transaction-type="RESOURCE_LOCAL"&gt;
        &lt;non-jta-data-source&gt;jdbc/CustomersDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.tutorial.customers.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.sql-load-script-source"
                      value="sql-scripts/init-customers.sql" /&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
```

#### Develop business logic module 

Business logic module will implement CRUD operations for managing customer entities. It will be implemented as an 
application scoped CDI bean. A `beans.xml` file has to be placed in `resources/META-INF` folder in order to enable CDI. 
A CDI bean with business logic should look like this:

```java
@RequestScoped
public class CustomersBean {

    @PersistenceContext(unitName = "customers-jpa")
    private EntityManager em;

    public List&lt;Customer&gt; getCustomers(){

        Query query = em.createNamedQuery("Customer.getAll", Customer.class);

        return query.getResultList();

    }
    
    public Customer getCustomer(String customerId) {
    
            Customer customer = em.find(Customer.class, customerId);
    
            if (customer == null) {
                throw new NotFoundException();
            }
    
            return customer;
        }
    
        public Customer createCustomer(Customer customer) {
    
            try {
                beginTx();
                em.persist(customer);
                commitTx();
            } catch (Exception e) {
                rollbackTx();
            }
    
            return customer;
        }
    
        public Customer putCustomer(String customerId, Customer customer) {
    
            Customer c = em.find(Customer.class, customerId);
    
            if (c == null) {
                return null;
            }
    
            try {
                beginTx();
                customer.setId(c.getId());
                customer = em.merge(customer);
                commitTx();
            } catch (Exception e) {
                rollbackTx();
            }
    
            return customer;
        }
    
        public boolean deleteCustomer(String customerId) {
    
            Customer customer = em.find(Customer.class, customerId);
    
            if (customer != null) {
                try {
                    beginTx();
                    em.remove(customer);
                    commitTx();
                } catch (Exception e) {
                    rollbackTx();
                }
            } else
                return false;
    
            return true;
        }

}
```

#### Develop API module

The API module will expose the business logic as a set of RESTful services. First, add `beans.xml` file to 
`resources/META-INF` in order to enable CDI. 

##### Application class

To enable JAX-RS, we first add a class that extends `javax.ws.rs.core.Application` and annotate it with 
`@ApplicationPath`.

```java
@ApplicationPath("/v1")
public class CustomerApplication extends Application {
}
```

##### JAX-RS resource 

In the next step, we add a resource class that will expose the business logic. It should look like this:

```java
@RequestScoped
@Path("/customers")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class CustomersResource {

    @Inject
    private CustomersBean customersBean;

    @GET
    public Response getCustomers() {

        List&lt;Customer&gt; customers = customersBean.getCustomers();

        return Response.ok(customers).build();
    }
    
    @GET
    @Path("/{customerId}")
    public Response getCustomer(@PathParam("customerId") String customerId) {

        Customer customer = customersBean.getCustomer(customerId);

        if (customer == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }

        return Response.status(Response.Status.OK).entity(customer).build();
    }

    @POST
    public Response createCustomer(Customer customer) {

        if ((customer.getFirstName() == null || customer.getFirstName().isEmpty()) || (customer.getLastName() == null
                || customer.getLastName().isEmpty())) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        } else {
            customer = customersBean.createCustomer(customer);
        }

        if (customer.getId() != null) {
            return Response.status(Response.Status.CREATED).entity(customer).build();
        } else {
            return Response.status(Response.Status.CONFLICT).entity(customer).build();
        }
    }

    @PUT
    @Path("{customerId}")
    public Response putZavarovanec(@PathParam("customerId") String customerId, Customer customer) {

        customer = customersBean.putCustomer(customerId, customer);

        if (customer == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        } else {
            if (customer.getId() != null)
                return Response.status(Response.Status.OK).entity(customer).build();
            else
                return Response.status(Response.Status.NOT_MODIFIED).build();
        }
    }

    @DELETE
    @Path("{customerId}")
    public Response deleteCustomer(@PathParam("customerId") String customerId) {

        boolean deleted = customersBean.deleteCustomer(customerId);
    
        if (deleted) {
            return Response.status(Response.Status.GONE).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
```

##### KumuluzEE Rest

Now it is time to add our first KumuluzEE extension. We will use KumuluzEE Rest to add best practices for developing 
RESTful services, such as sorting, filtering and pagination. 

First, we add a maven dependency:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
    &lt;version&gt;1.1.0&lt;/version&gt;
&lt;/dependency&gt;
```

Then, we inject `UriInfo` object into the REST resource. `UriInfo` holds the data about the request's URL and will be used as
an input to the KumuluzEE REST extension. We inject it as:

```java
@Context
protected UriInfo uriInfo;
```

We add a new REST endpoint, which will be used to get filtered, sorted or paginated requests:

```java
@GET
@Path("/filtered")
public Response getCustomersFiltered() {

    List&lt;Customer&gt; customers;

    customers = customersBean.getCustomersFilter(uriInfo);

    return Response.status(Response.Status.OK).entity(customers).build();
}
```

We also add a method to the CDI bean. It uses the `JPAUtils` object to query filtered entities:

```java
public List&lt;Customer&gt; getCustomersFilter(UriInfo uriInfo) {

    QueryParameters queryParameters = QueryParameters.query(uriInfo.getRequestUri().getQuery()).defaultOffset(0)
            .build();

    List&lt;Customer&gt; customers = JPAUtils.queryEntities(em, Customer.class, queryParameters);

    return customers;
}
```

###### Test

We can test the new endpoint with the following URLs.

Pagination: 
- localhost:8080/v1/customers/filtered?offset=1&amp;limit=1

Sorting:
- localhost:8080/v1/customers/filtered?order=dateOfBirth DESC

Filtering:
- localhost:8080/v1/customers/filtered?filter=firstName:EQ:James
- localhost:8080/v1/customers/filtered?filter=firstName:NEQ:James
- localhost:8080/v1/customers/filtered?filter=lastName:LIKE:S%
- localhost:8080/v1/customers/filtered?where=dateOfBirth:GT:'2010-01-01T00:00:00%2B00:00'

##### Additional JAX-RS features

In this section we will add some additional JAX-RS features to our microservice.

###### Configure Jackson serializer

A Jackson serializer will be used to correctly display dates in our microservice. We implement it as a provider class
 that extends `javax.ws.rs.ext.ContextResolver`:

```java
@Provider
public class JacksonProducer implements ContextResolver&lt;ObjectMapper&gt; {

    private final ObjectMapper mapper;

    public JacksonProducer() {

        mapper = new ObjectMapper();

        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        mapper.setDateFormat(dateFormat);
    }

    @Override
    public ObjectMapper getContext(Class&lt;?&gt; aClass) {
        return mapper;
    }
}
```

###### Exception mapper 

An exception mapper will be used to map errors into readable error messages. First, we define a DTO that will hold 
the error message: 

```java
public class Error {

    private Integer status;
    private String code;
    private String message;

    // getter and setter methods 

}
```

Then we add a mapper that will wrap the `NotFoundExceptions` into newly defined Error objects:

```java
@Provider
@ApplicationScoped
public class NotFoundExceptionMapper implements ExceptionMapper&lt;NotFoundException&gt; {

    @Override
    public Response toResponse(NotFoundException e) {

        Error error = new Error();
        error.setStatus(404);
        error.setCode("resource.not.found");
        error.setMessage(e.getMessage());

        return Response
                .status(Response.Status.NOT_FOUND)
                .entity(error)
                .build();
    }
}
```

### Run and test the microservice

We have two options for running our microservice:

1. We can use an IDE of our choice to run our microservice. We simply run it as Java application, with the main class set 
to `com.kumuluz.ee.EeApplication`.

2. We can use Maven to build it and `java` to run the Uber JAR.

```bash
mvn clean package
```

```bash
java -jar target/customers-api-1.0.0-SNAPSHOT.jar
```

We can test our microservice by accessing the following URL: http://localhost:8080/v1/customers

### Package microservice as Docker image and run it

Now, it is time to package our microservice as a Docker image and run it as a Docker container. First, we will 
specify a dockerfile with the information on image-building process:

```yaml
FROM openjdk:8-jre-alpine

RUN mkdir /app

WORKDIR /app

ADD ./customers-api/target/customers-api-1.0.0-SNAPSHOT.jar /app

EXPOSE 8080

CMD ["java", "-jar", "customers-api-1.0.0-SNAPSHOT.jar"]
```

To create the Docker image, perform the folowig steps:
- build the microservice with `mvn clean package`.
- build the Docker image with `docker build -t customers-api:1.00 .`.

To run the Docker container from the built image run: `docker run -e 
KUMULUZEE_DATASOURCES0_CONNECTIONURL=jdbc:postgresql://databaseUrl:5432/customer -p 8080:8080 customers-api:1.00`

#### Docker compose

Instead of running Postgresql and microservice seperately, we could package them as a Docker compose application with 
the following configuration:

```yaml
version: "3"
services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=customer
    ports:
      - "5432:5432"
  customer-service:
    image: customers-api:1.00
    environment:
      - KUMULUZEE_DATASOURCES0_CONNECTIONURL=jdbc:postgresql://postgres:5432/customer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
```


## Order microservice

Now we will develop the second microservice that will be used for managing the data about orders. Each order will be 
related to one customer. 

### Develop microservice

To develop the order microservice, we have to repeat similar steps as with the customer microservice. 

First, we run another Postgresql database instance for storing the order data: 

```bash
docker run -d --name postgres-orders -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=order -p 5433:5432 postgres:latest
```

Then we define the `Order` JPA entity. We extend the `Customer` entity with the data about its orders: 

```java
@Transient
private List&lt;Order&gt; orders;
```

Since the orders field is annotated with `@Transient`, the orders will not get fetched and stored into the database by JPA. 
Instead, we will retrieve them from the order microservice.

All the other steps of developing the order microservice are very similar to the customer microservice and will not be 
repeated here.

## Connect the two microservices 

We will now extend the customer microservice so that it will return the orders of each queried customer. We will extend 
the business logic CDI bean with the remote http call to the order service. We have to add the following fields and methods:

```java
private ObjectMapper objectMapper;

private HttpClient httpClient;

private String basePath;

@Inject
private CustomersBean customersBean;

@PostConstruct
private void init() {
    httpClient = HttpClientBuilder.create().build();
    objectMapper = new ObjectMapper();

    basePath = "http://localhost:8081/v1/";
}

public Customer getCustomer(String customerId) {

    Customer customer = em.find(Customer.class, customerId);

    if (customer == null) {
        throw new NotFoundException();
    }

    List&lt;Order&gt; orders = customersBean.getOrders(customerId);
    customer.setOrders(orders);

    return customer;
}

public List&lt;Order&gt; getOrders(String customerId) {

    try {
        HttpGet request = new HttpGet(basePath + "/v1/orders?where=customerId:EQ:" + customerId);
        HttpResponse response = httpClient.execute(request);

        int status = response.getStatusLine().getStatusCode();

        if (status &gt;= 200 &amp;&amp; status &lt; 300) {
            HttpEntity entity = response.getEntity();

            if (entity != null)
                return getObjects(EntityUtils.toString(entity));
        } else {
            String msg = "Remote server '" + basePath + "' is responded with status " + status + ".";
            log.error(msg);
            throw new InternalServerErrorException(msg);
        }

    } catch (IOException e) {
        String msg = e.getClass().getName() + " occured: " + e.getMessage();
        log.error(msg);
        throw new InternalServerErrorException(msg);
    }
    return new ArrayList&lt;&gt;();

}
```

We can test the newly developed feature by accessing the following URL: localhost:8080/v1/customers/1 It should 
see the customer object with two orders.

## KumuluzEE Config

We will now add the option to disable the remote calls to the order service using KumuluzEE configuration framework. We will also  integrate a configuration server (etcd and Consul are supported). First, we add a configuration key into the `config.yml` file:

```yalm
rest-properties:
  external-dependencies:
    order-service:
      enabled: true
```

In the next step we add a properties bean that will load, hold and update the configuration properties at runtime.

```java
@ApplicationScoped
@ConfigBundle("rest-properties")
public class RestProperties {

    @ConfigValue(value = "external-dependencies.order-service.enabled", watch = true)
    private boolean orderServiceEnabled;

    // getter and setter methods
}
```

We add an if statement to the `CustomerBean` class:

```java
if (restProperties.isOrderServiceEnabled()) {
    List&lt;Order&gt; orders = customersBean.getOrders(customerId);
    customer.setOrders(orders);
}
```

### Configuration server

Now it is time to add the configuration server, which will store the configuration remotely in the server instead of the file (or environemnt settings or properties). First, we add the KumuluzEE Config extension that will add the configuration 
server as one of the available configuration sources. We use etcd in this example, although Conusl is also supported:

```bash
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-config-etcd&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-config.version}&lt;/version&gt;
&lt;/dependency&gt;
```

We will use etcd as configuration server. We could replace it with Consul by just replacing the Maven dependency to 
`kumuluzee-config-consul`.

We can now run etcd server instance with the following Docker command:

```bash
$ docker run -d -p 2379:2379 \
    --name etcd \
    --volume=/tmp/etcd-data:/etcd-data \
    quay.io/coreos/etcd:latest \
    /usr/local/bin/etcd \
    --name my-etcd-1 \
    --data-dir /etcd-data \
    --listen-client-urls http://0.0.0.0:2379 \
    --advertise-client-urls http://0.0.0.0:2379 \
    --listen-peer-urls http://0.0.0.0:2380 \
    --initial-advertise-peer-urls http://0.0.0.0:2380 \
    --initial-cluster my-etcd-1=http://0.0.0.0:2380 \
    --initial-cluster-token my-etcd-token \
    --initial-cluster-state new \
    --auto-compaction-retention 1 \
    -cors="*"
```

We can edit the values inside etcd with the following [editor](henszey.github.io/etcd-browser/).

Before we can access the configuration server, we have to provide access configuration in the `config.yml` file:

```yaml
config:
  etcd:
    hosts: http://192.168.99.100:2379
```

We can now override the configuration from the configuration file and disable the external dependency calls by setting the 
following etcd key to `false`: 
- /environments/dev/services/customer-service/1.0.0/config/rest-properties/external-dependencies/order-service/enabled

## KumuluzEE Discovery

In this step, we will add the KumuluzEE Discovery extension to enable service registration and dynamic discovery instead of 
manually wiring the microservice URL. This is particularly useful in Kubernetes and other container orchestration environments. We will register the order microservice and use service discovery in the customer microservice.

In this example, we will use etcd for service discovery. Consul is supported as well. 

Add the following dependency:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
&lt;/dependency&gt;
```

We have to provide the configuration to access the etcd server:

```yaml
discovery:
  etcd:
    hosts: http://192.168.99.100:2379
```

### Register service

To register the order service, add the `@RegisterService` to the Application class:

```java
@ApplicationPath("/v1")
@RegisterService
public class OrdersApplication extends Application {
}
```

### Discover service

We will use service discovery in `CustomerBean` to get the URL of the registered order service. We retrieve service 
URL with simple injection:

```java
@Inject
@DiscoverService(value = "order-service", environment = "dev", version = "*")
private Optional&lt;String&gt; basePath;
```

We can now remove manual wiring from the `init()` method.

We could also use Consul instead of etcd by simply changing Maven dependency to `kumuluzee-discovery-consul`.

## Fault tolerance

To achieve high resilience of our microservice application, we have to provide adequate fault tolerance mechanisms. 
We will use KumuluzEE Fault Tolerance extension. First, add the following Maven dependency: 

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-fault-tolerance-hystrix&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
```

### Adding fallback mechanisms

The most critical point of failure in our application is the communication between the two microservices. We do not want the 
customer microservice to be unavailable if the order microservice fails. To achieve this, we will add the fault tolerance 
fallback mechanisms to the `getOrders` method, We will enable cirrcuit breaker, fallback and timeout:  

```java
@RequestScoped
@GroupKey("orders")
public class CustomersBean {
    
    ...

    @CircuitBreaker(failureRatio = 0.3)
    @Fallback(fallbackMethod = "getOrdersFallback")
    @CommandKey("http-get-order")
    @Timeout(value = 500)
    public List&lt;Order&gt; getOrders(String customerId) {
    
    }
    
    public List&lt;Order&gt; getOrdersFallback(String customerId) {
        return new ArrayList&lt;&gt;();
    }
    

}
```

We enabled fault tolerance with the annotation `@GroupKey` on the class. We added annotations on the `getOrders` method. 
Annotation `@CircuitBreaker` opens circuit breaker if the request rate is higher than 30%. `@Timeout` prevents the 
method to wait for the response longer than 500 ms. With `@Fallback` we defined a method that will be called in case 
errors occcur. 


## Logging

In the microservice architecture, logs should be collected in the central log management system. We will use the KumuluzEE Logs to 
enable advanced logging mechanisms and send logs to elastic Stack using Logstash. First, add the following Maven dependency:

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-logs.version}&lt;/version&gt;
&lt;/dependency&gt;
```

### Configure Log4j2

Add the `log4j2` configuration in the configuration file:

```yaml
kumuluzee:
    logs:
        config-file:
          '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
           &lt;Configuration name="tutorial-logging"&gt;
               &lt;Appenders&gt;
                   &lt;Console name="console" target="SYSTEM_OUT"&gt;
                       &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
                   &lt;/Console&gt;
    
                   &lt;!-- A socket definition for sending logs into Logstash using TCP and JSON format.--&gt;
                   &lt;!--&lt;Socket name="logstash" host="192.168.99.100" port="5043" protocol="tcp"&gt;
                      &lt;JSONLayout complete="false" compact="true" eventEol="true" charset="UTF-8" properties="true"/&gt;
                   &lt;/Socket&gt;--&gt;
    
               &lt;/Appenders&gt;
               &lt;Loggers&gt;
                   &lt;!-- Default logger --&gt;
                   &lt;Root level="trace"&gt;
                       &lt;AppenderRef ref="console"/&gt;
                       &lt;AppenderRef ref="logstash"/&gt;
                   &lt;/Root&gt;
               &lt;/Loggers&gt;
           &lt;/Configuration&gt;'
```

This configuration outputs logs to the console and to the Logstash instance on the specified address.

### Log endpoint calls

To enable automatic logging of all REST endpoint calls, add the `@Log` annotation to the `CustomerResource` class.

To log additional context parameters, such as microservice name, version and environment, you can implement the 
interceptor that will inject the data to the logging system:

```java
@Log
@Interceptor
@Priority(Interceptor.Priority.PLATFORM_BEFORE)
public class LogContextInterceptor {

    @AroundInvoke
    public Object logMethodEntryAndExit(InvocationContext context) throws Exception {

        ConfigurationUtil configurationUtil = ConfigurationUtil.getInstance();

        HashMap settings = new HashMap();

        settings.put("environmentType", configurationUtil.get("kumuluzee.env.name").orElse(null));
        settings.put("applicationName", configurationUtil.get("kumuluzee.name").orElse(null));
        settings.put("applicationVersion", configurationUtil.get("kumuluzee.version").orElse(null));
        settings.put("uniqueInstanceId", EeRuntime.getInstance().getInstanceId());

        settings.put("uniqueRequestId", UUID.randomUUID().toString());

        try (final CloseableThreadContext.Instance ctc = CloseableThreadContext.putAll(settings)) {
            Object result = context.proceed();
            return result;
        }
    }
}
```

All REST call are now logged in the following format: 

```
TRACE ENTRY[ METHOD ] Entering method. {applicationName=customer-service, applicationVersion=1.0.0, class=com.kumuluz.ee.samples.tutorial.customers.api.v1.resources.CustomersResource, environmentType=dev, method=getCustomer, parameters=[1], uniqueInstanceId=4da94ff8-f9ad-4702-a84a-aecd6cb15abf, uniqueRequestId=0db2128b-1887-46e2-bf0f-15c4c43e73c2}
```

## Metrics

If we want to monitor the performance of our microservices, we can add the KumuluzEE Metrics extension, which implements
the [Eclipse MicroProfile Metrics](https://github.com/eclipse/microprofile-metrics) specification. To enable metrics 
collection include the following dependency: 

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
&lt;/dependency&gt;
```

KumuluzEE Metrics automatically collects the performance metrics of JVM, http calls to specified endpoints and other 
user-defined metrics. Collected metrics are available on the following URL: `http://localhost:8080/metrics`. By default, 
metrics are exposed in a Prometheus format. To get metrics as a JSON object, add header `Accept: application/json`.

### Web instrumentation

To enable monitoring of REST calls on the customer endpoint, we add the following configuration:

```yaml
metrics:
  web-instrumentation:
    - name: customers-endpoint
      url-pattern: /v1/customers/*
```

### Custom metrics

We can monitor the number of deleted customers by annotating the `deleteCustomer` method with 
`@Metered(name = "delete-requests")`.

## Security

We can restrict access to the REST endpoint with the KumuluzEE Security extension. We will use Keycloak in this sample. To include it, add the following 
dependency: 

```xml
&lt;dependency&gt;
    &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
    &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
    &lt;version&gt;${kumuluzee-security.version}&lt;/version&gt;
&lt;/dependency&gt;
```

To start and configure a Keycloak instance follow the tutorial on [KumuluzEE Security sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-security-keycloak#set-up-keycloack).

Add the Keycloak configuration into the configuration file:

```yaml
kumuluzee:
  security:
      keycloak:
        json: '{"realm": "customers-realm",
                "bearer-only": true,
                "auth-server-url": "http://localhost:8080/auth",
                "ssl-required": "external",
                "resource": "customers-api"}'
```


### Implement security

First, we have to enable the security using the `@DeclareRoles` annotation on the main application class of the REST 
service:

```java
@DeclareRoles({"user", "admin"})
@ApplicationPath("v1")
public class CustomerApplication extends Application {
}
```

To restrict the access on the selected REST endpoint, use the `@RolesAllowed ` annotation.

```java
@DELETE
@Path("{customerId}")
@RolesAllowed("admin")
@Metered(name = "delete-requests")
public Response deleteCustomer(@PathParam("customerId") String customerId)
```

To get the access token that you will use for accessing secured endpoints, follow the [KumuluzEE Security sample](https://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-security-keycloak#test-security).

## Conclusion

In this tutorial, we have used the KumuluzEE framework to build a cloud-native microservice application composed of two microservices. We demonstrated how to use KumuluzEE extensions to provide microservice configuration, discovery, fault tolerance, logging, metrics collection and security. Source code can be found on the Github repository.  
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-api/src/main/java/com/kumuluz/ee/samples/tutorial/orders/api/v1/resources/OrdersResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.orders.api.v1.resources;

import com.kumuluz.ee.samples.tutorial.orders.Order;
import com.kumuluz.ee.samples.tutorial.orders.cdi.OrdersBean;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.util.List;

@RequestScoped
@Path("/orders")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class OrdersResource {

    @Context
    private UriInfo uriInfo;

    @Inject
    private OrdersBean ordersBean;

    @GET
    public Response getOrders() {

        List&lt;Order&gt; orders = ordersBean.getOrders(uriInfo);

        return Response.ok(orders).build();
    }

    @GET
    @Path("/{orderId}")
    public Response getOrder(@PathParam("orderId") String orderId) {

        Order order = ordersBean.getOrder(orderId);

        if (order == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }

        return Response.status(Response.Status.OK).entity(order).build();
    }

    @POST
    public Response createOrder(Order order) {

        if (order.getTitle() == null || order.getTitle().isEmpty()) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        } else {
            order = ordersBean.createOrder(order);
        }

        if (order.getId() != null) {
            return Response.status(Response.Status.CREATED).entity(order).build();
        } else {
            return Response.status(Response.Status.CONFLICT).entity(order).build();
        }
    }

    @PUT
    @Path("{orderId}")
    public Response putZavarovanec(@PathParam("orderId") String orderId, Order order) {

        order = ordersBean.putOrder(orderId, order);

        if (order == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
        } else {
            if (order.getId() != null)
                return Response.status(Response.Status.OK).entity(order).build();
            else
                return Response.status(Response.Status.NOT_MODIFIED).build();
        }
    }

    @DELETE
    @Path("{orderId}")
    public Response deleteCustomer(@PathParam("orderId") String orderId) {

        boolean deleted = ordersBean.deleteOrder(orderId);

        if (deleted) {
            return Response.status(Response.Status.GONE).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
</pre></body></html>




File path: kumuluzee-jcache/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-jcache&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE JCache sample&lt;/name&gt;
    &lt;description&gt;JCache usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
	    &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.rest&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-rest-core&lt;/artifactId&gt;
            &lt;version&gt;1.3.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-logs-log4j2&lt;/artifactId&gt;
            &lt;version&gt;1.4.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.jcache&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jcache-caffeine&lt;/artifactId&gt;
            &lt;version&gt;1.1.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-business-logic/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-kubernetes/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery - Kubernetes sample

&gt; Deploy KumuluzEE microservices, which use Service Discovery to Kubernetes cluster.

The objective of this sample is to show how to deploy services, using KumuluzEE service discovery to Kubernetes cluster.
The tutorial will guide you through the necessary steps. You will build two KumuluzEE samples and deploy them to
Kubernetes cluster.
Required knowledge: basic familiarity with Kubernetes and basic familarity with KumuluzEE service discovery.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

4. kubectl command tool:
    * If you have installed kubectl, you can check the version by typing the following in a command line:
    
        ```
        kubectl version
        ```

5. Kubernetes cluster:
    * This sample uses local [minikube](http://kubernetes.io/docs/tasks/tools/install-minikube/) cluster.
    You can check the version by typing the following in a command line:
    
        ```
        minikube version
        ```

6. Docker:
    * If you have installed [docker](http://docs.docker.com/engine/installation/)
     you can check the version by typing the following in a command line:
    
        ```
        docker version
        ```

## Prerequisites

In order to start this sample, you will have to setup a Kubernetes cluster and configure kubectl tool to use it.
To run a local minikube cluster run following commands:

1. Start minikube cluster and configure kubectl to use it:
    
    ```bash
    $ minikube start
    ```

2. Configure docker to use minikube registry:

    ```bash
    $ eval $(minikube docker-env)
    ```

## Usage

1. Build `discovery-discover-jaxrs` and `discovery-register` samples using maven and create Docker images:

    ```bash
    $ cd discovery-samples/discovery-discover-jaxrs
    $ mvn clean package
    $ docker build -t discover-sample:v1 .
    $ cd ../discovery-register
    $ mvn clean package
    $ docker build -t register-sample:v1 .
    ```

2. Start an etcd instance in Kubernetes cluster:

    ```bash
    $ cd ../discovery-kubernetes
    $ kubectl create -f etcd.yaml
    ```

3. Run both samples in Kubernetes cluster:

    ```bash
    $ kubectl create -f register-deployment.yaml
    $ kubectl create -f discover-deployment.yaml
    ```

4. Create service for discover deployment and expose its NodePort:

    ```bash
    $ kubectl create -f discover-service.yaml
    ```

5. Get the port, which was assigned to discover service:

    ```bash
    $ kubectl describe service discover | egrep NodePort:
    ```

The application/service can be accessed on the following URL:
* JAX-RS REST resource, discovery using annotations - http://MINIKUBE_IP:DISCOVER_SERVICE_PORT/v1/discover
* JAX-RS REST resource, programmatic discovery - http://MINIKUBE_IP:DISCOVER_SERVICE_PORT/v1/programmatic

You can find minikube IP using following command:

```bash
$ minikube ip
```

To remove Kubernetes deployments and service run following commands:

```bash
$ kubectl delete deployment register-deployment discover-deployment
$ kubectl delete service discover etcd
```

To shut down the minikube cluster run following command:

```bash
$ minikube stop
```

## Tutorial

This tutorial will guide you through the steps required to deploy two sample services,
which use KumuluzEE Service Discovery, to Kubernetes cluster.
We will deploy a sample, which registers itself to etcd and a sample, which discovers it.

We will follow these steps:
* Create two Dockerfiles for existing samples
* Build both samples
* Create single instance etcd deployment and service
* Create deployments for both samples
* Create a service to expose discover sample outside the cluster

### Create two Dockerfiles for existing samples

Add Dockerfile to the root of the `discovery-discover-jaxrs` project:
```dockerfile
FROM isuper/java-oracle

COPY target /usr/src/myapp

WORKDIR /usr/src/myapp

EXPOSE 8080

CMD ["java", "-server", "-cp", "classes:dependency/*", "com.kumuluz.ee.EeApplication"]
```

We will use the same Dockerfile for both samples, so copy it into the root of the `discovery-register` project.

### Build both samples

Use commands, described in the Usage section step 1 to build both images.

### Create single instance etcd deployment and service

Use the following deployment to create single etcd instance in the cluster:

```yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: etcd-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: etcd
    spec:
      containers:
      - command:
        - /usr/local/bin/etcd
        - --name
        - etcd0
        - --initial-advertise-peer-urls
        - http://etcd:2380
        - --listen-peer-urls
        - http://0.0.0.0:2380
        - --listen-client-urls
        - http://0.0.0.0:2379
        - --advertise-client-urls
        - http://etcd:2379
        - --initial-cluster-state
        - new
        image: quay.io/coreos/etcd:latest
        name: etcd
        ports:
        - containerPort: 2379
          name: client
          protocol: TCP
        - containerPort: 2380
          name: server
          protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: etcd
spec:
  type: NodePort
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  - name: server
    port: 2380
    protocol: TCP
    targetPort: 2380
  selector:
    app: etcd
```

Use commands, described in the Usage section step 2 to create the deployment.

By creating etcd Kubernetes service, etcd instance is available outside the cluster by its
NodePort (http://NODE-IP:NODE-PORT). If you wish to register services outside the cluster, make sure you use this
address in `KUMULUZEE_DISCOVERY_ETCD_HOSTS` key.

### Create deployments for both samples

Create deployment for the discover sample:

```yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: discover-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: discover
    spec:
      containers:
      - image: discover-sample:v1
        name: discover
        env:
          - name: KUMULUZEE_DISCOVERY_CLUSTER
            value: minikube
          - name: KUMULUZEE_DISCOVERY_ETCD_HOSTS
            value: http://etcd:2379
        ports:
        - containerPort: 8080
          name: server
          protocol: TCP
```

Environment variable `KUMULUZEE_DISCOVERY_CLUSTER` is an id that should be the same for every service,
running in the same cluster (for those which register and those which discover services).
We are using id `minikube` in this example.

We will use Kubernetes DNS entry for our etcd host, which was created automatically when we added etcd service in the
previous step. If you have Kubernetes DNS disabled, you could use etcd service IP instead.

Create deployment for the register sample:

```yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: register-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: register
    spec:
      containers:
      - image: register-sample:v1
        name: register
        env:
#          - name: KUMULUZEE_SERVER_BASEURL
#            value: http://NODE-IP:SERVICE-NODEPORT
          - name: KUMULUZEE_DISCOVERY_CLUSTER
            value: minikube
          - name: KUMULUZEE_DISCOVERY_ETCD_HOSTS
            value: http://etcd:2379
        ports:
        - containerPort: 8080
          name: server
          protocol: TCP
```

We use the same environment variables in this deployment.

If you want your service to be accessible outside the cluster, you should also specify environment
variable `KUMULUZEE_SERVER_BASEURL` (commented lines above). Services outside your cluster will then access your service by
`KUMULUZEE_SERVER_BASEURL`, services inside your cluster will access your service by its pod IP.

Use commands, described in the Usage section step 3 to create the deployment.

### Create a service to expose discover sample outside the cluster

In order to access discovering service, we need to expose it through Kubernetes service:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: discover
spec:
  type: NodePort
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: discover

```

Use commands, described in the Usage section step 5 to access the service.

#### Running services outside cluster

If you want, you can also run services outside your cluster. In that case, don't specify `KUMULUZEE_DISCOVEY_CLUSTER`
key and services will be able to correctly register and discover each other. You can also run services in different
cluster, in which case you should specify different `KUMULUZEE_DISCOVEY_CLUSTER` key for all services in another
cluster. If you are running services on different locations, remember that in order for services to correctly discover
each other, every service should be registered in the same etcd cluster.
</pre></body></html>




File path: kumuluzee-reactive-vertx/kumuluzee-reactive-vertx-bridge/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="all"&gt;
&lt;/beans&gt;</pre></body></html>




File path: jul/src/main/resources/logging.properties
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Default global logging level
.level=INFO

# ConsoleHandler definition
handlers=java.util.logging.ConsoleHandler

# ConsoleHandler configuration settings
java.util.logging.ConsoleHandler.level=INFO
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter</pre></body></html>




File path: kumuluzee-config-zookeeper/src/main/java/com/kumuluz/ee/samples/kumuluz_config_etcd/ConfigurationEventHandler.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/

package com.kumuluz.ee.samples.kumuluz_config_etcd;

import com.kumuluz.ee.configuration.utils.ConfigurationUtil;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import java.util.logging.Logger;

/**
 * @author Jan Meznarič
 * @since 2.3.0
 */
@ApplicationScoped
public class ConfigurationEventHandler {

    private static final Logger log = Logger.getLogger(ConfigurationEventHandler.class.getName());

    public void init(@Observes @Initialized(ApplicationScoped.class) Object init) {

        String watchedKey = "rest-config.maintenance";

        ConfigurationUtil.getInstance().subscribe(watchedKey, (String key, String value) -&gt; {

            if (watchedKey.equals(key)) {

                if ("true".equals(value.toLowerCase())) {
                    log.info("Maintenance mode enabled.");
                } else {
                    log.info("Maintenance mode disabled.");
                }

            }

        });
    }

}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-business-logic/src/main/java/com/kumuluz/ee/samples/tutorial/customers/cdi/configuration/RestProperties.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.cdi.configuration;

import com.kumuluz.ee.configuration.cdi.ConfigBundle;
import com.kumuluz.ee.configuration.cdi.ConfigValue;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
@ConfigBundle("rest-properties")
public class RestProperties {

    @ConfigValue(value = "external-dependencies.order-service.enabled", watch = true)
    private boolean orderServiceEnabled;

    public boolean isOrderServiceEnabled() {
        return orderServiceEnabled;
    }

    public void setOrderServiceEnabled(boolean orderServiceEnabled) {
        this.orderServiceEnabled = orderServiceEnabled;
    }
}
</pre></body></html>




File path: kumuluzee-grpc/grpc-server/src/main/java/grpc/UserServiceImpl.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package grpc;

import com.kumuluz.ee.grpc.annotations.GrpcInterceptor;
import com.kumuluz.ee.grpc.annotations.GrpcService;
import io.grpc.stub.StreamObserver;
import beans.UserBean;
import entity.User;

import javax.enterprise.inject.spi.CDI;
import java.util.logging.Logger;

@GrpcService(interceptors = {
        @GrpcInterceptor(name = "grpc.interceptors.HeaderInterceptor2"),
        @GrpcInterceptor(name = "grpc.interceptors.HeaderInterceptor")},
        secured = true)
public class UserServiceImpl extends UserGrpc.UserImplBase {

    private static final Logger logger = Logger.getLogger(UserServiceImpl.class.getName());

    private UserBean userBean;

    @Override
    public void getUser(UserService.UserRequest request, StreamObserver&lt;UserService.UserResponse&gt; responseObserver) {

        userBean = CDI.current().select(UserBean.class).get();
        User user = userBean.getUser(request.getId());
        UserService.UserResponse response;

        if (user != null) {
            response = UserService.UserResponse.newBuilder()
                    .setId(user.getId())
                    .setName(user.getName())
                    .setSurname(user.getSurname())
                    .build();
            responseObserver.onNext(response);
        }

        responseObserver.onCompleted();
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-customers&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;customers-api&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.security&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-security-keycloak&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.health&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-health&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.blog&lt;/groupId&gt;
            &lt;artifactId&gt;customers-business-logic&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.cors&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cors&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-logs-fluentd/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-logs-fluentd&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Logs Fluentd sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Logs Fluentd usage sample with KumuluzEE&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.logs&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-logs-fluentd&lt;/artifactId&gt;
            &lt;version&gt;1.5.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: jax-ws/jax-ws-metro/src/main/resources/webapp/WEB-INF/sun-jaxws.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;endpoints xmlns="http://java.sun.com/xml/ns/jax-ws/ri/runtime"
           version="2.0"&gt;
    &lt;endpoint name="WebServiceImpl"
              implementation="com.kumuluz.ee.samples.jaxws.metro.CustomerEndpoint"
              url-pattern="/CustomerEndpoint"/&gt;
&lt;/endpoints&gt;</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customers
      username: postgres
      password: postgres
      pool:
        max-size: 20
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-servlet/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;discovery-etcd-discover-servlet&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE ETCD Discovery servlet sample&lt;/name&gt;
    &lt;description&gt;Discover service with KumuluzEE servlet service&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/kubernetes-discovery_config-part1/order-cm.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-order-config
  namespace: kumuluzee-blog
data:
  KUMULUZEE_DISCOVERY_CLUSTER: private-coreos
  KUMULUZEE_DISCOVERY_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_CONFIG_ETCD_HOSTS: http://etcd:2379
  KUMULUZEE_DATASOURCES0_CONNECTIONURL: jdbc:postgresql://postgres-orders:5432/order
  KUMULUZEE_SERVER_BASEURL: http://192.168.29.246:32583
  KUMULUZEE_HEALTH_CHECKS_DATASOURCEHEALTHCHECK_CONNECTIONURL: jdbc:postgresql://postgres-orders:5432/order
</pre></body></html>




File path: kumuluzee-discovery-etcd/discovery-etcd-discover-jaxrs/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;discovery-etcd-discover-jaxrs&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE ETCD Discovery JAX-RS sample&lt;/name&gt;
    &lt;description&gt;Discover service with KumuluzEE JAX-RS service&lt;/description&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-discovery-etcd&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-rest-client/src/main/java/com/kumuluz/ee/samples/kumuluzee_rest_client/api/SensitiveDataResponseMapper.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.kumuluz.ee.samples.kumuluzee_rest_client.api;

import com.kumuluz.ee.samples.kumuluzee_rest_client.entities.Customer;
import com.kumuluz.ee.samples.kumuluzee_rest_client.exceptions.SensitiveDataException;
import org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;

/**
 * @author Urban Malc
 * @since 3.1.0
 */
public class SensitiveDataResponseMapper implements ResponseExceptionMapper&lt;SensitiveDataException&gt; {

    @Override
    public SensitiveDataException toThrowable(Response response) {

        response.bufferEntity();

        try {
            Customer c = response.readEntity(Customer.class);

            if (c.getId().equals("1")) {
                return new SensitiveDataException();
            }
        } catch (Exception ignored) {
        }

        return null;
    }

    @Override
    public boolean handles(int status, MultivaluedMap&lt;String, Object&gt; headers) {
        return status == HttpServletResponse.SC_OK;
    }
}
</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_2.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/resources/LoadResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.resources;

import com.kumuluz.ee.samples.tutorial.customers.cdi.CustomersBean;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * Created by zvoneg on 14/10/2017.
 */
@Path("load")
@RequestScoped
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class LoadResource {

    @Inject
    private CustomersBean customersBean;

    @POST
    public Response loadOrder(Integer n) {

        customersBean.loadOrder(n);

        return Response.status(Response.Status.OK).build();
    }
}
</pre></body></html>




File path: kumuluzee-database-schema-migrations-liquibase/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-jpa" transaction-type="RESOURCE_LOCAL"&gt;

        &lt;non-jta-data-source&gt;jdbc/BooksDS&lt;/non-jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.kumuluzee_database_schema_migrations_liquibase.Book&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;

    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: kumuluzee-graphql-jpa-simple/src/main/java/com/kumuluz/ee/samples/graphql_simple/CustomerService.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.graphql_simple;

import javax.enterprise.context.RequestScoped;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
@RequestScoped
public class CustomerService {

    @PersistenceContext
    private EntityManager em;

    public Customer getCustomer(String customerId) {
        return em.find(Customer.class, customerId);
    }

    public List&lt;Customer&gt; getCustomers() {
        List&lt;Customer&gt; customers = em
                .createNamedQuery("Customer.findCustomers", Customer.class)
                .getResultList();

        return customers;
    }

    @Transactional
    public void saveCustomer(Customer customer) {
        if (customer != null) {
            em.persist(customer);
        }

    }

    @Transactional(Transactional.TxType.REQUIRED)
    public Boolean deleteCustomer(String customerId) {
        Customer customer = em.find(Customer.class, customerId);
        if (customer != null) {
            em.remove(customer);
            return true;
        }
        return false;
    }
}
</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/producers/JacksonProducer.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.producers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Provider;
import java.text.SimpleDateFormat;
import java.util.TimeZone;

@Provider
public class JacksonProducer implements ContextResolver&lt;ObjectMapper&gt; {

    private final ObjectMapper mapper;

    public JacksonProducer() {

        mapper = new ObjectMapper();

        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        mapper.setDateFormat(dateFormat);
    }

    @Override
    public ObjectMapper getContext(Class&lt;?&gt; aClass) {
        return mapper;
    }
}
</pre></body></html>




File path: tutorial-microservice-config-discovery-faulttolerance-logs-metrics-security/orders/orders-business-logic/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-tutorial-orders&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
        &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;orders-business-logic&lt;/artifactId&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples.tutorial&lt;/groupId&gt;
            &lt;artifactId&gt;orders-persistence&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
  encoded-property: ZW5jb2RlZCBwcm9wZXJ0eQ==</pre></body></html>




File path: kumuluzee-config-mp/src/main/java/com/kumuluz/ee/samples/converters/CustomerConverter.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.converters;

import com.kumuluz.ee.samples.models.Customer;
import org.eclipse.microprofile.config.spi.Converter;

import javax.annotation.Priority;

/**
 * @author Urban Malc
 * @author Jan Meznarič
 * @since 2.5.0
 */
@Priority(500)
public class CustomerConverter implements Converter&lt;Customer&gt; {

    @Override
    public Customer convert(String s) {
        return Customer.parse(s);
    }
}
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/master/src/main/resources/META-INF/beans.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
       bean-discovery-mode="annotated"&gt;
&lt;/beans&gt;</pre></body></html>




File path: kumuluzee-grpc/grpc-client/src/main/java/Example.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">import client.UserServiceClient;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import java.util.logging.Logger;

@ApplicationScoped
public class Example {

    private final static Logger logger = Logger.getLogger(Example.class.getName());

    @Inject
    UserServiceClient userClient;

    public void init(@Observes @Initialized(ApplicationScoped.class) Object o){
        logger.info("Example initialized");
        userClient.getUser(1);
    }
}
</pre></body></html>




File path: jsp/src/main/java/com/kumuluz/ee/samples/jsf/Database.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
*/
package com.kumuluz.ee.samples.jsf;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Benjamin Kastelic
 * @since 2.3.0
 */
public class Database {
    private static List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();

    public static List&lt;Customer&gt; getCustomers() {
        return customers;
    }

    public static Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId))
                return customer;
        }

        return null;
    }

    public static void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public static void deleteCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getId().equals(customerId)) {
                customers.remove(customer);
                break;
            }
        }
    }
}
</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/java/com/kumuluz/ee/samples/kafka/registry/producer/Input.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.producer;

/**
 * @author cen1
 */
public class Input {
    private String price;
    private String priceExTax;
    private String taxAmount;
    private String basePrice;
    private String priceAmount;
    private String description;

    public String getPrice() {
        return price;
    }

    public void setPrice(String price) {
        this.price = price;
    }

    public String getPriceExTax() {
        return priceExTax;
    }

    public void setPriceExTax(String priceExTax) {
        this.priceExTax = priceExTax;
    }

    public String getTaxAmount() {
        return taxAmount;
    }

    public void setTaxAmount(String taxAmount) {
        this.taxAmount = taxAmount;
    }

    public String getBasePrice() {
        return basePrice;
    }

    public void setBasePrice(String basePrice) {
        this.basePrice = basePrice;
    }

    public String getPriceAmount() {
        return priceAmount;
    }

    public void setPriceAmount(String priceAmount) {
        this.priceAmount = priceAmount;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}</pre></body></html>




File path: kumuluzee-rest/src/main/resources/META-INF/persistence.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1"&gt;
    &lt;persistence-unit name="kumuluzee-samples-jpa" transaction-type="JTA"&gt;

        &lt;jta-data-source&gt;jdbc/CustomersDS&lt;/jta-data-source&gt;

        &lt;class&gt;com.kumuluz.ee.samples.rest.Customer&lt;/class&gt;

        &lt;properties&gt;
            &lt;property name="javax.persistence.schema-generation.database.action" value="create"/&gt;
            &lt;property name="javax.persistence.schema-generation.create-source" value="metadata"/&gt;
            &lt;property name="javax.persistence.schema-generation.drop-source" value="metadata"/&gt;
        &lt;/properties&gt;

    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre></body></html>




File path: microservices-simple/catalogue/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;microservices-simple&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;microservices-simple-catalogue&lt;/artifactId&gt;

    &lt;name&gt;Simple microservices sample with KumuluzEE catalogue&lt;/name&gt;
    &lt;description&gt;Catalogue microservice sample using KumuluzEE using a shared database module&lt;/description&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
            &lt;artifactId&gt;microservices-simple-models&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-microProfile-1.0&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-jaxrs/src/main/resources/webapp/WEB-INF/web.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"&gt;
&lt;/web-app&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/resources/log4j2.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration name="config-name"&gt;
    &lt;Appenders&gt;
        &lt;Console name="console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="%d %p %marker %m %X %ex %n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;</pre></body></html>




File path: kumuluzee-blog-samples/kumuluzee-kubernetes/customers/customers-api/src/main/java/com/kumuluz/ee/samples/tutorial/customers/api/v1/dtos/Error.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.tutorial.customers.api.v1.dtos;

public class Error {

    private Integer status;
    private String code;
    private String message;

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

}

</pre></body></html>




File path: kumuluzee-config-zookeeper/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Config sample with Apache ZooKeeper 

&gt; Build a REST service which utilizes KumuluzEE Config to access configuration properties stored in Apache ZooKeeper and 
&gt; pack it as a KumuluzEE microservice

The objective of this sample is to show how to develop a microservice that uses KumuluzEE Config extension to
access configuration properties stored in Apache ZooKeeper. In this sample we develop a simple REST service that returns
a list of configuration properties from all available configuration sources and pack it as KumuluzEE microservice. This 
tutorial will guide you through all the necessary steps. You will first add KumuluzEE dependencies into pom.xml. To 
develop the REST service, you will use the standard JAX-RS 2 API. Required knowledge: basic familiarity with JAX-RS 2
and basic concepts of REST, JSON, yaml and ZooKeeper.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
    

## Prerequisites

To run this sample you will need a ZooKeeper instance. Note that such setup with only one node is not viable for 
production environments, but only for developing purposes. Here is an example on how to quickly run a ZooKeeper instance 
with docker:

   ```bash
    $ docker run -p 2181:2181 --name zookeeper --restart always -d zookeeper
   ```


## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd kumuluzee-config-zookeeper
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* JAX-RS REST resource - http://localhost:8080/v1/config

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple REST service that exposes configuration 
properties retrieved with a built-in configuration framework and KumuluEE config extension. We will develop a 
simple REST service with just one resource:
* GET http://localhost:8080/v1/config - list of all configuration properties from configuration framework 

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet, JAX-RS and CDI)
* Add Maven dependency to KumuluzEE Config
* Define our configuration properties in configuration file
* Implement the service using standard JAX-RS 2
* Build the microservice
* Run it
* Dynamically change configuration properties in ZooKeeper

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-jax-rs-jersey` and `kumuluzee-cdi-weld` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
         &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the service

Define KumuluzEE configuration as well as your custom configuration properties in a `config.yaml` configuration 
file:

```yaml
kumuluzee:
  name: customer-service
  version: 1.0.0
  env:
    name: dev
  config:
    zookeeper:
      hosts: localhost:2181

rest-config:
  string-property: Monday
  boolean-property: true
  integer-property: 23
```

Register your module as JAX-RS service and define the application with the `@ApplicationPath` annotation:

```java
@ApplicationPath("v1")
public class ConfigApplication extends Application {
}
```

Implement an application scoped CDI bean that will automatically load and hold our configuration properties. It shall
be annotated with `@ConfigBundle` annotation whose value represents the prefix for the configuration properties keys.
Add a `@ConfigValue(watch = true)` to enable watch on the key. This will monitor the changes of this key in ZooKeeper
and automatically update the value in the configuration bean. 
 
```java
@ApplicationScoped
@ConfigBundle("rest-config")
public class ConfigProperties {

    @ConfigValue(watch = true)
    private String stringProperty;
    private Boolean booleanProperty;
    private Integer integerProperty;
    
    // get and set methods
    
}
```

Implement a JAX-RS resource that will expose retrieved configuration properties on GET request:

```java
@RequestScoped
@Path("/")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class ConfigResource {

    @Inject
    private ConfigProperties properties;

    @GET
    @Path("/config")
    public Response test() {
        String response =
                "{" +
                        "\"stringProperty\": \"%s\"," +
                        "\"booleanProperty\": %b," +
                        "\"integerProperty\": %d" +
                        "}";

        response = String.format(
                response,
                properties.getStringProperty(),
                properties.getBooleanProperty(),
                properties.getIntegerProperty());

        return Response.ok(response).build();
    }
}
```

To build the microservice and run the example, use the commands as described in previous sections.

Since we have not defined any configuration properties in ZooKeeper, GET http://localhost:8080/v1/config will return 
configuration properties from configuration file. We can now try and add some values in ZooKeeper. Since we enabled
the watch on the field `stringProperty`, it will be dynamically updated on any change. We can add a value to
ZooKeeper using any client tool. After the update, access the config endpoint again and you will get an updated value
from ZooKeeper.
</pre></body></html>




File path: kumuluzee-discovery-consul/discovery-consul-discover-servlet/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE Discovery &amp;mdash; discover services in servlet 

&gt; Develop a KumuluzEE servlet that discovers a microservice registered with Consul.

The objective of this sample is to show how to discover a service, registered with Consul using KumuluzEE Discovery 
extension. The tutorial will guide you through the necessary steps. You will add KumuluzEE dependencies into pom.xml.
You will develop a simple servlet, which uses KumuluzEE Discovery extension for discovering registered services. 
Required knowledge: basic familiarity with servlets and basic familiarity with Consul.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```

## Prerequisites

To run this sample you will need a Consul instance. Note that such setup with only one node is not viable for 
production environments, but only for developing purposes. Download Consul and run it in development mode with the 
following command:

   ```bash
    $ consul agent -dev
   ```


You will also need a registered service instance. You can use the
 [discovery-consul-register](http://github.com/kumuluz/kumuluzee-samples/tree/master/kumuluzee-discovery-consul/discovery-consul-register) sample.
 
## Usage

The example uses maven to build and run the microservice.

1. Build the sample using maven:

    ```bash
    $ cd discovery-samples/discovery-discover-servlet
    $ mvn clean package
    ```

2. Start local Consul instance and another microservice, which registers to Consul:

    You can find instructions in discovery-consul-register sample, mentioned above.

3. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environemnt use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    
The application/service can be accessed on the following URL:
* Servlet - http://localhost:8080/DiscoverServlet

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a servlet, which uses KumuluzEE Discovery extension.
We will develop a simple servlet with the following resources:
* GET http://localhost:8080/DiscoverServlet - discover resource and send it a simple request

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet)
* Add Maven dependency to KumuluzEE Discovery extension
* Implement the service
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty`, `kumuluzee-cdi-weld` and `kumuluzee-discovery` dependencies:
```xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.kumuluz.ee.discovery&lt;/groupId&gt;
        &lt;artifactId&gt;kumuluzee-discovery-consul&lt;/artifactId&gt;
        &lt;version&gt;${kumuluzee-discovery.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Implement the servlet

Implement the servlet, which will return a response, received from discovered service:

```java
@WebServlet("DiscoverServlet")
public class DiscoverServlet extends HttpServlet {

    @Inject
    private DiscoveryUtil discoveryUtil;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException,
            IOException {

        URL url = discoveryUtil.getServiceInstance("customer-service", "*", "dev", AccessType.DIRECT).orElse(null);

        if (url != null) {
            response.getWriter().println("Discovered instance on " + url);

            response.getWriter().println("Sending request for customer list ...");
            URL serviceUrl = new URL(url.toString() + "/v1/customers");
            HttpURLConnection conn = (HttpURLConnection) serviceUrl.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder receivedResponse = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                receivedResponse.append(line);
            }
            rd.close();

            response.getWriter().println("Received response: " + receivedResponse.toString());

        } else {
            response.getWriter().println("No service instances were discovered.");
        }
    }
}
```

In the example above, we inject an `URL` resource using `@DiscoverService` annotation. KumuluzEE Discovery extension
uses NPM-like versioning, so by specifying version "*", we always get the latest version of a microservice, 
registered with Consul. Servlet sends a GET request to the discovered URL and sends back the received response.

### Build the microservice and run it

To build the microservice and run the example, use the commands as described in previous sections.</pre></body></html>




File path: kumuluzee-ethereum-web3j/src/main/java/com/kumuluz/ee/samples/ethereum/EthereumApplication.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2018 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.ethereum;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * @author Domen Gašperlin
 * @since 1.0.0
 */
@ApplicationPath("v1")
public class EthereumApplication extends Application {
}</pre></body></html>




File path: kumuluzee-fault-tolerance/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-fault-tolerance&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;name&gt;KumuluzEE Fault Tolerance sample&lt;/name&gt;
    &lt;description&gt;KumuluzEE Fault Tolerance extensions usage sample with KumuluzEE&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;customer-api&lt;/module&gt;
        &lt;module&gt;order-api&lt;/module&gt;
        &lt;module&gt;common&lt;/module&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;kumuluzee-fault-tolerance.version&gt;2.2.0-SNAPSHOT&lt;/kumuluzee-fault-tolerance.version&gt;
        &lt;kumuluzee-config-mp.version&gt;1.5.0-SNAPSHOT&lt;/kumuluzee-config-mp.version&gt;
        &lt;kumuluzee-metrics.version&gt;2.4.0-SNAPSHOT&lt;/kumuluzee-metrics.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-fault-tolerance-common&lt;/artifactId&gt;
                &lt;version&gt;${project.version}&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.fault.tolerance&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-fault-tolerance-smallrye&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-fault-tolerance.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.config&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-config-mp&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-config-mp.version}&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee.metrics&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-metrics-core&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee-metrics.version}&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
                &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
                &lt;version&gt;4.5.3&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
                &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
                &lt;version&gt;2.9.10.3&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
                &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;
                &lt;version&gt;1.7.25&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
                &lt;version&gt;1.7.25&lt;/version&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

&lt;/project&gt;</pre></body></html>




File path: kumuluzee-config-consul/src/main/resources/webapp/index.html
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></body></html>




File path: kumuluzee-streaming-kafka-registry/kumuluzee-streaming-kafka-registry-producer/src/main/java/com/kumuluz/ee/samples/kafka/registry/producer/ProducerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.kumuluz.ee.samples.kafka.registry.producer;

import com.kumuluz.ee.samples.kafka.registry.avro.lib.Pricing;
import com.kumuluz.ee.streaming.common.annotations.StreamProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.UUID;
import java.util.logging.Logger;

/**
 * @author cen1
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/produce")
@RequestScoped
public class ProducerResource {

    private static final Logger log = Logger.getLogger(ProducerResource.class.getName());

    @Inject
    @StreamProducer(config = "producer-avro")
    private Producer producerAvro;

    @POST
    public Response produceMessage(Input msg) {

        final Pricing pricing = new Pricing(msg.getPrice(), msg.getPriceExTax(), msg.getPrice(),
            msg.getTaxAmount(), msg.getDescription());
        final ProducerRecord&lt;String, Pricing&gt; record =
            new ProducerRecord&lt;&gt;("pricing-avro", UUID.randomUUID().toString(), pricing);

        producerAvro.send(record);

        return Response.ok().build();
    }
}
</pre></body></html>




File path: jax-ws/jax-ws-cxf/README.md
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># KumuluzEE JAX-WS CXF SOAP web service sample

&gt; Develop a SOAP web service using JAX-WS CXF API and pack it as a KumuluzEE microservice.

The objective of this sample is to show how to develop a SOAP web service using JAX-WS CXF implementation and pack it as a 
KumuluzEE microservice. The tutorial will guide you through the necessary steps to develop webservice using top-down approach. You will add KumuluzEE 
dependencies into pom.xml. To 
develop the SOAP web service, you will use CXF implementation of JAX-WS. Required knowledge: basic familiarity with JAX-WS and basic concepts of SOAP, WSDL and 
XML. Sample shows how to use dependency injection in webservices.

## Requirements

In order to run this example you will need the following:

1. Java 8 (or newer), you can use any implementation:
    * If you have installed Java, you can check the version by typing the following in a command line:
        
        ```
        java -version
        ```

2. Maven 3.2.1 (or newer):
    * If you have installed Maven, you can check the version by typing the following in a command line:
        
        ```
        mvn -version
        ```
3. Git:
    * If you have installed Git, you can check the version by typing the following in a command line:
    
        ```
        git --version
        ```
   
## Prerequisites

This sample does not contain any prerequisites and can be started on its own.

## Usage

The example uses maven to build and run the microservices.

1. Build the sample using maven:

    ```bash
    $ cd jax-ws/jax-ws-cxf
    $ mvn clean package
    ```

2. Run the sample:
* Uber-jar:

    ```bash
    $ java -jar target/${project.build.finalName}.jar
    ```
    
    in Windows environment use the command
    ```batch
    java -jar target/${project.build.finalName}.jar
    ```

* Exploded:

    ```bash
    $ java -cp target/classes:target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
    in Windows environment use the command
    ```batch
    java -cp target/classes;target/dependency/* com.kumuluz.ee.EeApplication
    ```
    
The application/service can be accessed on the following URL:
* JAX-WS SOAP endpoint - http://localhost:8080/soap/customers/1.0
* JAX-WS SOAP WSDL - http://localhost:8080/soap/customers/1.0?wsdl

To shut down the example simply stop the processes in the foreground.

## Tutorial

This tutorial will guide you through the steps required to create a simple SOAP service using JAX-WS CXF API and pack it as a KumuluzEE microservice. 
We will develop a simple Customer SOAP service with the following operation:
* GetCustomers - list of all customers 

We will follow these steps:
* Create a Maven project in the IDE of your choice (Eclipse, IntelliJ, etc.)
* Add Maven dependencies to KumuluzEE and include KumuluzEE components (Core, Servlet and JAX-WS cxf)
* Implement the service using JAX-WS CXF API
* Build the microservice
* Run it

### Add Maven dependencies

Add the KumuluzEE BOM module dependency to your `pom.xml` file:
```xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
            &lt;version&gt;${kumuluz.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
```

Add the `kumuluzee-core`, `kumuluzee-servlet-jetty` and `kumuluzee-jax-ws-cxf` dependencies. We will add `kumuluzee-cdi-weld` just to demonstrate 
dependency injection. It is not required to run JAX-WS CXF webservice.
```xml
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-ws-cxf&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!-- Remove if you don't need cdi --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
```

Add the `kumuluzee-maven-plugin` build plugin to package microservice as uber-jar:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;repackage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

or exploded:

```xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;package&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
```

### Describe the service

Typical approach to the implementation of a SOAP web service is using the Top-Down approach by generating implementation from a WSDL file.

For example, imagine that you are creating a SOAP web service, which returns all customers. First, let us create a sample wsdl file describing our 
contract, for example:

```xml
&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:xs="http://www.w3.org/2001/XMLSchema"
                  xmlns:cust="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0"
                  name="CustomerEndpoint"
                  targetNamespace="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0"&gt;
    &lt;wsdl:types&gt;
        &lt;xs:schema xmlns:tns="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0"
                   targetNamespace="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0"&gt;
            &lt;xs:element name="GetCustomers" type="tns:GetCustomers"/&gt;
            &lt;xs:element name="GetCustomersResponse" type="tns:GetCustomersResponse"/&gt;
            &lt;xs:complexType name="GetCustomers"&gt;
                &lt;xs:sequence/&gt;
            &lt;/xs:complexType&gt;
            &lt;xs:complexType name="GetCustomersResponse"&gt;
                &lt;xs:sequence&gt;
                    &lt;xs:element name="customers" type="tns:Customer" minOccurs="0" maxOccurs="unbounded"/&gt;
                &lt;/xs:sequence&gt;
            &lt;/xs:complexType&gt;
            &lt;xs:complexType name="Customer"&gt;
                &lt;xs:sequence&gt;
                    &lt;xs:element name="id" type="xs:string"/&gt;
                    &lt;xs:element name="firstName" type="cust:string32"/&gt;
                    &lt;xs:element name="lastName" type="cust:string32"/&gt;
                &lt;/xs:sequence&gt;
            &lt;/xs:complexType&gt;
            &lt;xs:simpleType name="string32"&gt;
                &lt;xs:restriction base="xs:string"&gt;
                    &lt;xs:minLength value="1"/&gt;
                    &lt;xs:maxLength value="32"/&gt;
                &lt;/xs:restriction&gt;
            &lt;/xs:simpleType&gt;
        &lt;/xs:schema&gt;
    &lt;/wsdl:types&gt;
    &lt;wsdl:message name="GetCustomers"&gt;
        &lt;wsdl:part name="parameters" element="cust:GetCustomers"/&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:message name="GetCustomersResponse"&gt;
        &lt;wsdl:part name="parameters" element="cust:GetCustomersResponse"/&gt;
    &lt;/wsdl:message&gt;
    &lt;wsdl:portType name="CustomerEndpoint"&gt;
        &lt;wsdl:operation name="getCustomers"&gt;
            &lt;wsdl:input message="cust:GetCustomers"/&gt;
            &lt;wsdl:output message="cust:GetCustomersResponse"/&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:portType&gt;
    &lt;wsdl:binding name="CustomerEndpointSOAP" type="cust:CustomerEndpoint"&gt;
        &lt;soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/&gt;
        &lt;wsdl:operation name="getCustomers"&gt;
            &lt;soap:operation soapAction="http://kumuluz.com/samples/jax-ws/cxf/customers/1.0/GetCustomers"/&gt;
            &lt;wsdl:input&gt;
                &lt;soap:body use="literal"/&gt;
            &lt;/wsdl:input&gt;
            &lt;wsdl:output&gt;
                &lt;soap:body use="literal"/&gt;
            &lt;/wsdl:output&gt;
        &lt;/wsdl:operation&gt;
    &lt;/wsdl:binding&gt;
    &lt;wsdl:service name="CustomerEndpoint"&gt;
        &lt;wsdl:port name="CustomerEndpointSOAP" binding="cust:CustomerEndpointSOAP"&gt;
            &lt;soap:address location="https://gpor89.github.com/soap/CustomerEndpoint"/&gt;
        &lt;/wsdl:port&gt;
    &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
```

Wsdl describes service with name CustomerEndpoint having one operation called getCustomers which returns list of Customer business objects.
Each name and surname data must be set and at most 32 characters long. We will demonstrate schema validation and interceptors.

### Generate interface

To implement our service as fast as possible we should configure `jaxws-maven-plugin` build plugin to generate java classes and interfaces for us. Another option is to 
use wsimport tool when we don't want to use maven.

```xml
&lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.5&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;wsimport-from-jdk&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;wsimport&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;wsdlDirectory&gt;src/main/resources/wsdls&lt;/wsdlDirectory&gt;
                    &lt;wsdlFiles&gt;
                        &lt;wsdlFile&gt;customers.wsdl&lt;/wsdlFile&gt;
                    &lt;/wsdlFiles&gt;
                    &lt;keep&gt;true&lt;/keep&gt;
                    &lt;sourceDestDir&gt;target/generated-sources/apt&lt;/sourceDestDir&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
```
Maven package command will bring us generated CustomerEndpoint java interface from wsdl:

```bash
$ mvn package
```

Create new java class which implements CustomerEndpoint representing implementation of our service:

```java
@WsContext(contextRoot = "/soap", urlPattern = "/customers/1.0")
@ApplicationScoped
@WebService(serviceName = "CustomerEndpoint", portName = "CustomerEndpointSOAP", targetNamespace = "http://kumuluz.com/samples/jax-ws/cxf/customers/1.0",
        endpointInterface = "com.kumuluz.samples.jax_ws.cxf.customers._1.CustomerEndpoint", wsdlLocation = "/wsdls/customers.wsdl")
@SchemaValidation
@Interceptors(WsInterceptor.class)
@HandlerChain(file = "/META-INF/handler-chains.xml")
public class CustomerEndpointBean implements CustomerEndpoint {

    private static final Logger LOG = Logger.getLogger(CustomerEndpointBean.class.getName());

    @Inject
    private CustomersService customersService;

    @Resource(name = "wsContext")
    private WebServiceContext webServiceContext;

    @Override
    public GetCustomersResponse getCustomers(final GetCustomers parameters) {

        String soapAction = (String) webServiceContext.getMessageContext().get("SOAPAction");
        LOG.info("Soap action: " + soapAction);

        GetCustomersResponse response = new GetCustomersResponse();
        response.getCustomer().addAll(customersService.getCustomers());

        return response;
    }
}
```

With WsContext annotation we can define endpoint contextRoot and url where service listens for incoming messages.
wsdlLocation attribute must be present if we need schema validation in order with @SchemaValidation annotation.

Interceptor logic may be configured with Interceptors or HandlerChain annotations. 

Replace the WebService parameters according to your wsdl service definition.

@ApplicationScoped, @Interceptors, @HandlerChain and @Inject annotations are present for demonstration purpose therefore are not required
 to run JAX-WS webservice. 

### Run the service

To run the example, use the commands as described in previous sections.
</pre></body></html>




File path: kumuluzee-opentracing-tutorial/alpha/.gitignore
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;"># Created by .ignore support plugin (hsz.mobi)
### Maven template
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties


### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

*.iml

## Directory-based project format:
.idea/
# if you remove the above rule, at least ignore the following:

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries

# Sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml
# .idea/uiDesigner.xml

# Gradle:
# .idea/gradle.xml
# .idea/libraries

# Mongo Explorer plugin:
# .idea/mongoSettings.xml

## File-based project format:
*.ipr
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties


### Eclipse template
*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse


### OSX template
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Linux template
*~

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*


### Windows template
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk


</pre></body></html>




File path: kumuluzee-health/pom.xml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;kumuluzee-samples&lt;/artifactId&gt;
        &lt;groupId&gt;com.kumuluz.ee.samples&lt;/groupId&gt;
        &lt;version&gt;3.13.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;kumuluzee-health&lt;/artifactId&gt;

    &lt;name&gt;KumuluzEE Health sample&lt;/name&gt;
    &lt;description&gt;Sample for KumuluzEE Health usage with KumuluzEE&lt;/description&gt;

    &lt;properties&gt;
        &lt;kumuluzee-health.version&gt;2.3.0-SNAPSHOT&lt;/kumuluzee-health.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-bom&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-servlet-jetty&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jax-rs-jersey&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-cdi-weld&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-jpa-eclipselink&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.kumuluz.ee.health&lt;/groupId&gt;
            &lt;artifactId&gt;kumuluzee-health&lt;/artifactId&gt;
            &lt;version&gt;${kumuluzee-health.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
            &lt;version&gt;42.0.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.kumuluz.ee&lt;/groupId&gt;
                &lt;artifactId&gt;kumuluzee-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kumuluzee.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;package&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre></body></html>




File path: kumuluzee-opentracing-tutorial/gamma/src/main/java/com/kumuluz/ee/samples/opentracing/tutorial/gamma/Resource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.opentracing.tutorial.gamma;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("gamma")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@ApplicationScoped
public class Resource {
    private Client client = ClientBuilder.newClient();

    @Inject
    private Database database;

    @GET
    public Response get() {
        Response r = client
                .target("http://localhost:8084/v1")
                .path("delta")
                .request()
                .get();
        String response = r.readEntity(String.class);
        return Response.ok( database.get(1) + "-&gt;" + response).build();
    }
}
</pre></body></html>




File path: kumuluzee-graphql-jpa-security/src/main/resources/config.yaml
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">kumuluzee:
  datasources:
    - jndi-name: jdbc/CustomersDS
      connection-url: jdbc:postgresql://localhost:5432/customers
      username: postgres
      password: postgres
      pool:
        max-size: 20
 
  security:
    keycloak:
      json: '{
               "realm": "customers-realm",
               "bearer-only": true,
               "auth-server-url": "http://localhost:8082/auth",
               "ssl-required": "external",
               "resource": "customers-api",
               "confidential-port": 0
             }'
</pre></body></html>




File path: kumuluzee-cors/src/main/java/com/kumuluz/ee/samples/cors/CustomerResource.java
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">package com.kumuluz.ee.samples.cors;

import com.kumuluz.ee.cors.annotations.CrossOrigin;

import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.ArrayList;

/**
 * Created by zvoneg on 01/08/17.
 */
@Path("customers")
@Produces(MediaType.APPLICATION_JSON)
@CrossOrigin(allowOrigin = "http://resource-origin.com")
public class CustomerResource {

    @GET
    public Response getCustomers() {

        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();
        Customer c = new Customer("1", "John", "Doe");

        customers.add(c);

        return Response.status(Response.Status.OK).entity(customers).build();
    }

}
</pre></body></html>




File path: websocket/src/main/resources/webapp/websocket.js
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 *  Copyright (c) 2014-2017 Kumuluz and/or its affiliates
 *  and other contributors as indicated by the @author tags and
 *  the contributor list.
 *
 *  Licensed under the MIT License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  https://opensource.org/licenses/MIT
 *
 *  The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, express or
 *  implied, including but not limited to the warranties of merchantability,
 *  fitness for a particular purpose and noninfringement. in no event shall the
 *  authors or copyright holders be liable for any claim, damages or other
 *  liability, whether in an action of contract, tort or otherwise, arising from,
 *  out of or in connection with the software or the use or other dealings in the
 *  software. See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var wsUri = "ws://" + document.location.hostname + ":" + document.location.port + document.location.pathname + "customer";
var websocket = new WebSocket(wsUri);

websocket.onopen = function(evt) { onOpen(evt) };
websocket.onmessage = function(evt) { onMessage(evt) };
websocket.onerror = function(evt) { onError(evt) };
var output = document.getElementById("output");

function sendMessage() {
    websocket.send(textField.value);
}

function onOpen() {
    writeToScreen("Connected to " + wsUri);
}

function onMessage(event) {
    console.log("onMessage: " + event.data);
    responseField.innerHTML += event.data + "\n";
}

function onError(event) {
    writeToScreen('&lt;span style="color: red;"&gt;ERROR:&lt;/span&gt; ' + event.data);
}

function writeToScreen(message) {
    output.innerHTML += message + "&lt;br&gt;";
}</pre></body></html>




File path: kumuluzee-config-mp/src/main/resources/META-INF/services/org.eclipse.microprofile.config.spi.Converter
<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">com.kumuluz.ee.samples.converters.CustomerConverter</pre></body></html>




